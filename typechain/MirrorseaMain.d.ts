/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface MirrorseaMainInterface extends ethers.utils.Interface {
  functions: {
    "OrderIndex()": FunctionFragment;
    "PRECISION()": FunctionFragment;
    "_isSolvent(uint256,uint256,uint256)": FunctionFragment;
    "adjustPosition(bool,uint256,uint256,string,uint256,bytes,uint256)": FunctionFragment;
    "closePosition(bool,uint256,uint256,string,uint256,bytes)": FunctionFragment;
    "executor(address)": FunctionFragment;
    "feePercent()": FunctionFragment;
    "forcedLiquidation(bool,uint256,uint256,string,uint256,bytes)": FunctionFragment;
    "helperLogic()": FunctionFragment;
    "initialize(address,address,address,address)": FunctionFragment;
    "liquidation(bool,uint256[],uint256[],string[],uint256[],bytes[])": FunctionFragment;
    "minVal()": FunctionFragment;
    "myCloseOrderIdList(address,uint256)": FunctionFragment;
    "myCloseOrderIdListLength(address)": FunctionFragment;
    "myCloseOrderIdList_index(address,uint256)": FunctionFragment;
    "myOpenOrderIdList(address,uint256)": FunctionFragment;
    "myOpenOrderIdListLength(address)": FunctionFragment;
    "myOpenOrderIdList_index(address,uint256)": FunctionFragment;
    "openOrderIdList(uint256)": FunctionFragment;
    "openOrderIdListLength()": FunctionFragment;
    "openOrderIdList_index(uint256)": FunctionFragment;
    "openPosition(bool,uint256,uint256,uint256,uint256,string,uint256,uint256,bytes)": FunctionFragment;
    "oracle()": FunctionFragment;
    "orderInfo(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "pagination(address,uint256,uint256,uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setExecutor(address,bool)": FunctionFragment;
    "setFeePercent(uint256)": FunctionFragment;
    "setOrderInfo(uint256,address,uint256,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "setSigner(address)": FunctionFragment;
    "signer()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "usc()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "OrderIndex",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "PRECISION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_isSolvent",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "adjustPosition",
    values: [
      boolean,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      BytesLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "closePosition",
    values: [
      boolean,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(functionFragment: "executor", values: [string]): string;
  encodeFunctionData(
    functionFragment: "feePercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "forcedLiquidation",
    values: [
      boolean,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "helperLogic",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidation",
    values: [
      boolean,
      BigNumberish[],
      BigNumberish[],
      string[],
      BigNumberish[],
      BytesLike[]
    ]
  ): string;
  encodeFunctionData(functionFragment: "minVal", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "myCloseOrderIdList",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "myCloseOrderIdListLength",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "myCloseOrderIdList_index",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "myOpenOrderIdList",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "myOpenOrderIdListLength",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "myOpenOrderIdList_index",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "openOrderIdList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "openOrderIdListLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "openOrderIdList_index",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "openPosition",
    values: [
      boolean,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(functionFragment: "oracle", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "orderInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pagination",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setExecutor",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeePercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setOrderInfo",
    values: [
      BigNumberish,
      string,
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "setSigner", values: [string]): string;
  encodeFunctionData(functionFragment: "signer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "usc", values?: undefined): string;

  decodeFunctionResult(functionFragment: "OrderIndex", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "PRECISION", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_isSolvent", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "adjustPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "executor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feePercent", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "forcedLiquidation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "helperLogic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "minVal", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "myCloseOrderIdList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "myCloseOrderIdListLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "myCloseOrderIdList_index",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "myOpenOrderIdList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "myOpenOrderIdListLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "myOpenOrderIdList_index",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openOrderIdList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openOrderIdListLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openOrderIdList_index",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "oracle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "orderInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pagination", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExecutor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOrderInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setSigner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "signer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usc", data: BytesLike): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export class MirrorseaMain extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MirrorseaMainInterface;

  functions: {
    OrderIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    _isSolvent(
      _id: BigNumberish,
      _price18: BigNumberish,
      _margin: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    adjustPosition(
      _marketState: boolean,
      _id: BigNumberish,
      _timestamp: BigNumberish,
      _symbols: string,
      _price18: BigNumberish,
      _signature: BytesLike,
      _adjustMargin: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    closePosition(
      _marketState: boolean,
      _id: BigNumberish,
      _timestamp: BigNumberish,
      _symbols: string,
      _price18: BigNumberish,
      _signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    executor(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    feePercent(overrides?: CallOverrides): Promise<[BigNumber]>;

    forcedLiquidation(
      _marketState: boolean,
      _id: BigNumberish,
      _timestamp: BigNumberish,
      _symbols: string,
      _price18: BigNumberish,
      _signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    helperLogic(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      _signer: string,
      _helperLogic: string,
      _usc: string,
      _oracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    liquidation(
      _marketState: boolean,
      _id: BigNumberish[],
      _timestamp: BigNumberish[],
      _symbols: string[],
      _price18: BigNumberish[],
      _signature: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    minVal(overrides?: CallOverrides): Promise<[BigNumber]>;

    myCloseOrderIdList(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    myCloseOrderIdListLength(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    myCloseOrderIdList_index(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    myOpenOrderIdList(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    myOpenOrderIdListLength(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    myOpenOrderIdList_index(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    openOrderIdList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    openOrderIdListLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    openOrderIdList_index(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    openPosition(
      _marketState: boolean,
      _margin: BigNumberish,
      _timestamp: BigNumberish,
      _direction: BigNumberish,
      _type: BigNumberish,
      _symbols: string,
      _price18: BigNumberish,
      _amt: BigNumberish,
      _signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    oracle(overrides?: CallOverrides): Promise<[string]>;

    orderInfo(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          BigNumber,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          user: string;
          _type: BigNumber;
          symbols: string;
          state: BigNumber;
          direction: BigNumber;
          openPrice18: BigNumber;
          openTime: BigNumber;
          closePrice18: BigNumber;
          closeTime: BigNumber;
          amt: BigNumber;
          margin: BigNumber;
        }
      ]
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pagination(
      _user: string,
      _type: BigNumberish,
      _row: BigNumberish,
      _page: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setExecutor(
      _address: string,
      _type: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeePercent(
      _val: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOrderInfo(
      id: BigNumberish,
      user: string,
      _type: BigNumberish,
      symbols: string,
      state: BigNumberish,
      direction: BigNumberish,
      openPrice18: BigNumberish,
      openTime: BigNumberish,
      closePrice18: BigNumberish,
      closeTime: BigNumberish,
      amt: BigNumberish,
      margin: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSigner(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    signer(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    usc(overrides?: CallOverrides): Promise<[string]>;
  };

  OrderIndex(overrides?: CallOverrides): Promise<BigNumber>;

  PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  _isSolvent(
    _id: BigNumberish,
    _price18: BigNumberish,
    _margin: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  adjustPosition(
    _marketState: boolean,
    _id: BigNumberish,
    _timestamp: BigNumberish,
    _symbols: string,
    _price18: BigNumberish,
    _signature: BytesLike,
    _adjustMargin: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  closePosition(
    _marketState: boolean,
    _id: BigNumberish,
    _timestamp: BigNumberish,
    _symbols: string,
    _price18: BigNumberish,
    _signature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  executor(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  feePercent(overrides?: CallOverrides): Promise<BigNumber>;

  forcedLiquidation(
    _marketState: boolean,
    _id: BigNumberish,
    _timestamp: BigNumberish,
    _symbols: string,
    _price18: BigNumberish,
    _signature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  helperLogic(overrides?: CallOverrides): Promise<string>;

  initialize(
    _signer: string,
    _helperLogic: string,
    _usc: string,
    _oracle: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  liquidation(
    _marketState: boolean,
    _id: BigNumberish[],
    _timestamp: BigNumberish[],
    _symbols: string[],
    _price18: BigNumberish[],
    _signature: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  minVal(overrides?: CallOverrides): Promise<BigNumber>;

  myCloseOrderIdList(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  myCloseOrderIdListLength(
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  myCloseOrderIdList_index(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  myOpenOrderIdList(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  myOpenOrderIdListLength(
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  myOpenOrderIdList_index(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  openOrderIdList(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  openOrderIdListLength(overrides?: CallOverrides): Promise<BigNumber>;

  openOrderIdList_index(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  openPosition(
    _marketState: boolean,
    _margin: BigNumberish,
    _timestamp: BigNumberish,
    _direction: BigNumberish,
    _type: BigNumberish,
    _symbols: string,
    _price18: BigNumberish,
    _amt: BigNumberish,
    _signature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  oracle(overrides?: CallOverrides): Promise<string>;

  orderInfo(
    _id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      user: string;
      _type: BigNumber;
      symbols: string;
      state: BigNumber;
      direction: BigNumber;
      openPrice18: BigNumber;
      openTime: BigNumber;
      closePrice18: BigNumber;
      closeTime: BigNumber;
      amt: BigNumber;
      margin: BigNumber;
    }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  pagination(
    _user: string,
    _type: BigNumberish,
    _row: BigNumberish,
    _page: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setExecutor(
    _address: string,
    _type: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeePercent(
    _val: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOrderInfo(
    id: BigNumberish,
    user: string,
    _type: BigNumberish,
    symbols: string,
    state: BigNumberish,
    direction: BigNumberish,
    openPrice18: BigNumberish,
    openTime: BigNumberish,
    closePrice18: BigNumberish,
    closeTime: BigNumberish,
    amt: BigNumberish,
    margin: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSigner(
    _address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  usc(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    OrderIndex(overrides?: CallOverrides): Promise<BigNumber>;

    PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    _isSolvent(
      _id: BigNumberish,
      _price18: BigNumberish,
      _margin: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    adjustPosition(
      _marketState: boolean,
      _id: BigNumberish,
      _timestamp: BigNumberish,
      _symbols: string,
      _price18: BigNumberish,
      _signature: BytesLike,
      _adjustMargin: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    closePosition(
      _marketState: boolean,
      _id: BigNumberish,
      _timestamp: BigNumberish,
      _symbols: string,
      _price18: BigNumberish,
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    executor(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    feePercent(overrides?: CallOverrides): Promise<BigNumber>;

    forcedLiquidation(
      _marketState: boolean,
      _id: BigNumberish,
      _timestamp: BigNumberish,
      _symbols: string,
      _price18: BigNumberish,
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    helperLogic(overrides?: CallOverrides): Promise<string>;

    initialize(
      _signer: string,
      _helperLogic: string,
      _usc: string,
      _oracle: string,
      overrides?: CallOverrides
    ): Promise<void>;

    liquidation(
      _marketState: boolean,
      _id: BigNumberish[],
      _timestamp: BigNumberish[],
      _symbols: string[],
      _price18: BigNumberish[],
      _signature: BytesLike[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    minVal(overrides?: CallOverrides): Promise<BigNumber>;

    myCloseOrderIdList(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    myCloseOrderIdListLength(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    myCloseOrderIdList_index(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    myOpenOrderIdList(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    myOpenOrderIdListLength(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    myOpenOrderIdList_index(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    openOrderIdList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    openOrderIdListLength(overrides?: CallOverrides): Promise<BigNumber>;

    openOrderIdList_index(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    openPosition(
      _marketState: boolean,
      _margin: BigNumberish,
      _timestamp: BigNumberish,
      _direction: BigNumberish,
      _type: BigNumberish,
      _symbols: string,
      _price18: BigNumberish,
      _amt: BigNumberish,
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    oracle(overrides?: CallOverrides): Promise<string>;

    orderInfo(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        user: string;
        _type: BigNumber;
        symbols: string;
        state: BigNumber;
        direction: BigNumber;
        openPrice18: BigNumber;
        openTime: BigNumber;
        closePrice18: BigNumber;
        closeTime: BigNumber;
        amt: BigNumber;
        margin: BigNumber;
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    pagination(
      _user: string,
      _type: BigNumberish,
      _row: BigNumberish,
      _page: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setExecutor(
      _address: string,
      _type: boolean,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setFeePercent(
      _val: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setOrderInfo(
      id: BigNumberish,
      user: string,
      _type: BigNumberish,
      symbols: string,
      state: BigNumberish,
      direction: BigNumberish,
      openPrice18: BigNumberish,
      openTime: BigNumberish,
      closePrice18: BigNumberish,
      closeTime: BigNumberish,
      amt: BigNumberish,
      margin: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setSigner(_address: string, overrides?: CallOverrides): Promise<boolean>;

    signer(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    usc(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    OrderIndex(overrides?: CallOverrides): Promise<BigNumber>;

    PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    _isSolvent(
      _id: BigNumberish,
      _price18: BigNumberish,
      _margin: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    adjustPosition(
      _marketState: boolean,
      _id: BigNumberish,
      _timestamp: BigNumberish,
      _symbols: string,
      _price18: BigNumberish,
      _signature: BytesLike,
      _adjustMargin: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    closePosition(
      _marketState: boolean,
      _id: BigNumberish,
      _timestamp: BigNumberish,
      _symbols: string,
      _price18: BigNumberish,
      _signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    executor(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    feePercent(overrides?: CallOverrides): Promise<BigNumber>;

    forcedLiquidation(
      _marketState: boolean,
      _id: BigNumberish,
      _timestamp: BigNumberish,
      _symbols: string,
      _price18: BigNumberish,
      _signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    helperLogic(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _signer: string,
      _helperLogic: string,
      _usc: string,
      _oracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    liquidation(
      _marketState: boolean,
      _id: BigNumberish[],
      _timestamp: BigNumberish[],
      _symbols: string[],
      _price18: BigNumberish[],
      _signature: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    minVal(overrides?: CallOverrides): Promise<BigNumber>;

    myCloseOrderIdList(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    myCloseOrderIdListLength(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    myCloseOrderIdList_index(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    myOpenOrderIdList(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    myOpenOrderIdListLength(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    myOpenOrderIdList_index(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    openOrderIdList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    openOrderIdListLength(overrides?: CallOverrides): Promise<BigNumber>;

    openOrderIdList_index(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    openPosition(
      _marketState: boolean,
      _margin: BigNumberish,
      _timestamp: BigNumberish,
      _direction: BigNumberish,
      _type: BigNumberish,
      _symbols: string,
      _price18: BigNumberish,
      _amt: BigNumberish,
      _signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    oracle(overrides?: CallOverrides): Promise<BigNumber>;

    orderInfo(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pagination(
      _user: string,
      _type: BigNumberish,
      _row: BigNumberish,
      _page: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setExecutor(
      _address: string,
      _type: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeePercent(
      _val: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOrderInfo(
      id: BigNumberish,
      user: string,
      _type: BigNumberish,
      symbols: string,
      state: BigNumberish,
      direction: BigNumberish,
      openPrice18: BigNumberish,
      openTime: BigNumberish,
      closePrice18: BigNumberish,
      closeTime: BigNumberish,
      amt: BigNumberish,
      margin: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSigner(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    signer(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    usc(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    OrderIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PRECISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _isSolvent(
      _id: BigNumberish,
      _price18: BigNumberish,
      _margin: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    adjustPosition(
      _marketState: boolean,
      _id: BigNumberish,
      _timestamp: BigNumberish,
      _symbols: string,
      _price18: BigNumberish,
      _signature: BytesLike,
      _adjustMargin: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    closePosition(
      _marketState: boolean,
      _id: BigNumberish,
      _timestamp: BigNumberish,
      _symbols: string,
      _price18: BigNumberish,
      _signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    executor(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    feePercent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    forcedLiquidation(
      _marketState: boolean,
      _id: BigNumberish,
      _timestamp: BigNumberish,
      _symbols: string,
      _price18: BigNumberish,
      _signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    helperLogic(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _signer: string,
      _helperLogic: string,
      _usc: string,
      _oracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    liquidation(
      _marketState: boolean,
      _id: BigNumberish[],
      _timestamp: BigNumberish[],
      _symbols: string[],
      _price18: BigNumberish[],
      _signature: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    minVal(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    myCloseOrderIdList(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    myCloseOrderIdListLength(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    myCloseOrderIdList_index(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    myOpenOrderIdList(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    myOpenOrderIdListLength(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    myOpenOrderIdList_index(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    openOrderIdList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    openOrderIdListLength(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    openOrderIdList_index(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    openPosition(
      _marketState: boolean,
      _margin: BigNumberish,
      _timestamp: BigNumberish,
      _direction: BigNumberish,
      _type: BigNumberish,
      _symbols: string,
      _price18: BigNumberish,
      _amt: BigNumberish,
      _signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    oracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    orderInfo(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pagination(
      _user: string,
      _type: BigNumberish,
      _row: BigNumberish,
      _page: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setExecutor(
      _address: string,
      _type: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeePercent(
      _val: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOrderInfo(
      id: BigNumberish,
      user: string,
      _type: BigNumberish,
      symbols: string,
      state: BigNumberish,
      direction: BigNumberish,
      openPrice18: BigNumberish,
      openTime: BigNumberish,
      closePrice18: BigNumberish,
      closeTime: BigNumberish,
      amt: BigNumberish,
      margin: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSigner(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    signer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    usc(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
