/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface SEAPreSaleInterface extends ethers.utils.Interface {
  functions: {
    "DAOAddress()": FunctionFragment;
    "SET(address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "alphaSEA()": FunctionFragment;
    "boughtSEA(address)": FunctionFragment;
    "calculateSaleQuote(uint256)": FunctionFragment;
    "endTimestamp()": FunctionFragment;
    "initialize(address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "maxAmount()": FunctionFragment;
    "minAmount()": FunctionFragment;
    "owner()": FunctionFragment;
    "purchaseaSEA(uint256)": FunctionFragment;
    "remainingPurchasesMaxAmt()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "salePrice()": FunctionFragment;
    "saleStarted()": FunctionFragment;
    "sellAmount()": FunctionFragment;
    "setStart()": FunctionFragment;
    "startTimestamp()": FunctionFragment;
    "toTalAmount()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "usdc()": FunctionFragment;
    "whiteListBuyers(address[])": FunctionFragment;
    "whiteListed(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DAOAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SET",
    values: [
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "alphaSEA", values?: undefined): string;
  encodeFunctionData(functionFragment: "boughtSEA", values: [string]): string;
  encodeFunctionData(
    functionFragment: "calculateSaleQuote",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "endTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "maxAmount", values?: undefined): string;
  encodeFunctionData(functionFragment: "minAmount", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "purchaseaSEA",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "remainingPurchasesMaxAmt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "salePrice", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "saleStarted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sellAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setStart", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "startTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "toTalAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "usdc", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "whiteListBuyers",
    values: [string[]]
  ): string;
  encodeFunctionData(functionFragment: "whiteListed", values: [string]): string;

  decodeFunctionResult(functionFragment: "DAOAddress", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "SET", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "alphaSEA", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "boughtSEA", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateSaleQuote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "endTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maxAmount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "minAmount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "purchaseaSEA",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "remainingPurchasesMaxAmt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "salePrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "saleStarted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sellAmount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setStart", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "startTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toTalAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usdc", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "whiteListBuyers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whiteListed",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export class SEAPreSale extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: SEAPreSaleInterface;

  functions: {
    DAOAddress(overrides?: CallOverrides): Promise<[string]>;

    SET(
      _DAOAddress: string,
      _alphaSEA: string,
      _usdc: string,
      _minAmount: BigNumberish,
      _maxAmount: BigNumberish,
      _toTalAmount: BigNumberish,
      _salePrice: BigNumberish,
      _startTimestamp: BigNumberish,
      _endTimestamp: BigNumberish,
      _remainingPurchasesMaxAmt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    alphaSEA(overrides?: CallOverrides): Promise<[string]>;

    boughtSEA(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    calculateSaleQuote(
      paymentAmount_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    endTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      _DAOAddress: string,
      _alphaSEA: string,
      _usdc: string,
      _minAmount: BigNumberish,
      _maxAmount: BigNumberish,
      _toTalAmount: BigNumberish,
      _salePrice: BigNumberish,
      _startTimestamp: BigNumberish,
      _endTimestamp: BigNumberish,
      _remainingPurchasesMaxAmt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    maxAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    minAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    purchaseaSEA(
      _val: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    remainingPurchasesMaxAmt(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    salePrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    saleStarted(overrides?: CallOverrides): Promise<[boolean]>;

    sellAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    setStart(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    startTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    toTalAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    usdc(overrides?: CallOverrides): Promise<[string]>;

    whiteListBuyers(
      _buyers: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    whiteListed(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;
  };

  DAOAddress(overrides?: CallOverrides): Promise<string>;

  SET(
    _DAOAddress: string,
    _alphaSEA: string,
    _usdc: string,
    _minAmount: BigNumberish,
    _maxAmount: BigNumberish,
    _toTalAmount: BigNumberish,
    _salePrice: BigNumberish,
    _startTimestamp: BigNumberish,
    _endTimestamp: BigNumberish,
    _remainingPurchasesMaxAmt: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  alphaSEA(overrides?: CallOverrides): Promise<string>;

  boughtSEA(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  calculateSaleQuote(
    paymentAmount_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  endTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    _DAOAddress: string,
    _alphaSEA: string,
    _usdc: string,
    _minAmount: BigNumberish,
    _maxAmount: BigNumberish,
    _toTalAmount: BigNumberish,
    _salePrice: BigNumberish,
    _startTimestamp: BigNumberish,
    _endTimestamp: BigNumberish,
    _remainingPurchasesMaxAmt: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  maxAmount(overrides?: CallOverrides): Promise<BigNumber>;

  minAmount(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  purchaseaSEA(
    _val: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  remainingPurchasesMaxAmt(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  salePrice(overrides?: CallOverrides): Promise<BigNumber>;

  saleStarted(overrides?: CallOverrides): Promise<boolean>;

  sellAmount(overrides?: CallOverrides): Promise<BigNumber>;

  setStart(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  startTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  toTalAmount(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  usdc(overrides?: CallOverrides): Promise<string>;

  whiteListBuyers(
    _buyers: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  whiteListed(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    DAOAddress(overrides?: CallOverrides): Promise<string>;

    SET(
      _DAOAddress: string,
      _alphaSEA: string,
      _usdc: string,
      _minAmount: BigNumberish,
      _maxAmount: BigNumberish,
      _toTalAmount: BigNumberish,
      _salePrice: BigNumberish,
      _startTimestamp: BigNumberish,
      _endTimestamp: BigNumberish,
      _remainingPurchasesMaxAmt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    alphaSEA(overrides?: CallOverrides): Promise<string>;

    boughtSEA(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    calculateSaleQuote(
      paymentAmount_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    endTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _DAOAddress: string,
      _alphaSEA: string,
      _usdc: string,
      _minAmount: BigNumberish,
      _maxAmount: BigNumberish,
      _toTalAmount: BigNumberish,
      _salePrice: BigNumberish,
      _startTimestamp: BigNumberish,
      _endTimestamp: BigNumberish,
      _remainingPurchasesMaxAmt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    maxAmount(overrides?: CallOverrides): Promise<BigNumber>;

    minAmount(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    purchaseaSEA(
      _val: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    remainingPurchasesMaxAmt(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    salePrice(overrides?: CallOverrides): Promise<BigNumber>;

    saleStarted(overrides?: CallOverrides): Promise<boolean>;

    sellAmount(overrides?: CallOverrides): Promise<BigNumber>;

    setStart(overrides?: CallOverrides): Promise<boolean>;

    startTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    toTalAmount(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    usdc(overrides?: CallOverrides): Promise<string>;

    whiteListBuyers(
      _buyers: string[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    whiteListed(arg0: string, overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    DAOAddress(overrides?: CallOverrides): Promise<BigNumber>;

    SET(
      _DAOAddress: string,
      _alphaSEA: string,
      _usdc: string,
      _minAmount: BigNumberish,
      _maxAmount: BigNumberish,
      _toTalAmount: BigNumberish,
      _salePrice: BigNumberish,
      _startTimestamp: BigNumberish,
      _endTimestamp: BigNumberish,
      _remainingPurchasesMaxAmt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    alphaSEA(overrides?: CallOverrides): Promise<BigNumber>;

    boughtSEA(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    calculateSaleQuote(
      paymentAmount_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    endTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _DAOAddress: string,
      _alphaSEA: string,
      _usdc: string,
      _minAmount: BigNumberish,
      _maxAmount: BigNumberish,
      _toTalAmount: BigNumberish,
      _salePrice: BigNumberish,
      _startTimestamp: BigNumberish,
      _endTimestamp: BigNumberish,
      _remainingPurchasesMaxAmt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    maxAmount(overrides?: CallOverrides): Promise<BigNumber>;

    minAmount(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    purchaseaSEA(
      _val: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    remainingPurchasesMaxAmt(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    salePrice(overrides?: CallOverrides): Promise<BigNumber>;

    saleStarted(overrides?: CallOverrides): Promise<BigNumber>;

    sellAmount(overrides?: CallOverrides): Promise<BigNumber>;

    setStart(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    startTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    toTalAmount(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    usdc(overrides?: CallOverrides): Promise<BigNumber>;

    whiteListBuyers(
      _buyers: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    whiteListed(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DAOAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SET(
      _DAOAddress: string,
      _alphaSEA: string,
      _usdc: string,
      _minAmount: BigNumberish,
      _maxAmount: BigNumberish,
      _toTalAmount: BigNumberish,
      _salePrice: BigNumberish,
      _startTimestamp: BigNumberish,
      _endTimestamp: BigNumberish,
      _remainingPurchasesMaxAmt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    alphaSEA(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    boughtSEA(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateSaleQuote(
      paymentAmount_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    endTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _DAOAddress: string,
      _alphaSEA: string,
      _usdc: string,
      _minAmount: BigNumberish,
      _maxAmount: BigNumberish,
      _toTalAmount: BigNumberish,
      _salePrice: BigNumberish,
      _startTimestamp: BigNumberish,
      _endTimestamp: BigNumberish,
      _remainingPurchasesMaxAmt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    maxAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    purchaseaSEA(
      _val: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    remainingPurchasesMaxAmt(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    salePrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    saleStarted(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sellAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setStart(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    startTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    toTalAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    usdc(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    whiteListBuyers(
      _buyers: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    whiteListed(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
