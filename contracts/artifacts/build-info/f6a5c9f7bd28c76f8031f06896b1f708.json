{
	"id": "f6a5c9f7bd28c76f8031f06896b1f708",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.0",
	"solcLongVersion": "0.8.0+commit.c7dfd78e",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/oracle.sol": {
				"content": "// SPDX-License-Identifier: AGPL-3.0-only\n// Using the same Copyleft License as in the original Repository\npragma solidity 0.8.0;\npragma experimental ABIEncoderV2;\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\n\ncontract Oracle is Initializable, OwnableUpgradeable {\n    using SafeMath for uint256;\n    using ECDSA for bytes32;\n\n    address public signer;\n    uint256 public timeLimit;\n    //Executor\n    mapping(address => bool) public executor;\n\n    // constructor() {\n    //     __Ownable_init();\n    //     _setExecutor(msg.sender, true);\n    //     signer = msg.sender;\n    //     timeLimit = 60;\n    // }\n\n    function initialize(address _signer) external initializer {\n        __Ownable_init();\n        _setExecutor(_signer, true);\n        signer = _signer;\n        timeLimit = 60;\n    }\n\n    function setExecutor(address _address, bool _type)\n        external\n        onlyOwner\n        returns (bool)\n    {\n        return _setExecutor(_address, _type);\n    }\n\n    function _setExecutor(address _address, bool _type)\n        internal\n        returns (bool)\n    {\n        executor[_address] = _type;\n        return true;\n    }\n\n    modifier onlyExecutor() {\n        require(executor[msg.sender], \"executor: caller is not the executor\");\n        _;\n    }\n\n    function setTimeLimit(uint256 _val) external onlyOwner returns (bool) {\n        timeLimit = _val;\n        return true;\n    }\n\n    function setSigner(address _address) external onlyOwner returns (bool) {\n        signer = _address;\n        return true;\n    }\n\n    function getkey(\n        bool _marketState,\n        uint256 _price18,\n        uint256 _timestamp,\n        string memory _symbols,\n        bytes memory _signature\n    ) public view returns (bool) {\n        require(executor[msg.sender], \"executor err\");\n        require(block.timestamp - timeLimit < _timestamp, \"timestamp err\");\n        require(_marketState, \"Market not open\");\n        bytes32 hash = keccak256(\n            abi.encodePacked(_marketState, _price18, _timestamp, _symbols)\n        );\n        address _signer = ECDSA.recover(\n            ECDSA.toEthSignedMessageHash(hash),\n            _signature\n        );\n        return (signer == _signer);\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s;\n        uint8 v;\n        assembly {\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n            v := add(shr(255, vs), 27)\n        }\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (utils/cryptography/SignatureChecker.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ECDSA.sol\";\nimport \"../Address.sol\";\nimport \"../../interfaces/IERC1271.sol\";\n\n/**\n * @dev Signature verification helper: Provide a single mechanism to verify both private-key (EOA) ECDSA signature and\n * ERC1271 contract signatures. Using this instead of ECDSA.recover in your contract will make them compatible with\n * smart contract wallets such as Argent and Gnosis.\n *\n * Note: unlike ECDSA signatures, contract signature's are revocable, and the outcome of this function can thus change\n * through time. It could return true at block N and false at block N+1 (or the opposite).\n *\n * _Available since v4.1._\n */\nlibrary SignatureChecker {\n    function isValidSignatureNow(\n        address signer,\n        bytes32 hash,\n        bytes memory signature\n    ) internal view returns (bool) {\n        (address recovered, ECDSA.RecoverError error) = ECDSA.tryRecover(hash, signature);\n        if (error == ECDSA.RecoverError.NoError && recovered == signer) {\n            return true;\n        }\n\n        (bool success, bytes memory result) = signer.staticcall(\n            abi.encodeWithSelector(IERC1271.isValidSignature.selector, hash, signature)\n        );\n        return (success && result.length == 32 && abi.decode(result, (bytes4)) == IERC1271.isValidSignature.selector);\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/math/SafeMath.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal initializer {\n        __Context_init_unchained();\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal initializer {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n    uint256[49] private __gap;\n}\n"
			},
			"@openzeppelin/contracts/interfaces/IERC1271.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (interfaces/IERC1271.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC1271 standard signature validation method for\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\n *\n * _Available since v4.1._\n */\ninterface IERC1271 {\n    /**\n     * @dev Should return whether the signature provided is valid for the provided data\n     * @param hash      Hash of the data to be signed\n     * @param signature Signature byte array associated with _data\n     */\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\n}\n"
			},
			"@openzeppelin/contracts/utils/Address.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/Strings.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
			},
			"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.0;\n\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal initializer {\n        __Context_init_unchained();\n    }\n\n    function __Context_init_unchained() internal initializer {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n    uint256[50] private __gap;\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
				"OwnableUpgradeable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.",
						"kind": "dev",
						"methods": {
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":\"OwnableUpgradeable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"keccak256\":\"0xd0fc241d70f27a08c43c0c9e5a15d2661a643d8db46c219b2322bef8a34bbdd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://272fdc13ea6d62470f1009a1adf0d28b67be2c75415e9f24eee38164dd69fb04\",\"dweb:/ipfs/QmfZDcxQEFdAi1AwMTHozZJrwFoUCEZnbcJcRhqmahuTBR\"]},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x5f13da6a5f023d6e9b3e48a3690458bfceea5872c0e3ddf1b2b528133f87a992\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4f10cded435297e67d3720adb22790ee7f8ab7f5d977a815e87f33560800819c\",\"dweb:/ipfs/QmeMx1jpSb66jrT1P184kTuh8p9FSqbYUXoVbXNdnJPqkf\"]},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0x0c34de2f75ee9ab06bf9151824be575885d0a9b460c292476a260578fb5a4e1c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2125524ea896700181f25ee543d35a980b9477eaf13fd1878ae24be5dcc3ba75\",\"dweb:/ipfs/QmXw9DTW1t1UiTZanfESSJ6jm2xVSQpsdsdKnBTYeBnwqh\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 130,
								"contract": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
								"label": "_initialized",
								"offset": 0,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 133,
								"contract": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
								"label": "_initializing",
								"offset": 1,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 213,
								"contract": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
								"label": "__gap",
								"offset": 0,
								"slot": "1",
								"type": "t_array(t_uint256)50_storage"
							},
							{
								"astId": 10,
								"contract": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
								"label": "_owner",
								"offset": 0,
								"slot": "51",
								"type": "t_address"
							},
							{
								"astId": 124,
								"contract": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
								"label": "__gap",
								"offset": 0,
								"slot": "52",
								"type": "t_array(t_uint256)49_storage"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_array(t_uint256)49_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[49]",
								"numberOfBytes": "1568"
							},
							"t_array(t_uint256)50_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[50]",
								"numberOfBytes": "1600"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
				"Initializable": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"stateVariables": {
							"_initialized": {
								"details": "Indicates that the contract has been initialized."
							},
							"_initializing": {
								"details": "Indicates that the contract is in the process of being initialized."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"_initialized\":{\"details\":\"Indicates that the contract has been initialized.\"},\"_initializing\":{\"details\":\"Indicates that the contract is in the process of being initialized.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":\"Initializable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x5f13da6a5f023d6e9b3e48a3690458bfceea5872c0e3ddf1b2b528133f87a992\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4f10cded435297e67d3720adb22790ee7f8ab7f5d977a815e87f33560800819c\",\"dweb:/ipfs/QmeMx1jpSb66jrT1P184kTuh8p9FSqbYUXoVbXNdnJPqkf\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 130,
								"contract": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
								"label": "_initialized",
								"offset": 0,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 133,
								"contract": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
								"label": "_initializing",
								"offset": 1,
								"slot": "0",
								"type": "t_bool"
							}
						],
						"types": {
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
				"ContextUpgradeable": {
					"abi": [],
					"devdoc": {
						"details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":\"ContextUpgradeable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x5f13da6a5f023d6e9b3e48a3690458bfceea5872c0e3ddf1b2b528133f87a992\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4f10cded435297e67d3720adb22790ee7f8ab7f5d977a815e87f33560800819c\",\"dweb:/ipfs/QmeMx1jpSb66jrT1P184kTuh8p9FSqbYUXoVbXNdnJPqkf\"]},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0x0c34de2f75ee9ab06bf9151824be575885d0a9b460c292476a260578fb5a4e1c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2125524ea896700181f25ee543d35a980b9477eaf13fd1878ae24be5dcc3ba75\",\"dweb:/ipfs/QmXw9DTW1t1UiTZanfESSJ6jm2xVSQpsdsdKnBTYeBnwqh\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 130,
								"contract": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
								"label": "_initialized",
								"offset": 0,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 133,
								"contract": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
								"label": "_initializing",
								"offset": 1,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 213,
								"contract": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
								"label": "__gap",
								"offset": 0,
								"slot": "1",
								"type": "t_array(t_uint256)50_storage"
							}
						],
						"types": {
							"t_array(t_uint256)50_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[50]",
								"numberOfBytes": "1600"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/interfaces/IERC1271.sol": {
				"IERC1271": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "hash",
									"type": "bytes32"
								},
								{
									"internalType": "bytes",
									"name": "signature",
									"type": "bytes"
								}
							],
							"name": "isValidSignature",
							"outputs": [
								{
									"internalType": "bytes4",
									"name": "magicValue",
									"type": "bytes4"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC1271 standard signature validation method for contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271]. _Available since v4.1._",
						"kind": "dev",
						"methods": {
							"isValidSignature(bytes32,bytes)": {
								"details": "Should return whether the signature provided is valid for the provided data",
								"params": {
									"hash": "Hash of the data to be signed",
									"signature": "Signature byte array associated with _data"
								}
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"isValidSignature(bytes32,bytes)": "1626ba7e"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"isValidSignature\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"magicValue\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC1271 standard signature validation method for contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271]. _Available since v4.1._\",\"kind\":\"dev\",\"methods\":{\"isValidSignature(bytes32,bytes)\":{\"details\":\"Should return whether the signature provided is valid for the provided data\",\"params\":{\"hash\":\"Hash of the data to be signed\",\"signature\":\"Signature byte array associated with _data\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/IERC1271.sol\":\"IERC1271\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC1271.sol\":{\"keccak256\":\"0x8768dc46d6a5906d62270db7fd2152ce7bb48c353d4333e2ef0b3773fa540280\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a767312e79070e878c518473945246719c5df3d2f44b4b743b8f662193113f4b\",\"dweb:/ipfs/QmdJBCKefTSK6z2bP2dExNZpHt1T5hC1QefyprXg8aFEAk\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Address.sol": {
				"Address": {
					"abi": [],
					"devdoc": {
						"details": "Collection of functions related to the address type",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/Address.sol\":179:7908  library Address {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/Address.sol\":179:7908  library Address {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220ab3db770a5c3402e3f96933e4f6dee5894fb283b38433bd55fc595a9fb0c8c9664736f6c63430008000033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220ab3db770a5c3402e3f96933e4f6dee5894fb283b38433bd55fc595a9fb0c8c9664736f6c63430008000033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xAB RETURNDATASIZE 0xB7 PUSH17 0xA5C3402E3F96933E4F6DEE5894FB283B38 NUMBER EXTCODESIZE 0xD5 0x5F 0xC5 SWAP6 0xA9 0xFB 0xC DUP13 SWAP7 PUSH5 0x736F6C6343 STOP ADDMOD STOP STOP CALLER ",
							"sourceMap": "179:7729:4:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;179:7729:4;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220ab3db770a5c3402e3f96933e4f6dee5894fb283b38433bd55fc595a9fb0c8c9664736f6c63430008000033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xAB RETURNDATASIZE 0xB7 PUSH17 0xA5C3402E3F96933E4F6DEE5894FB283B38 NUMBER EXTCODESIZE 0xD5 0x5F 0xC5 SWAP6 0xA9 0xFB 0xC DUP13 SWAP7 PUSH5 0x736F6C6343 STOP ADDMOD STOP STOP CALLER ",
							"sourceMap": "179:7729:4:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"functionCall(address,bytes memory)": "infinite",
								"functionCall(address,bytes memory,string memory)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256,string memory)": "infinite",
								"functionDelegateCall(address,bytes memory)": "infinite",
								"functionDelegateCall(address,bytes memory,string memory)": "infinite",
								"functionStaticCall(address,bytes memory)": "infinite",
								"functionStaticCall(address,bytes memory,string memory)": "infinite",
								"isContract(address)": "infinite",
								"sendValue(address payable,uint256)": "infinite",
								"verifyCallResult(bool,bytes memory,string memory)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 179,
									"end": 7908,
									"name": "PUSH #[$]",
									"source": 4,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 179,
									"end": 7908,
									"name": "PUSH [$]",
									"source": 4,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 179,
									"end": 7908,
									"name": "PUSH",
									"source": 4,
									"value": "B"
								},
								{
									"begin": 179,
									"end": 7908,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 179,
									"end": 7908,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 179,
									"end": 7908,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 179,
									"end": 7908,
									"name": "CODECOPY",
									"source": 4
								},
								{
									"begin": 179,
									"end": 7908,
									"name": "DUP1",
									"source": 4
								},
								{
									"begin": 179,
									"end": 7908,
									"name": "MLOAD",
									"source": 4
								},
								{
									"begin": 179,
									"end": 7908,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 179,
									"end": 7908,
									"name": "BYTE",
									"source": 4
								},
								{
									"begin": 179,
									"end": 7908,
									"name": "PUSH",
									"source": 4,
									"value": "73"
								},
								{
									"begin": 179,
									"end": 7908,
									"name": "EQ",
									"source": 4
								},
								{
									"begin": 179,
									"end": 7908,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "1"
								},
								{
									"begin": 179,
									"end": 7908,
									"name": "JUMPI",
									"source": 4
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 179,
									"end": 7908,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 179,
									"end": 7908,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 179,
									"end": 7908,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 179,
									"end": 7908,
									"name": "PUSH",
									"source": 4,
									"value": "4"
								},
								{
									"begin": 179,
									"end": 7908,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 179,
									"end": 7908,
									"name": "PUSH",
									"source": 4,
									"value": "24"
								},
								{
									"begin": 179,
									"end": 7908,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 179,
									"end": 7908,
									"name": "REVERT",
									"source": 4
								},
								{
									"begin": 179,
									"end": 7908,
									"name": "tag",
									"source": 4,
									"value": "1"
								},
								{
									"begin": 179,
									"end": 7908,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": 179,
									"end": 7908,
									"name": "ADDRESS",
									"source": 4
								},
								{
									"begin": 179,
									"end": 7908,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 179,
									"end": 7908,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 179,
									"end": 7908,
									"name": "PUSH",
									"source": 4,
									"value": "73"
								},
								{
									"begin": 179,
									"end": 7908,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 179,
									"end": 7908,
									"name": "MSTORE8",
									"source": 4
								},
								{
									"begin": 179,
									"end": 7908,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 179,
									"end": 7908,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 179,
									"end": 7908,
									"name": "RETURN",
									"source": 4
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220ab3db770a5c3402e3f96933e4f6dee5894fb283b38433bd55fc595a9fb0c8c9664736f6c63430008000033",
									".code": [
										{
											"begin": 179,
											"end": 7908,
											"name": "PUSHDEPLOYADDRESS",
											"source": 4
										},
										{
											"begin": 179,
											"end": 7908,
											"name": "ADDRESS",
											"source": 4
										},
										{
											"begin": 179,
											"end": 7908,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 179,
											"end": 7908,
											"name": "PUSH",
											"source": 4,
											"value": "80"
										},
										{
											"begin": 179,
											"end": 7908,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 179,
											"end": 7908,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 179,
											"end": 7908,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 179,
											"end": 7908,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 179,
											"end": 7908,
											"name": "REVERT",
											"source": 4
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0x9944d1038f27dcebff810d7ba16b3b8058b967173d76874fb72dd7cd84129656\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7c455cda07c5f8978c57e545ddde382552d3a55b6e3682e0f809ed07ec7defbe\",\"dweb:/ipfs/QmXkoKbxyMcMzjYdkXi5t4t3ZjBQ81pj7AaanS9jhePxyt\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Strings.sol": {
				"Strings": {
					"abi": [],
					"devdoc": {
						"details": "String operations.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/Strings.sol\":146:2031  library Strings {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":146:2031  library Strings {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220ffbd9855e63780701bccc1d5beae652872c6a75860e2e4cb6ac5f00557bc844d64736f6c63430008000033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220ffbd9855e63780701bccc1d5beae652872c6a75860e2e4cb6ac5f00557bc844d64736f6c63430008000033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SELFDESTRUCT 0xBD SWAP9 SSTORE 0xE6 CALLDATACOPY DUP1 PUSH17 0x1BCCC1D5BEAE652872C6A75860E2E4CB6A 0xC5 CREATE SDIV JUMPI 0xBC DUP5 0x4D PUSH5 0x736F6C6343 STOP ADDMOD STOP STOP CALLER ",
							"sourceMap": "146:1885:5:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;146:1885:5;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220ffbd9855e63780701bccc1d5beae652872c6a75860e2e4cb6ac5f00557bc844d64736f6c63430008000033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SELFDESTRUCT 0xBD SWAP9 SSTORE 0xE6 CALLDATACOPY DUP1 PUSH17 0x1BCCC1D5BEAE652872C6A75860E2E4CB6A 0xC5 CREATE SDIV JUMPI 0xBC DUP5 0x4D PUSH5 0x736F6C6343 STOP ADDMOD STOP STOP CALLER ",
							"sourceMap": "146:1885:5:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"toHexString(uint256)": "infinite",
								"toHexString(uint256,uint256)": "infinite",
								"toString(uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH #[$]",
									"source": 5,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH [$]",
									"source": 5,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH",
									"source": 5,
									"value": "B"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "CODECOPY",
									"source": 5
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "MLOAD",
									"source": 5
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "BYTE",
									"source": 5
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH",
									"source": 5,
									"value": "73"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "EQ",
									"source": 5
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "1"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "JUMPI",
									"source": 5
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH",
									"source": 5,
									"value": "4"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH",
									"source": 5,
									"value": "24"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "REVERT",
									"source": 5
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "tag",
									"source": 5,
									"value": "1"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "ADDRESS",
									"source": 5
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH",
									"source": 5,
									"value": "73"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "MSTORE8",
									"source": 5
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "RETURN",
									"source": 5
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220ffbd9855e63780701bccc1d5beae652872c6a75860e2e4cb6ac5f00557bc844d64736f6c63430008000033",
									".code": [
										{
											"begin": 146,
											"end": 2031,
											"name": "PUSHDEPLOYADDRESS",
											"source": 5
										},
										{
											"begin": 146,
											"end": 2031,
											"name": "ADDRESS",
											"source": 5
										},
										{
											"begin": 146,
											"end": 2031,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 146,
											"end": 2031,
											"name": "PUSH",
											"source": 5,
											"value": "80"
										},
										{
											"begin": 146,
											"end": 2031,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 146,
											"end": 2031,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 146,
											"end": 2031,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 146,
											"end": 2031,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 146,
											"end": 2031,
											"name": "REVERT",
											"source": 5
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"String operations.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Strings.sol\":\"Strings\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"keccak256\":\"0x5fa25f305839292fab713256214f2868e0257d29826b14282bbd7f1e34f5af38\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b3de4074848249e00e1336db857e3fa8f78b4fe11d4a887f71050c22023b2132\",\"dweb:/ipfs/QmbL6k2zFGndQPNPG7vCDivtjKam3quJSrEbRuVsNo4hBw\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
				"ECDSA": {
					"abi": [],
					"devdoc": {
						"details": "Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":354:9321  library ECDSA {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":354:9321  library ECDSA {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa264697066735822122077f5565664136987fe7d971b316dbf32c8c281df8ac9e9ebcdf9ca232f79695864736f6c63430008000033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122077f5565664136987fe7d971b316dbf32c8c281df8ac9e9ebcdf9ca232f79695864736f6c63430008000033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH24 0xF5565664136987FE7D971B316DBF32C8C281DF8AC9E9EBCD 0xF9 0xCA 0x23 0x2F PUSH26 0x695864736F6C6343000800003300000000000000000000000000 ",
							"sourceMap": "354:8967:6:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;354:8967:6;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122077f5565664136987fe7d971b316dbf32c8c281df8ac9e9ebcdf9ca232f79695864736f6c63430008000033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH24 0xF5565664136987FE7D971B316DBF32C8C281DF8AC9E9EBCD 0xF9 0xCA 0x23 0x2F PUSH26 0x695864736F6C6343000800003300000000000000000000000000 ",
							"sourceMap": "354:8967:6:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"_throwError(enum ECDSA.RecoverError)": "infinite",
								"recover(bytes32,bytes memory)": "infinite",
								"recover(bytes32,bytes32,bytes32)": "infinite",
								"recover(bytes32,uint8,bytes32,bytes32)": "infinite",
								"toEthSignedMessageHash(bytes memory)": "infinite",
								"toEthSignedMessageHash(bytes32)": "infinite",
								"toTypedDataHash(bytes32,bytes32)": "infinite",
								"tryRecover(bytes32,bytes memory)": "infinite",
								"tryRecover(bytes32,bytes32,bytes32)": "infinite",
								"tryRecover(bytes32,uint8,bytes32,bytes32)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 354,
									"end": 9321,
									"name": "PUSH #[$]",
									"source": 6,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 354,
									"end": 9321,
									"name": "PUSH [$]",
									"source": 6,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 354,
									"end": 9321,
									"name": "PUSH",
									"source": 6,
									"value": "B"
								},
								{
									"begin": 354,
									"end": 9321,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 354,
									"end": 9321,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 354,
									"end": 9321,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 354,
									"end": 9321,
									"name": "CODECOPY",
									"source": 6
								},
								{
									"begin": 354,
									"end": 9321,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 354,
									"end": 9321,
									"name": "MLOAD",
									"source": 6
								},
								{
									"begin": 354,
									"end": 9321,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 354,
									"end": 9321,
									"name": "BYTE",
									"source": 6
								},
								{
									"begin": 354,
									"end": 9321,
									"name": "PUSH",
									"source": 6,
									"value": "73"
								},
								{
									"begin": 354,
									"end": 9321,
									"name": "EQ",
									"source": 6
								},
								{
									"begin": 354,
									"end": 9321,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 354,
									"end": 9321,
									"name": "JUMPI",
									"source": 6
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 354,
									"end": 9321,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 354,
									"end": 9321,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 354,
									"end": 9321,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 354,
									"end": 9321,
									"name": "PUSH",
									"source": 6,
									"value": "4"
								},
								{
									"begin": 354,
									"end": 9321,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 354,
									"end": 9321,
									"name": "PUSH",
									"source": 6,
									"value": "24"
								},
								{
									"begin": 354,
									"end": 9321,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 354,
									"end": 9321,
									"name": "REVERT",
									"source": 6
								},
								{
									"begin": 354,
									"end": 9321,
									"name": "tag",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 354,
									"end": 9321,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 354,
									"end": 9321,
									"name": "ADDRESS",
									"source": 6
								},
								{
									"begin": 354,
									"end": 9321,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 354,
									"end": 9321,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 354,
									"end": 9321,
									"name": "PUSH",
									"source": 6,
									"value": "73"
								},
								{
									"begin": 354,
									"end": 9321,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 354,
									"end": 9321,
									"name": "MSTORE8",
									"source": 6
								},
								{
									"begin": 354,
									"end": 9321,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 354,
									"end": 9321,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 354,
									"end": 9321,
									"name": "RETURN",
									"source": 6
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122077f5565664136987fe7d971b316dbf32c8c281df8ac9e9ebcdf9ca232f79695864736f6c63430008000033",
									".code": [
										{
											"begin": 354,
											"end": 9321,
											"name": "PUSHDEPLOYADDRESS",
											"source": 6
										},
										{
											"begin": 354,
											"end": 9321,
											"name": "ADDRESS",
											"source": 6
										},
										{
											"begin": 354,
											"end": 9321,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 354,
											"end": 9321,
											"name": "PUSH",
											"source": 6,
											"value": "80"
										},
										{
											"begin": 354,
											"end": 9321,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 354,
											"end": 9321,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 354,
											"end": 9321,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 354,
											"end": 9321,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 354,
											"end": 9321,
											"name": "REVERT",
											"source": 6
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":\"ECDSA\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"keccak256\":\"0x5fa25f305839292fab713256214f2868e0257d29826b14282bbd7f1e34f5af38\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b3de4074848249e00e1336db857e3fa8f78b4fe11d4a887f71050c22023b2132\",\"dweb:/ipfs/QmbL6k2zFGndQPNPG7vCDivtjKam3quJSrEbRuVsNo4hBw\"]},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"keccak256\":\"0x594efd2fa154f4fbe0fa92c2356cb2a9531ef3902e35784c2bc69764d0d8886a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3784afd8f0de286adaae0c14eadb0d133a7be09f462b329f5d46b32de6f4b39c\",\"dweb:/ipfs/QmSane9wkMKGUig2S8TYRYiK2fKEXNDj9vXeFGFYfjnUYh\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol": {
				"SignatureChecker": {
					"abi": [],
					"devdoc": {
						"details": "Signature verification helper: Provide a single mechanism to verify both private-key (EOA) ECDSA signature and ERC1271 contract signatures. Using this instead of ECDSA.recover in your contract will make them compatible with smart contract wallets such as Argent and Gnosis. Note: unlike ECDSA signatures, contract signature's are revocable, and the outcome of this function can thus change through time. It could return true at block N and false at block N+1 (or the opposite). _Available since v4.1._",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\":760:1426  library SignatureChecker {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\":760:1426  library SignatureChecker {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220007be419b7b25b1b280f847c1a079c74c1d37086e04deea493b0ebfbb34a775364736f6c63430008000033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220007be419b7b25b1b280f847c1a079c74c1d37086e04deea493b0ebfbb34a775364736f6c63430008000033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 STOP PUSH28 0xE419B7B25B1B280F847C1A079C74C1D37086E04DEEA493B0EBFBB34A PUSH24 0x5364736F6C63430008000033000000000000000000000000 ",
							"sourceMap": "760:666:7:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;760:666:7;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220007be419b7b25b1b280f847c1a079c74c1d37086e04deea493b0ebfbb34a775364736f6c63430008000033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 STOP PUSH28 0xE419B7B25B1B280F847C1A079C74C1D37086E04DEEA493B0EBFBB34A PUSH24 0x5364736F6C63430008000033000000000000000000000000 ",
							"sourceMap": "760:666:7:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"isValidSignatureNow(address,bytes32,bytes memory)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 760,
									"end": 1426,
									"name": "PUSH #[$]",
									"source": 7,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 760,
									"end": 1426,
									"name": "PUSH [$]",
									"source": 7,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 760,
									"end": 1426,
									"name": "PUSH",
									"source": 7,
									"value": "B"
								},
								{
									"begin": 760,
									"end": 1426,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 760,
									"end": 1426,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 760,
									"end": 1426,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 760,
									"end": 1426,
									"name": "CODECOPY",
									"source": 7
								},
								{
									"begin": 760,
									"end": 1426,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 760,
									"end": 1426,
									"name": "MLOAD",
									"source": 7
								},
								{
									"begin": 760,
									"end": 1426,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 760,
									"end": 1426,
									"name": "BYTE",
									"source": 7
								},
								{
									"begin": 760,
									"end": 1426,
									"name": "PUSH",
									"source": 7,
									"value": "73"
								},
								{
									"begin": 760,
									"end": 1426,
									"name": "EQ",
									"source": 7
								},
								{
									"begin": 760,
									"end": 1426,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "1"
								},
								{
									"begin": 760,
									"end": 1426,
									"name": "JUMPI",
									"source": 7
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 760,
									"end": 1426,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 760,
									"end": 1426,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 760,
									"end": 1426,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 760,
									"end": 1426,
									"name": "PUSH",
									"source": 7,
									"value": "4"
								},
								{
									"begin": 760,
									"end": 1426,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 760,
									"end": 1426,
									"name": "PUSH",
									"source": 7,
									"value": "24"
								},
								{
									"begin": 760,
									"end": 1426,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 760,
									"end": 1426,
									"name": "REVERT",
									"source": 7
								},
								{
									"begin": 760,
									"end": 1426,
									"name": "tag",
									"source": 7,
									"value": "1"
								},
								{
									"begin": 760,
									"end": 1426,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 760,
									"end": 1426,
									"name": "ADDRESS",
									"source": 7
								},
								{
									"begin": 760,
									"end": 1426,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 760,
									"end": 1426,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 760,
									"end": 1426,
									"name": "PUSH",
									"source": 7,
									"value": "73"
								},
								{
									"begin": 760,
									"end": 1426,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 760,
									"end": 1426,
									"name": "MSTORE8",
									"source": 7
								},
								{
									"begin": 760,
									"end": 1426,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 760,
									"end": 1426,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 760,
									"end": 1426,
									"name": "RETURN",
									"source": 7
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220007be419b7b25b1b280f847c1a079c74c1d37086e04deea493b0ebfbb34a775364736f6c63430008000033",
									".code": [
										{
											"begin": 760,
											"end": 1426,
											"name": "PUSHDEPLOYADDRESS",
											"source": 7
										},
										{
											"begin": 760,
											"end": 1426,
											"name": "ADDRESS",
											"source": 7
										},
										{
											"begin": 760,
											"end": 1426,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 760,
											"end": 1426,
											"name": "PUSH",
											"source": 7,
											"value": "80"
										},
										{
											"begin": 760,
											"end": 1426,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 760,
											"end": 1426,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 760,
											"end": 1426,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 760,
											"end": 1426,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 760,
											"end": 1426,
											"name": "REVERT",
											"source": 7
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Signature verification helper: Provide a single mechanism to verify both private-key (EOA) ECDSA signature and ERC1271 contract signatures. Using this instead of ECDSA.recover in your contract will make them compatible with smart contract wallets such as Argent and Gnosis. Note: unlike ECDSA signatures, contract signature's are revocable, and the outcome of this function can thus change through time. It could return true at block N and false at block N+1 (or the opposite). _Available since v4.1._\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\":\"SignatureChecker\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC1271.sol\":{\"keccak256\":\"0x8768dc46d6a5906d62270db7fd2152ce7bb48c353d4333e2ef0b3773fa540280\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a767312e79070e878c518473945246719c5df3d2f44b4b743b8f662193113f4b\",\"dweb:/ipfs/QmdJBCKefTSK6z2bP2dExNZpHt1T5hC1QefyprXg8aFEAk\"]},\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0x9944d1038f27dcebff810d7ba16b3b8058b967173d76874fb72dd7cd84129656\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7c455cda07c5f8978c57e545ddde382552d3a55b6e3682e0f809ed07ec7defbe\",\"dweb:/ipfs/QmXkoKbxyMcMzjYdkXi5t4t3ZjBQ81pj7AaanS9jhePxyt\"]},\"@openzeppelin/contracts/utils/Strings.sol\":{\"keccak256\":\"0x5fa25f305839292fab713256214f2868e0257d29826b14282bbd7f1e34f5af38\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b3de4074848249e00e1336db857e3fa8f78b4fe11d4a887f71050c22023b2132\",\"dweb:/ipfs/QmbL6k2zFGndQPNPG7vCDivtjKam3quJSrEbRuVsNo4hBw\"]},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"keccak256\":\"0x594efd2fa154f4fbe0fa92c2356cb2a9531ef3902e35784c2bc69764d0d8886a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3784afd8f0de286adaae0c14eadb0d133a7be09f462b329f5d46b32de6f4b39c\",\"dweb:/ipfs/QmSane9wkMKGUig2S8TYRYiK2fKEXNDj9vXeFGFYfjnUYh\"]},\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\":{\"keccak256\":\"0xece6ddc1baedb5f0bb00f53c210b3944899810bfbedb910a0850b01309f545f2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ba25b7adbebc5084210a000e46583aa1c2fb6bbaa6ee5869cc32322de4c02e3f\",\"dweb:/ipfs/QmSBaEoPnEqKgcYukMuBwiPH9bkvAA5oH2dc5NYWU6T6As\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/math/SafeMath.sol": {
				"SafeMath": {
					"abi": [],
					"devdoc": {
						"details": "Wrappers over Solidity's arithmetic operations. NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler now has built in overflow checking.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":467:6768  library SafeMath {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":467:6768  library SafeMath {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220d108eea9296b6e6ade7552e86c8276b7b31e101be48a5fec73d74e0a1f9e1ff164736f6c63430008000033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220d108eea9296b6e6ade7552e86c8276b7b31e101be48a5fec73d74e0a1f9e1ff164736f6c63430008000033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD1 ADDMOD 0xEE 0xA9 0x29 PUSH12 0x6E6ADE7552E86C8276B7B31E LT SHL 0xE4 DUP11 0x5F 0xEC PUSH20 0xD74E0A1F9E1FF164736F6C634300080000330000 ",
							"sourceMap": "467:6301:8:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;467:6301:8;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220d108eea9296b6e6ade7552e86c8276b7b31e101be48a5fec73d74e0a1f9e1ff164736f6c63430008000033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD1 ADDMOD 0xEE 0xA9 0x29 PUSH12 0x6E6ADE7552E86C8276B7B31E LT SHL 0xE4 DUP11 0x5F 0xEC PUSH20 0xD74E0A1F9E1FF164736F6C634300080000330000 ",
							"sourceMap": "467:6301:8:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"add(uint256,uint256)": "infinite",
								"div(uint256,uint256)": "infinite",
								"div(uint256,uint256,string memory)": "infinite",
								"mod(uint256,uint256)": "infinite",
								"mod(uint256,uint256,string memory)": "infinite",
								"mul(uint256,uint256)": "infinite",
								"sub(uint256,uint256)": "infinite",
								"sub(uint256,uint256,string memory)": "infinite",
								"tryAdd(uint256,uint256)": "infinite",
								"tryDiv(uint256,uint256)": "infinite",
								"tryMod(uint256,uint256)": "infinite",
								"tryMul(uint256,uint256)": "infinite",
								"trySub(uint256,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 467,
									"end": 6768,
									"name": "PUSH #[$]",
									"source": 8,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "PUSH [$]",
									"source": 8,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "PUSH",
									"source": 8,
									"value": "B"
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "CODECOPY",
									"source": 8
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "MLOAD",
									"source": 8
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "BYTE",
									"source": 8
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "PUSH",
									"source": 8,
									"value": "73"
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "EQ",
									"source": 8
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "1"
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "JUMPI",
									"source": 8
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "PUSH",
									"source": 8,
									"value": "4"
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "PUSH",
									"source": 8,
									"value": "24"
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "REVERT",
									"source": 8
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "tag",
									"source": 8,
									"value": "1"
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "ADDRESS",
									"source": 8
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "PUSH",
									"source": 8,
									"value": "73"
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "MSTORE8",
									"source": 8
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "RETURN",
									"source": 8
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220d108eea9296b6e6ade7552e86c8276b7b31e101be48a5fec73d74e0a1f9e1ff164736f6c63430008000033",
									".code": [
										{
											"begin": 467,
											"end": 6768,
											"name": "PUSHDEPLOYADDRESS",
											"source": 8
										},
										{
											"begin": 467,
											"end": 6768,
											"name": "ADDRESS",
											"source": 8
										},
										{
											"begin": 467,
											"end": 6768,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 467,
											"end": 6768,
											"name": "PUSH",
											"source": 8,
											"value": "80"
										},
										{
											"begin": 467,
											"end": 6768,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 467,
											"end": 6768,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 467,
											"end": 6768,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 467,
											"end": 6768,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 467,
											"end": 6768,
											"name": "REVERT",
											"source": 8
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers over Solidity's arithmetic operations. NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler now has built in overflow checking.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/SafeMath.sol\":\"SafeMath\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"keccak256\":\"0x29c462775f5b4c76dce400f120f3530aa3f81da42c839f975dc2b64784d22434\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://063db5d664d3d5bae10d0056c9d00339265229532d06b53d5f2e91778b2e428d\",\"dweb:/ipfs/QmWM92rU59t6BcZSj4w6ikoPL32R9hyTMb9Msg5X8vvu1s\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/oracle.sol": {
				"Oracle": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"name": "executor",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bool",
									"name": "_marketState",
									"type": "bool"
								},
								{
									"internalType": "uint256",
									"name": "_price18",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "_timestamp",
									"type": "uint256"
								},
								{
									"internalType": "string",
									"name": "_symbols",
									"type": "string"
								},
								{
									"internalType": "bytes",
									"name": "_signature",
									"type": "bytes"
								}
							],
							"name": "getkey",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_signer",
									"type": "address"
								}
							],
							"name": "initialize",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_address",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "_type",
									"type": "bool"
								}
							],
							"name": "setExecutor",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_address",
									"type": "address"
								}
							],
							"name": "setSigner",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_val",
									"type": "uint256"
								}
							],
							"name": "setTimeLimit",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "signer",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "timeLimit",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/oracle.sol\":436:2415  contract Oracle is Initializable, OwnableUpgradeable {... */\n  mstore(0x40, 0x80)\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/oracle.sol\":436:2415  contract Oracle is Initializable, OwnableUpgradeable {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x715018a6\n      gt\n      tag_14\n      jumpi\n      dup1\n      0x715018a6\n      eq\n      tag_8\n      jumpi\n      dup1\n      0x8da5cb5b\n      eq\n      tag_9\n      jumpi\n      dup1\n      0xc08d1fe5\n      eq\n      tag_10\n      jumpi\n      dup1\n      0xc4d66de8\n      eq\n      tag_11\n      jumpi\n      dup1\n      0xe2889c82\n      eq\n      tag_12\n      jumpi\n      dup1\n      0xf2fde38b\n      eq\n      tag_13\n      jumpi\n      jump(tag_2)\n    tag_14:\n      dup1\n      0x1e1bff3f\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x238ac933\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x239b93b2\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x48c7e528\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x6c19e783\n      eq\n      tag_7\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"contracts/oracle.sol\":1024:1190  function setExecutor(address _address, bool _type)... */\n    tag_3:\n      tag_15\n      tag_16\n      calldatasize\n      0x04\n      tag_17\n      jump\t// in\n    tag_16:\n      tag_18\n      jump\t// in\n    tag_15:\n      mload(0x40)\n      tag_19\n      swap2\n      swap1\n      tag_20\n      jump\t// in\n    tag_19:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/oracle.sol\":557:578  address public signer */\n    tag_4:\n      tag_21\n      tag_22\n      jump\t// in\n    tag_21:\n      mload(0x40)\n      tag_19\n      swap2\n      swap1\n      tag_24\n      jump\t// in\n        /* \"contracts/oracle.sol\":1751:2413  function getkey(... */\n    tag_5:\n      tag_15\n      tag_26\n      calldatasize\n      0x04\n      tag_27\n      jump\t// in\n    tag_26:\n      tag_28\n      jump\t// in\n        /* \"contracts/oracle.sol\":629:669  mapping(address => bool) public executor */\n    tag_6:\n      tag_15\n      tag_31\n      calldatasize\n      0x04\n      tag_32\n      jump\t// in\n    tag_31:\n      tag_33\n      jump\t// in\n        /* \"contracts/oracle.sol\":1619:1745  function setSigner(address _address) external onlyOwner returns (bool) {... */\n    tag_7:\n      tag_15\n      tag_36\n      calldatasize\n      0x04\n      tag_32\n      jump\t// in\n    tag_36:\n      tag_37\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1934:2035  function renounceOwnership() public virtual onlyOwner {... */\n    tag_8:\n      tag_39\n      tag_40\n      jump\t// in\n    tag_39:\n      stop\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1302:1387  function owner() public view virtual returns (address) {... */\n    tag_9:\n      tag_21\n      tag_42\n      jump\t// in\n        /* \"contracts/oracle.sol\":584:608  uint256 public timeLimit */\n    tag_10:\n      tag_44\n      tag_45\n      jump\t// in\n    tag_44:\n      mload(0x40)\n      tag_19\n      swap2\n      swap1\n      tag_47\n      jump\t// in\n        /* \"contracts/oracle.sol\":840:1018  function initialize(address _signer) external initializer {... */\n    tag_11:\n      tag_39\n      tag_49\n      calldatasize\n      0x04\n      tag_32\n      jump\t// in\n    tag_49:\n      tag_50\n      jump\t// in\n        /* \"contracts/oracle.sol\":1489:1613  function setTimeLimit(uint256 _val) external onlyOwner returns (bool) {... */\n    tag_12:\n      tag_15\n      tag_52\n      calldatasize\n      0x04\n      tag_53\n      jump\t// in\n    tag_52:\n      tag_54\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2184:2382  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_13:\n      tag_39\n      tag_57\n      calldatasize\n      0x04\n      tag_32\n      jump\t// in\n    tag_57:\n      tag_58\n      jump\t// in\n        /* \"contracts/oracle.sol\":1024:1190  function setExecutor(address _address, bool _type)... */\n    tag_18:\n        /* \"contracts/oracle.sol\":1127:1131  bool */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1525:1537  _msgSender() */\n      tag_60\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1525:1535  _msgSender */\n      tag_61\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1525:1537  _msgSender() */\n      jump\t// in\n    tag_60:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1514:1537  owner() == _msgSender() */\n      and\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1514:1521  owner() */\n      tag_62\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1514:1519  owner */\n      tag_42\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1514:1521  owner() */\n      jump\t// in\n    tag_62:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1514:1537  owner() == _msgSender() */\n      and\n      eq\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1506:1574  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_63\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_64\n      swap1\n      tag_65\n      jump\t// in\n    tag_64:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_63:\n        /* \"contracts/oracle.sol\":1154:1183  _setExecutor(_address, _type) */\n      tag_67\n        /* \"contracts/oracle.sol\":1167:1175  _address */\n      dup4\n        /* \"contracts/oracle.sol\":1177:1182  _type */\n      dup4\n        /* \"contracts/oracle.sol\":1154:1166  _setExecutor */\n      tag_68\n        /* \"contracts/oracle.sol\":1154:1183  _setExecutor(_address, _type) */\n      jump\t// in\n    tag_67:\n        /* \"contracts/oracle.sol\":1147:1183  return _setExecutor(_address, _type) */\n      swap4\n        /* \"contracts/oracle.sol\":1024:1190  function setExecutor(address _address, bool _type)... */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/oracle.sol\":557:578  address public signer */\n    tag_22:\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x65))\n      dup2\n      jump\t// out\n        /* \"contracts/oracle.sol\":1751:2413  function getkey(... */\n    tag_28:\n        /* \"contracts/oracle.sol\":1973:1983  msg.sender */\n      caller\n        /* \"contracts/oracle.sol\":1940:1944  bool */\n      0x00\n        /* \"contracts/oracle.sol\":1964:1984  executor[msg.sender] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/oracle.sol\":1964:1972  executor */\n      0x67\n        /* \"contracts/oracle.sol\":1964:1984  executor[msg.sender] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n      sload\n      0xff\n      and\n        /* \"contracts/oracle.sol\":1956:2001  require(executor[msg.sender], \"executor err\") */\n      tag_70\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_64\n      swap1\n      tag_72\n      jump\t// in\n    tag_70:\n        /* \"contracts/oracle.sol\":2049:2059  _timestamp */\n      dup4\n        /* \"contracts/oracle.sol\":2037:2046  timeLimit */\n      sload(0x66)\n        /* \"contracts/oracle.sol\":2019:2034  block.timestamp */\n      timestamp\n        /* \"contracts/oracle.sol\":2019:2046  block.timestamp - timeLimit */\n      tag_73\n      swap2\n      swap1\n      tag_74\n      jump\t// in\n    tag_73:\n        /* \"contracts/oracle.sol\":2019:2059  block.timestamp - timeLimit < _timestamp */\n      lt\n        /* \"contracts/oracle.sol\":2011:2077  require(block.timestamp - timeLimit < _timestamp, \"timestamp err\") */\n      tag_75\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_64\n      swap1\n      tag_77\n      jump\t// in\n    tag_75:\n        /* \"contracts/oracle.sol\":2095:2107  _marketState */\n      dup6\n        /* \"contracts/oracle.sol\":2087:2127  require(_marketState, \"Market not open\") */\n      tag_78\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_64\n      swap1\n      tag_80\n      jump\t// in\n    tag_78:\n        /* \"contracts/oracle.sol\":2137:2149  bytes32 hash */\n      0x00\n        /* \"contracts/oracle.sol\":2192:2204  _marketState */\n      dup7\n        /* \"contracts/oracle.sol\":2206:2214  _price18 */\n      dup7\n        /* \"contracts/oracle.sol\":2216:2226  _timestamp */\n      dup7\n        /* \"contracts/oracle.sol\":2228:2236  _symbols */\n      dup7\n        /* \"contracts/oracle.sol\":2175:2237  abi.encodePacked(_marketState, _price18, _timestamp, _symbols) */\n      add(0x20, mload(0x40))\n      tag_81\n      swap5\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_82\n      jump\t// in\n    tag_81:\n      mload(0x40)\n      0x20\n      dup2\n      dup4\n      sub\n      sub\n      dup2\n      mstore\n      swap1\n      0x40\n      mstore\n        /* \"contracts/oracle.sol\":2152:2247  keccak256(... */\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      keccak256\n        /* \"contracts/oracle.sol\":2137:2247  bytes32 hash = keccak256(... */\n      swap1\n      pop\n        /* \"contracts/oracle.sol\":2257:2272  address _signer */\n      0x00\n        /* \"contracts/oracle.sol\":2275:2370  ECDSA.recover(... */\n      tag_83\n        /* \"contracts/oracle.sol\":2302:2336  ECDSA.toEthSignedMessageHash(hash) */\n      tag_84\n        /* \"contracts/oracle.sol\":2331:2335  hash */\n      dup4\n        /* \"contracts/oracle.sol\":2302:2330  ECDSA.toEthSignedMessageHash */\n      tag_85\n        /* \"contracts/oracle.sol\":2302:2336  ECDSA.toEthSignedMessageHash(hash) */\n      jump\t// in\n    tag_84:\n        /* \"contracts/oracle.sol\":2350:2360  _signature */\n      dup6\n        /* \"contracts/oracle.sol\":2275:2288  ECDSA.recover */\n      tag_86\n        /* \"contracts/oracle.sol\":2275:2370  ECDSA.recover(... */\n      jump\t// in\n    tag_83:\n        /* \"contracts/oracle.sol\":2388:2394  signer */\n      sload(0x65)\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/oracle.sol\":2388:2405  signer == _signer */\n      swap2\n      dup3\n      and\n        /* \"contracts/oracle.sol\":2388:2394  signer */\n      swap2\n      and\n        /* \"contracts/oracle.sol\":2388:2405  signer == _signer */\n      eq\n      swap9\n        /* \"contracts/oracle.sol\":1751:2413  function getkey(... */\n      swap8\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/oracle.sol\":629:669  mapping(address => bool) public executor */\n    tag_33:\n      mstore(0x20, 0x67)\n      0x00\n      swap1\n      dup2\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      0xff\n      and\n      dup2\n      jump\t// out\n        /* \"contracts/oracle.sol\":1619:1745  function setSigner(address _address) external onlyOwner returns (bool) {... */\n    tag_37:\n        /* \"contracts/oracle.sol\":1684:1688  bool */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1525:1537  _msgSender() */\n      tag_88\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1525:1535  _msgSender */\n      tag_61\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1525:1537  _msgSender() */\n      jump\t// in\n    tag_88:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1514:1537  owner() == _msgSender() */\n      and\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1514:1521  owner() */\n      tag_89\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1514:1519  owner */\n      tag_42\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1514:1521  owner() */\n      jump\t// in\n    tag_89:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1514:1537  owner() == _msgSender() */\n      and\n      eq\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1506:1574  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_90\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_64\n      swap1\n      tag_65\n      jump\t// in\n    tag_90:\n      pop\n        /* \"contracts/oracle.sol\":1700:1706  signer */\n      0x65\n        /* \"contracts/oracle.sol\":1700:1717  signer = _address */\n      dup1\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n      dup4\n      and\n      or\n      swap1\n      sstore\n      0x01\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1584:1585  _ */\n    tag_92:\n        /* \"contracts/oracle.sol\":1619:1745  function setSigner(address _address) external onlyOwner returns (bool) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1934:2035  function renounceOwnership() public virtual onlyOwner {... */\n    tag_40:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1525:1537  _msgSender() */\n      tag_94\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1525:1535  _msgSender */\n      tag_61\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1525:1537  _msgSender() */\n      jump\t// in\n    tag_94:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1514:1537  owner() == _msgSender() */\n      and\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1514:1521  owner() */\n      tag_95\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1514:1519  owner */\n      tag_42\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1514:1521  owner() */\n      jump\t// in\n    tag_95:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1514:1537  owner() == _msgSender() */\n      and\n      eq\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1506:1574  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_96\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_64\n      swap1\n      tag_65\n      jump\t// in\n    tag_96:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1998:2028  _transferOwnership(address(0)) */\n      tag_99\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2025:2026  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1998:2016  _transferOwnership */\n      tag_100\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1998:2028  _transferOwnership(address(0)) */\n      jump\t// in\n    tag_99:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1934:2035  function renounceOwnership() public virtual onlyOwner {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1302:1387  function owner() public view virtual returns (address) {... */\n    tag_42:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1374:1380  _owner */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x33))\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1302:1387  function owner() public view virtual returns (address) {... */\n      swap1\n      jump\t// out\n        /* \"contracts/oracle.sol\":584:608  uint256 public timeLimit */\n    tag_45:\n      sload(0x66)\n      dup2\n      jump\t// out\n        /* \"contracts/oracle.sol\":840:1018  function initialize(address _signer) external initializer {... */\n    tag_50:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":539:552  _initializing */\n      sload(0x00)\n      0x0100\n      swap1\n      div\n      0xff\n      and\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":539:569  _initializing || !_initialized */\n      tag_103\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":557:569  _initialized */\n      and(0xff, sload(0x00))\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":556:569  !_initialized */\n      iszero\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":539:569  _initializing || !_initialized */\n    tag_103:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":531:620  require(_initializing || !_initialized, \"Initializable: contract is already initialized\") */\n      tag_104\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_64\n      swap1\n      tag_106\n      jump\t// in\n    tag_104:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":631:650  bool isTopLevelCall */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":654:667  _initializing */\n      sload\n      0x0100\n      swap1\n      div\n      0xff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":653:667  !_initializing */\n      iszero\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":677:775  if (isTopLevelCall) {... */\n      dup1\n      iszero\n      tag_107\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":711:724  _initializing */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":711:731  _initializing = true */\n      dup1\n      sload\n      not(0xff)\n      not(0xff00)\n      swap1\n      swap2\n      and\n      0x0100\n      or\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":745:764  _initialized = true */\n      and\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":727:731  true */\n      0x01\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":745:764  _initialized = true */\n      or\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":677:775  if (isTopLevelCall) {... */\n    tag_107:\n        /* \"contracts/oracle.sol\":908:924  __Ownable_init() */\n      tag_109\n        /* \"contracts/oracle.sol\":908:922  __Ownable_init */\n      tag_110\n        /* \"contracts/oracle.sol\":908:924  __Ownable_init() */\n      jump\t// in\n    tag_109:\n        /* \"contracts/oracle.sol\":934:961  _setExecutor(_signer, true) */\n      tag_111\n        /* \"contracts/oracle.sol\":947:954  _signer */\n      dup3\n        /* \"contracts/oracle.sol\":956:960  true */\n      0x01\n        /* \"contracts/oracle.sol\":934:946  _setExecutor */\n      tag_68\n        /* \"contracts/oracle.sol\":934:961  _setExecutor(_signer, true) */\n      jump\t// in\n    tag_111:\n      pop\n        /* \"contracts/oracle.sol\":971:977  signer */\n      0x65\n        /* \"contracts/oracle.sol\":971:987  signer = _signer */\n      dup1\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n      dup5\n      and\n      or\n      swap1\n      sstore\n        /* \"contracts/oracle.sol\":1009:1011  60 */\n      0x3c\n        /* \"contracts/oracle.sol\":997:1006  timeLimit */\n      0x66\n        /* \"contracts/oracle.sol\":997:1011  timeLimit = 60 */\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":797:863  if (isTopLevelCall) {... */\n      dup1\n      iszero\n      tag_112\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":847:852  false */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":831:852  _initializing = false */\n      dup1\n      sload\n      not(0xff00)\n      and\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":797:863  if (isTopLevelCall) {... */\n    tag_112:\n        /* \"contracts/oracle.sol\":840:1018  function initialize(address _signer) external initializer {... */\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/oracle.sol\":1489:1613  function setTimeLimit(uint256 _val) external onlyOwner returns (bool) {... */\n    tag_54:\n        /* \"contracts/oracle.sol\":1553:1557  bool */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1525:1537  _msgSender() */\n      tag_114\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1525:1535  _msgSender */\n      tag_61\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1525:1537  _msgSender() */\n      jump\t// in\n    tag_114:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1514:1537  owner() == _msgSender() */\n      and\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1514:1521  owner() */\n      tag_115\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1514:1519  owner */\n      tag_42\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1514:1521  owner() */\n      jump\t// in\n    tag_115:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1514:1537  owner() == _msgSender() */\n      and\n      eq\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1506:1574  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_116\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_64\n      swap1\n      tag_65\n      jump\t// in\n    tag_116:\n      pop\n        /* \"contracts/oracle.sol\":1569:1578  timeLimit */\n      0x66\n        /* \"contracts/oracle.sol\":1569:1585  timeLimit = _val */\n      sstore\n        /* \"contracts/oracle.sol\":1602:1606  true */\n      0x01\n      swap1\n        /* \"contracts/oracle.sol\":1489:1613  function setTimeLimit(uint256 _val) external onlyOwner returns (bool) {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2184:2382  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_58:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1525:1537  _msgSender() */\n      tag_120\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1525:1535  _msgSender */\n      tag_61\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1525:1537  _msgSender() */\n      jump\t// in\n    tag_120:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1514:1537  owner() == _msgSender() */\n      and\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1514:1521  owner() */\n      tag_121\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1514:1519  owner */\n      tag_42\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1514:1521  owner() */\n      jump\t// in\n    tag_121:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1514:1537  owner() == _msgSender() */\n      and\n      eq\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1506:1574  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_122\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_64\n      swap1\n      tag_65\n      jump\t// in\n    tag_122:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2272:2294  newOwner != address(0) */\n      dup2\n      and\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2264:2337  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n      tag_125\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_64\n      swap1\n      tag_127\n      jump\t// in\n    tag_125:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2347:2375  _transferOwnership(newOwner) */\n      tag_128\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2366:2374  newOwner */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2347:2365  _transferOwnership */\n      tag_100\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2347:2375  _transferOwnership(newOwner) */\n      jump\t// in\n    tag_128:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2184:2382  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":876:972  function _msgSender() internal view virtual returns (address) {... */\n    tag_61:\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":955:965  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":876:972  function _msgSender() internal view virtual returns (address) {... */\n      swap1\n      jump\t// out\n        /* \"contracts/oracle.sol\":1196:1356  function _setExecutor(address _address, bool _type)... */\n    tag_68:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/oracle.sol\":1302:1320  executor[_address] */\n      dup3\n      and\n        /* \"contracts/oracle.sol\":1282:1286  bool */\n      0x00\n        /* \"contracts/oracle.sol\":1302:1320  executor[_address] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/oracle.sol\":1302:1310  executor */\n      0x67\n        /* \"contracts/oracle.sol\":1302:1320  executor[_address] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/oracle.sol\":1302:1328  executor[_address] = _type */\n      dup1\n      sload\n      dup3\n      iszero\n      iszero\n      not(0xff)\n      swap1\n      swap2\n      and\n      or\n      swap1\n      sstore\n      0x01\n        /* \"contracts/oracle.sol\":1196:1356  function _setExecutor(address _address, bool _type)... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":8040:8305  function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {... */\n    tag_85:\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":8109:8116  bytes32 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":8292:8296  hash */\n      dup2\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":8239:8297  abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash) */\n      add(0x20, mload(0x40))\n      tag_132\n      swap2\n      swap1\n      tag_133\n      jump\t// in\n    tag_132:\n      mload(0x40)\n      0x20\n      dup2\n      dup4\n      sub\n      sub\n      dup2\n      mstore\n      swap1\n      0x40\n      mstore\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":8229:8298  keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash)) */\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      keccak256\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":8222:8298  return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash)) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":8040:8305  function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":4293:4520  function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {... */\n    tag_86:\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":4371:4378  address */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":4391:4408  address recovered */\n      dup1\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":4410:4428  RecoverError error */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":4432:4459  tryRecover(hash, signature) */\n      tag_135\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":4443:4447  hash */\n      dup6\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":4449:4458  signature */\n      dup6\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":4432:4442  tryRecover */\n      tag_136\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":4432:4459  tryRecover(hash, signature) */\n      jump\t// in\n    tag_135:\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":4390:4459  (address recovered, RecoverError error) = tryRecover(hash, signature) */\n      swap2\n      pop\n      swap2\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":4469:4487  _throwError(error) */\n      tag_137\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":4481:4486  error */\n      dup2\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":4469:4480  _throwError */\n      tag_138\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":4469:4487  _throwError(error) */\n      jump\t// in\n    tag_137:\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":4504:4513  recovered */\n      swap4\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":4293:4520  function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {... */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2536:2723  function _transferOwnership(address newOwner) internal virtual {... */\n    tag_100:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2628:2634  _owner */\n      0x33\n      dup1\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2644:2661  _owner = newOwner */\n      dup4\n      dup2\n      and\n      not(sub(shl(0xa0, 0x01), 0x01))\n      dup4\n      and\n      dup2\n      or\n      swap1\n      swap4\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2676:2716  OwnershipTransferred(oldOwner, newOwner) */\n      mload(0x40)\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2628:2634  _owner */\n      swap2\n      and\n      swap2\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2644:2661  _owner = newOwner */\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2628:2634  _owner */\n      dup3\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2676:2716  OwnershipTransferred(oldOwner, newOwner) */\n      0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2609:2625  address oldOwner */\n      0x00\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2676:2716  OwnershipTransferred(oldOwner, newOwner) */\n      log3\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2536:2723  function _transferOwnership(address newOwner) internal virtual {... */\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":988:1114  function __Ownable_init() internal initializer {... */\n    tag_110:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":539:552  _initializing */\n      sload(0x00)\n      0x0100\n      swap1\n      div\n      0xff\n      and\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":539:569  _initializing || !_initialized */\n      tag_141\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":557:569  _initialized */\n      and(0xff, sload(0x00))\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":556:569  !_initialized */\n      iszero\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":539:569  _initializing || !_initialized */\n    tag_141:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":531:620  require(_initializing || !_initialized, \"Initializable: contract is already initialized\") */\n      tag_142\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_64\n      swap1\n      tag_106\n      jump\t// in\n    tag_142:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":631:650  bool isTopLevelCall */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":654:667  _initializing */\n      sload\n      0x0100\n      swap1\n      div\n      0xff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":653:667  !_initializing */\n      iszero\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":677:775  if (isTopLevelCall) {... */\n      dup1\n      iszero\n      tag_144\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":711:724  _initializing */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":711:731  _initializing = true */\n      dup1\n      sload\n      not(0xff)\n      not(0xff00)\n      swap1\n      swap2\n      and\n      0x0100\n      or\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":745:764  _initialized = true */\n      and\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":727:731  true */\n      0x01\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":745:764  _initialized = true */\n      or\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":677:775  if (isTopLevelCall) {... */\n    tag_144:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1045:1071  __Context_init_unchained() */\n      tag_146\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1045:1069  __Context_init_unchained */\n      tag_147\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1045:1071  __Context_init_unchained() */\n      jump\t// in\n    tag_146:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1081:1107  __Ownable_init_unchained() */\n      tag_148\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1081:1105  __Ownable_init_unchained */\n      tag_149\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1081:1107  __Ownable_init_unchained() */\n      jump\t// in\n    tag_148:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":801:815  isTopLevelCall */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":797:863  if (isTopLevelCall) {... */\n      iszero\n      tag_128\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":847:852  false */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":831:852  _initializing = false */\n      dup1\n      sload\n      not(0xff00)\n      and\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":988:1114  function __Ownable_init() internal initializer {... */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":2228:3507  function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {... */\n    tag_136:\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":2309:2316  address */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":2318:2330  RecoverError */\n      dup1\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":2539:2548  signature */\n      dup3\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":2539:2555  signature.length */\n      mload\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":2559:2561  65 */\n      0x41\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":2539:2561  signature.length == 65 */\n      eq\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":2535:3501  if (signature.length == 65) {... */\n      iszero\n      tag_152\n      jumpi\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":2828:2832  0x20 */\n      0x20\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":2813:2833  add(signature, 0x20) */\n      dup4\n      add\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":2807:2834  mload(add(signature, 0x20)) */\n      mload\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":2877:2881  0x40 */\n      0x40\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":2862:2882  add(signature, 0x40) */\n      dup5\n      add\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":2856:2883  mload(add(signature, 0x40)) */\n      mload\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":2934:2938  0x60 */\n      0x60\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":2919:2939  add(signature, 0x60) */\n      dup6\n      add\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":2913:2940  mload(add(signature, 0x60)) */\n      mload\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":2577:2586  bytes32 r */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":2905:2941  byte(0, mload(add(signature, 0x60))) */\n      byte\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":2975:3000  tryRecover(hash, v, r, s) */\n      tag_153\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":2986:2990  hash */\n      dup8\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":2905:2941  byte(0, mload(add(signature, 0x60))) */\n      dup3\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":2807:2834  mload(add(signature, 0x20)) */\n      dup6\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":2856:2883  mload(add(signature, 0x40)) */\n      dup6\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":2975:2985  tryRecover */\n      tag_154\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":2975:3000  tryRecover(hash, v, r, s) */\n      jump\t// in\n    tag_153:\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":2968:3000  return tryRecover(hash, v, r, s) */\n      swap5\n      pop\n      swap5\n      pop\n      pop\n      pop\n      pop\n      jump(tag_159)\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":2535:3501  if (signature.length == 65) {... */\n    tag_152:\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":3021:3030  signature */\n      dup3\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":3021:3037  signature.length */\n      mload\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":3041:3043  64 */\n      0x40\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":3021:3043  signature.length == 64 */\n      eq\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":3017:3501  if (signature.length == 64) {... */\n      iszero\n      tag_156\n      jumpi\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":3290:3294  0x20 */\n      0x20\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":3275:3295  add(signature, 0x20) */\n      dup4\n      add\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":3269:3296  mload(add(signature, 0x20)) */\n      mload\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":3340:3344  0x40 */\n      0x40\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":3325:3345  add(signature, 0x40) */\n      dup5\n      add\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":3319:3346  mload(add(signature, 0x40)) */\n      mload\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":3380:3403  tryRecover(hash, r, vs) */\n      tag_157\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":3391:3395  hash */\n      dup7\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":3269:3296  mload(add(signature, 0x20)) */\n      dup4\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":3319:3346  mload(add(signature, 0x40)) */\n      dup4\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":3380:3390  tryRecover */\n      tag_158\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":3380:3403  tryRecover(hash, r, vs) */\n      jump\t// in\n    tag_157:\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":3373:3403  return tryRecover(hash, r, vs) */\n      swap4\n      pop\n      swap4\n      pop\n      pop\n      pop\n      jump(tag_159)\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":3017:3501  if (signature.length == 64) {... */\n    tag_156:\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":3450:3451  0 */\n      0x00\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":3454:3489  RecoverError.InvalidSignatureLength */\n      0x02\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":3017:3501  if (signature.length == 64) {... */\n    tag_159:\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":2228:3507  function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {... */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":533:1164  function _throwError(RecoverError error) private pure {... */\n    tag_138:\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":610:630  RecoverError.NoError */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":601:606  error */\n      dup2\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":601:630  error == RecoverError.NoError */\n      0x04\n      dup2\n      gt\n      iszero\n      tag_162\n      jumpi\n      mstore(0x00, shl(0xe0, 0x4e487b71))\n      mstore(0x04, 0x21)\n      revert(0x00, 0x24)\n    tag_162:\n      eq\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":597:1158  if (error == RecoverError.NoError) {... */\n      iszero\n      tag_163\n      jumpi\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":646:653  return; */\n      jump(tag_128)\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":597:1158  if (error == RecoverError.NoError) {... */\n    tag_163:\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":706:735  RecoverError.InvalidSignature */\n      0x01\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":697:702  error */\n      dup2\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":697:735  error == RecoverError.InvalidSignature */\n      0x04\n      dup2\n      gt\n      iszero\n      tag_166\n      jumpi\n      mstore(0x00, shl(0xe0, 0x4e487b71))\n      mstore(0x04, 0x21)\n      revert(0x00, 0x24)\n    tag_166:\n      eq\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":693:1158  if (error == RecoverError.InvalidSignature) {... */\n      iszero\n      tag_167\n      jumpi\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":751:785  revert(\"ECDSA: invalid signature\") */\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_64\n      swap1\n      tag_169\n      jump\t// in\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":693:1158  if (error == RecoverError.InvalidSignature) {... */\n    tag_167:\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":815:850  RecoverError.InvalidSignatureLength */\n      0x02\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":806:811  error */\n      dup2\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":806:850  error == RecoverError.InvalidSignatureLength */\n      0x04\n      dup2\n      gt\n      iszero\n      tag_172\n      jumpi\n      mstore(0x00, shl(0xe0, 0x4e487b71))\n      mstore(0x04, 0x21)\n      revert(0x00, 0x24)\n    tag_172:\n      eq\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":802:1158  if (error == RecoverError.InvalidSignatureLength) {... */\n      iszero\n      tag_173\n      jumpi\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":866:907  revert(\"ECDSA: invalid signature length\") */\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_64\n      swap1\n      tag_175\n      jump\t// in\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":802:1158  if (error == RecoverError.InvalidSignatureLength) {... */\n    tag_173:\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":937:967  RecoverError.InvalidSignatureS */\n      0x03\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":928:933  error */\n      dup2\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":928:967  error == RecoverError.InvalidSignatureS */\n      0x04\n      dup2\n      gt\n      iszero\n      tag_178\n      jumpi\n      mstore(0x00, shl(0xe0, 0x4e487b71))\n      mstore(0x04, 0x21)\n      revert(0x00, 0x24)\n    tag_178:\n      eq\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":924:1158  if (error == RecoverError.InvalidSignatureS) {... */\n      iszero\n      tag_179\n      jumpi\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":983:1027  revert(\"ECDSA: invalid signature 's' value\") */\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_64\n      swap1\n      tag_181\n      jump\t// in\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":924:1158  if (error == RecoverError.InvalidSignatureS) {... */\n    tag_179:\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":1057:1087  RecoverError.InvalidSignatureV */\n      0x04\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":1048:1053  error */\n      dup2\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":1048:1087  error == RecoverError.InvalidSignatureV */\n      0x04\n      dup2\n      gt\n      iszero\n      tag_184\n      jumpi\n      mstore(0x00, shl(0xe0, 0x4e487b71))\n      mstore(0x04, 0x21)\n      revert(0x00, 0x24)\n    tag_184:\n      eq\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":1044:1158  if (error == RecoverError.InvalidSignatureV) {... */\n      iszero\n      tag_128\n      jumpi\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":1103:1147  revert(\"ECDSA: invalid signature 'v' value\") */\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_64\n      swap1\n      tag_187\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":807:871  function __Context_init_unchained() internal initializer {... */\n    tag_147:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":539:552  _initializing */\n      sload(0x00)\n      0x0100\n      swap1\n      div\n      0xff\n      and\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":539:569  _initializing || !_initialized */\n      tag_189\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":557:569  _initialized */\n      and(0xff, sload(0x00))\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":556:569  !_initialized */\n      iszero\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":539:569  _initializing || !_initialized */\n    tag_189:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":531:620  require(_initializing || !_initialized, \"Initializable: contract is already initialized\") */\n      tag_190\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_64\n      swap1\n      tag_106\n      jump\t// in\n    tag_190:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":631:650  bool isTopLevelCall */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":654:667  _initializing */\n      sload\n      0x0100\n      swap1\n      div\n      0xff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":653:667  !_initializing */\n      iszero\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":677:775  if (isTopLevelCall) {... */\n      dup1\n      iszero\n      tag_148\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":711:724  _initializing */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":711:731  _initializing = true */\n      dup1\n      sload\n      not(0xff)\n      not(0xff00)\n      swap1\n      swap2\n      and\n      0x0100\n      or\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":745:764  _initialized = true */\n      and\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":727:731  true */\n      0x01\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":745:764  _initialized = true */\n      or\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":801:815  isTopLevelCall */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":797:863  if (isTopLevelCall) {... */\n      iszero\n      tag_128\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":847:852  false */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":831:852  _initializing = false */\n      dup1\n      sload\n      not(0xff00)\n      and\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":807:871  function __Context_init_unchained() internal initializer {... */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1120:1226  function __Ownable_init_unchained() internal initializer {... */\n    tag_149:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":539:552  _initializing */\n      sload(0x00)\n      0x0100\n      swap1\n      div\n      0xff\n      and\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":539:569  _initializing || !_initialized */\n      tag_196\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":557:569  _initialized */\n      and(0xff, sload(0x00))\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":556:569  !_initialized */\n      iszero\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":539:569  _initializing || !_initialized */\n    tag_196:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":531:620  require(_initializing || !_initialized, \"Initializable: contract is already initialized\") */\n      tag_197\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_64\n      swap1\n      tag_106\n      jump\t// in\n    tag_197:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":631:650  bool isTopLevelCall */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":654:667  _initializing */\n      sload\n      0x0100\n      swap1\n      div\n      0xff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":653:667  !_initializing */\n      iszero\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":677:775  if (isTopLevelCall) {... */\n      dup1\n      iszero\n      tag_199\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":711:724  _initializing */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":711:731  _initializing = true */\n      dup1\n      sload\n      not(0xff)\n      not(0xff00)\n      swap1\n      swap2\n      and\n      0x0100\n      or\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":745:764  _initialized = true */\n      and\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":727:731  true */\n      0x01\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":745:764  _initialized = true */\n      or\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":677:775  if (isTopLevelCall) {... */\n    tag_199:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1187:1219  _transferOwnership(_msgSender()) */\n      tag_148\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1206:1218  _msgSender() */\n      tag_202\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1206:1216  _msgSender */\n      tag_61\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1206:1218  _msgSender() */\n      jump\t// in\n    tag_202:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1187:1205  _transferOwnership */\n      tag_100\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1187:1219  _transferOwnership(_msgSender()) */\n      jump\t// in\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":5744:7347  function tryRecover(... */\n    tag_154:\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":5870:5877  address */\n      0x00\n      dup1\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6794:6860  0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 */\n      0x7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6781:6860  uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 */\n      dup4\n      gt\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6777:6938  if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {... */\n      iszero\n      tag_205\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6892:6893  0 */\n      0x00\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6896:6926  RecoverError.InvalidSignatureS */\n      0x03\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6876:6927  return (address(0), RecoverError.InvalidSignatureS) */\n      jump(tag_204)\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6777:6938  if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {... */\n    tag_205:\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6951:6952  v */\n      dup5\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6951:6958  v != 27 */\n      0xff\n      and\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6956:6958  27 */\n      0x1b\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6951:6958  v != 27 */\n      eq\n      iszero\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6951:6969  v != 27 && v != 28 */\n      dup1\n      iszero\n      tag_206\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6962:6963  v */\n      dup5\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6962:6969  v != 28 */\n      0xff\n      and\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6967:6969  28 */\n      0x1c\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6962:6969  v != 28 */\n      eq\n      iszero\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6951:6969  v != 27 && v != 28 */\n    tag_206:\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6947:7047  if (v != 27 && v != 28) {... */\n      iszero\n      tag_207\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7001:7002  0 */\n      0x00\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7005:7035  RecoverError.InvalidSignatureV */\n      0x04\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6985:7036  return (address(0), RecoverError.InvalidSignatureV) */\n      jump(tag_204)\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6947:7047  if (v != 27 && v != 28) {... */\n    tag_207:\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7141:7155  address signer */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7158:7182  ecrecover(hash, v, r, s) */\n      0x01\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7168:7172  hash */\n      dup8\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7174:7175  v */\n      dup8\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7177:7178  r */\n      dup8\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7180:7181  s */\n      dup8\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7158:7182  ecrecover(hash, v, r, s) */\n      mload(0x40)\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      0x40\n      mstore\n      mload(0x40)\n      tag_208\n      swap5\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_209\n      jump\t// in\n    tag_208:\n      0x20\n      mload(0x40)\n      0x20\n      dup2\n      sub\n      swap1\n      dup1\n      dup5\n      sub\n      swap1\n      dup6\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_211\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_211:\n      pop\n      pop\n      mload(add(not(0x1f), mload(0x40)))\n      swap2\n      pop\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7196:7216  signer == address(0) */\n      dup2\n      and\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7192:7293  if (signer == address(0)) {... */\n      tag_212\n      jumpi\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7248:7249  0 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7252:7281  RecoverError.InvalidSignature */\n      0x01\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7232:7282  return (address(0), RecoverError.InvalidSignature) */\n      swap3\n      pop\n      swap3\n      pop\n      pop\n      jump(tag_204)\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7192:7293  if (signer == address(0)) {... */\n    tag_212:\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7311:7317  signer */\n      swap2\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7319:7339  RecoverError.NoError */\n      0x00\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":5744:7347  function tryRecover(... */\n    tag_204:\n      swap5\n      pop\n      swap5\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":4774:5153  function tryRecover(... */\n    tag_158:\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":4884:4891  address */\n      0x00\n      dup1\n      sub(shl(0xff, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":4981:5056  and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) */\n      dup4\n      and\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":5082:5085  255 */\n      0xff\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":5078:5090  shr(255, vs) */\n      dup5\n      swap1\n      shr\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":5092:5094  27 */\n      0x1b\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":5074:5095  add(shr(255, vs), 27) */\n      add\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":5121:5146  tryRecover(hash, v, r, s) */\n      tag_214\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":5132:5136  hash */\n      dup8\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":5074:5095  add(shr(255, vs), 27) */\n      dup3\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":5141:5142  r */\n      dup9\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":4981:5056  and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) */\n      dup6\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":5121:5131  tryRecover */\n      tag_154\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":5121:5146  tryRecover(hash, v, r, s) */\n      jump\t// in\n    tag_214:\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":5114:5146  return tryRecover(hash, v, r, s) */\n      swap4\n      pop\n      swap4\n      pop\n      pop\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":4774:5153  function tryRecover(... */\n      swap4\n      pop\n      swap4\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":14:621   */\n    tag_216:\n      0x00\n        /* \"#utility.yul\":110:128   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":151:153   */\n      dup1\n        /* \"#utility.yul\":143:149   */\n      dup5\n        /* \"#utility.yul\":140:154   */\n      gt\n        /* \"#utility.yul\":137:139   */\n      iszero\n      tag_219\n      jumpi\n        /* \"#utility.yul\":157:175   */\n      tag_219\n      tag_220\n      jump\t// in\n    tag_219:\n        /* \"#utility.yul\":206:208   */\n      0x40\n        /* \"#utility.yul\":200:209   */\n      mload\n        /* \"#utility.yul\":279:281   */\n      0x1f\n        /* \"#utility.yul\":256:273   */\n      dup6\n      add\n      not(0x1f)\n        /* \"#utility.yul\":252:283   */\n      and\n        /* \"#utility.yul\":240:284   */\n      dup2\n      add\n        /* \"#utility.yul\":286:290   */\n      0x20\n        /* \"#utility.yul\":236:291   */\n      add\n        /* \"#utility.yul\":306:324   */\n      dup3\n      dup2\n      gt\n        /* \"#utility.yul\":326:348   */\n      dup3\n      dup3\n      lt\n        /* \"#utility.yul\":303:349   */\n      or\n        /* \"#utility.yul\":300:302   */\n      iszero\n      tag_222\n      jumpi\n        /* \"#utility.yul\":352:370   */\n      tag_222\n      tag_220\n      jump\t// in\n    tag_222:\n        /* \"#utility.yul\":388:390   */\n      0x40\n        /* \"#utility.yul\":381:403   */\n      mstore\n        /* \"#utility.yul\":436:458   */\n      dup5\n      dup2\n      mstore\n        /* \"#utility.yul\":421:427   */\n      swap2\n      pop\n      dup2\n        /* \"#utility.yul\":473:489   */\n      dup4\n      dup6\n      add\n        /* \"#utility.yul\":470:495   */\n      dup7\n      lt\n        /* \"#utility.yul\":467:469   */\n      iszero\n      tag_223\n      jumpi\n        /* \"#utility.yul\":508:509   */\n      0x00\n        /* \"#utility.yul\":505:506   */\n      dup1\n        /* \"#utility.yul\":498:510   */\n      revert\n        /* \"#utility.yul\":467:469   */\n    tag_223:\n        /* \"#utility.yul\":558:564   */\n      dup5\n        /* \"#utility.yul\":553:556   */\n      dup5\n        /* \"#utility.yul\":546:550   */\n      0x20\n        /* \"#utility.yul\":538:544   */\n      dup4\n        /* \"#utility.yul\":534:551   */\n      add\n        /* \"#utility.yul\":521:565   */\n      calldatacopy\n        /* \"#utility.yul\":613:614   */\n      0x00\n        /* \"#utility.yul\":606:610   */\n      0x20\n        /* \"#utility.yul\":597:603   */\n      dup7\n        /* \"#utility.yul\":589:595   */\n      dup4\n        /* \"#utility.yul\":585:604   */\n      add\n        /* \"#utility.yul\":581:611   */\n      add\n        /* \"#utility.yul\":574:615   */\n      mstore\n      pop\n      pop\n        /* \"#utility.yul\":90:621   */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":626:801   */\n    tag_224:\n        /* \"#utility.yul\":696:716   */\n      dup1\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":745:776   */\n      dup2\n      and\n        /* \"#utility.yul\":735:777   */\n      dup2\n      eq\n        /* \"#utility.yul\":725:727   */\n      tag_92\n      jumpi\n        /* \"#utility.yul\":791:792   */\n      0x00\n        /* \"#utility.yul\":788:789   */\n      dup1\n        /* \"#utility.yul\":781:793   */\n      revert\n        /* \"#utility.yul\":806:968   */\n    tag_227:\n        /* \"#utility.yul\":873:893   */\n      dup1\n      calldataload\n        /* \"#utility.yul\":929:942   */\n      dup1\n      iszero\n        /* \"#utility.yul\":922:943   */\n      iszero\n        /* \"#utility.yul\":912:944   */\n      dup2\n      eq\n        /* \"#utility.yul\":902:904   */\n      tag_92\n      jumpi\n        /* \"#utility.yul\":958:959   */\n      0x00\n        /* \"#utility.yul\":955:956   */\n      dup1\n        /* \"#utility.yul\":948:960   */\n      revert\n        /* \"#utility.yul\":973:1171   */\n    tag_32:\n      0x00\n        /* \"#utility.yul\":1085:1087   */\n      0x20\n        /* \"#utility.yul\":1073:1082   */\n      dup3\n        /* \"#utility.yul\":1064:1071   */\n      dup5\n        /* \"#utility.yul\":1060:1083   */\n      sub\n        /* \"#utility.yul\":1056:1088   */\n      slt\n        /* \"#utility.yul\":1053:1055   */\n      iszero\n      tag_231\n      jumpi\n        /* \"#utility.yul\":1106:1112   */\n      dup1\n        /* \"#utility.yul\":1098:1104   */\n      dup2\n        /* \"#utility.yul\":1091:1113   */\n      revert\n        /* \"#utility.yul\":1053:1055   */\n    tag_231:\n        /* \"#utility.yul\":1134:1165   */\n      tag_67\n        /* \"#utility.yul\":1155:1164   */\n      dup3\n        /* \"#utility.yul\":1134:1165   */\n      tag_224\n      jump\t// in\n        /* \"#utility.yul\":1176:1444   */\n    tag_17:\n      0x00\n      dup1\n        /* \"#utility.yul\":1302:1304   */\n      0x40\n        /* \"#utility.yul\":1290:1299   */\n      dup4\n        /* \"#utility.yul\":1281:1288   */\n      dup6\n        /* \"#utility.yul\":1277:1300   */\n      sub\n        /* \"#utility.yul\":1273:1305   */\n      slt\n        /* \"#utility.yul\":1270:1272   */\n      iszero\n      tag_234\n      jumpi\n        /* \"#utility.yul\":1323:1329   */\n      dup1\n        /* \"#utility.yul\":1315:1321   */\n      dup2\n        /* \"#utility.yul\":1308:1330   */\n      revert\n        /* \"#utility.yul\":1270:1272   */\n    tag_234:\n        /* \"#utility.yul\":1351:1382   */\n      tag_235\n        /* \"#utility.yul\":1372:1381   */\n      dup4\n        /* \"#utility.yul\":1351:1382   */\n      tag_224\n      jump\t// in\n    tag_235:\n        /* \"#utility.yul\":1341:1382   */\n      swap2\n      pop\n        /* \"#utility.yul\":1401:1438   */\n      tag_236\n        /* \"#utility.yul\":1434:1436   */\n      0x20\n        /* \"#utility.yul\":1423:1432   */\n      dup5\n        /* \"#utility.yul\":1419:1437   */\n      add\n        /* \"#utility.yul\":1401:1438   */\n      tag_227\n      jump\t// in\n    tag_236:\n        /* \"#utility.yul\":1391:1438   */\n      swap1\n      pop\n        /* \"#utility.yul\":1260:1444   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1449:2509   */\n    tag_27:\n      0x00\n      dup1\n      0x00\n      dup1\n      0x00\n        /* \"#utility.yul\":1645:1648   */\n      0xa0\n        /* \"#utility.yul\":1633:1642   */\n      dup7\n        /* \"#utility.yul\":1624:1631   */\n      dup9\n        /* \"#utility.yul\":1620:1643   */\n      sub\n        /* \"#utility.yul\":1616:1649   */\n      slt\n        /* \"#utility.yul\":1613:1615   */\n      iszero\n      tag_238\n      jumpi\n        /* \"#utility.yul\":1667:1673   */\n      dup1\n        /* \"#utility.yul\":1659:1665   */\n      dup2\n        /* \"#utility.yul\":1652:1674   */\n      revert\n        /* \"#utility.yul\":1613:1615   */\n    tag_238:\n        /* \"#utility.yul\":1695:1723   */\n      tag_239\n        /* \"#utility.yul\":1713:1722   */\n      dup7\n        /* \"#utility.yul\":1695:1723   */\n      tag_227\n      jump\t// in\n    tag_239:\n        /* \"#utility.yul\":1685:1723   */\n      swap5\n      pop\n        /* \"#utility.yul\":1770:1772   */\n      0x20\n        /* \"#utility.yul\":1759:1768   */\n      dup7\n        /* \"#utility.yul\":1755:1773   */\n      add\n        /* \"#utility.yul\":1742:1774   */\n      calldataload\n        /* \"#utility.yul\":1732:1774   */\n      swap4\n      pop\n        /* \"#utility.yul\":1821:1823   */\n      0x40\n        /* \"#utility.yul\":1810:1819   */\n      dup7\n        /* \"#utility.yul\":1806:1824   */\n      add\n        /* \"#utility.yul\":1793:1825   */\n      calldataload\n        /* \"#utility.yul\":1783:1825   */\n      swap3\n      pop\n        /* \"#utility.yul\":1876:1878   */\n      0x60\n        /* \"#utility.yul\":1865:1874   */\n      dup7\n        /* \"#utility.yul\":1861:1879   */\n      add\n        /* \"#utility.yul\":1848:1880   */\n      calldataload\n        /* \"#utility.yul\":1899:1917   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":1940:1942   */\n      dup1\n        /* \"#utility.yul\":1932:1938   */\n      dup3\n        /* \"#utility.yul\":1929:1943   */\n      gt\n        /* \"#utility.yul\":1926:1928   */\n      iszero\n      tag_240\n      jumpi\n        /* \"#utility.yul\":1961:1967   */\n      dup3\n        /* \"#utility.yul\":1953:1959   */\n      dup4\n        /* \"#utility.yul\":1946:1968   */\n      revert\n        /* \"#utility.yul\":1926:1928   */\n    tag_240:\n        /* \"#utility.yul\":2004:2010   */\n      dup2\n        /* \"#utility.yul\":1993:2002   */\n      dup9\n        /* \"#utility.yul\":1989:2011   */\n      add\n        /* \"#utility.yul\":1979:2011   */\n      swap2\n      pop\n        /* \"#utility.yul\":2049:2056   */\n      dup9\n        /* \"#utility.yul\":2042:2046   */\n      0x1f\n        /* \"#utility.yul\":2038:2040   */\n      dup4\n        /* \"#utility.yul\":2034:2047   */\n      add\n        /* \"#utility.yul\":2030:2057   */\n      slt\n        /* \"#utility.yul\":2020:2022   */\n      tag_241\n      jumpi\n        /* \"#utility.yul\":2076:2082   */\n      dup3\n        /* \"#utility.yul\":2068:2074   */\n      dup4\n        /* \"#utility.yul\":2061:2083   */\n      revert\n        /* \"#utility.yul\":2020:2022   */\n    tag_241:\n        /* \"#utility.yul\":2104:2179   */\n      tag_242\n        /* \"#utility.yul\":2171:2178   */\n      dup10\n        /* \"#utility.yul\":2166:2168   */\n      dup4\n        /* \"#utility.yul\":2153:2169   */\n      calldataload\n        /* \"#utility.yul\":2148:2150   */\n      0x20\n        /* \"#utility.yul\":2144:2146   */\n      dup6\n        /* \"#utility.yul\":2140:2151   */\n      add\n        /* \"#utility.yul\":2104:2179   */\n      tag_216\n      jump\t// in\n    tag_242:\n        /* \"#utility.yul\":2094:2179   */\n      swap4\n      pop\n        /* \"#utility.yul\":2232:2235   */\n      0x80\n        /* \"#utility.yul\":2221:2230   */\n      dup9\n        /* \"#utility.yul\":2217:2236   */\n      add\n        /* \"#utility.yul\":2204:2237   */\n      calldataload\n        /* \"#utility.yul\":2188:2237   */\n      swap2\n      pop\n        /* \"#utility.yul\":2262:2264   */\n      dup1\n        /* \"#utility.yul\":2252:2260   */\n      dup3\n        /* \"#utility.yul\":2249:2265   */\n      gt\n        /* \"#utility.yul\":2246:2248   */\n      iszero\n      tag_243\n      jumpi\n        /* \"#utility.yul\":2283:2289   */\n      dup3\n        /* \"#utility.yul\":2275:2281   */\n      dup4\n        /* \"#utility.yul\":2268:2290   */\n      revert\n        /* \"#utility.yul\":2246:2248   */\n    tag_243:\n      pop\n        /* \"#utility.yul\":2311:2335   */\n      dup7\n      add\n        /* \"#utility.yul\":2366:2370   */\n      0x1f\n        /* \"#utility.yul\":2358:2371   */\n      dup2\n      add\n        /* \"#utility.yul\":2354:2381   */\n      dup9\n      sgt\n        /* \"#utility.yul\":2344:2346   */\n      tag_244\n      jumpi\n        /* \"#utility.yul\":2400:2406   */\n      dup2\n        /* \"#utility.yul\":2392:2398   */\n      dup3\n        /* \"#utility.yul\":2385:2407   */\n      revert\n        /* \"#utility.yul\":2344:2346   */\n    tag_244:\n        /* \"#utility.yul\":2428:2503   */\n      tag_245\n        /* \"#utility.yul\":2495:2502   */\n      dup9\n        /* \"#utility.yul\":2490:2492   */\n      dup3\n        /* \"#utility.yul\":2477:2493   */\n      calldataload\n        /* \"#utility.yul\":2472:2474   */\n      0x20\n        /* \"#utility.yul\":2468:2470   */\n      dup5\n        /* \"#utility.yul\":2464:2475   */\n      add\n        /* \"#utility.yul\":2428:2503   */\n      tag_216\n      jump\t// in\n    tag_245:\n        /* \"#utility.yul\":2418:2503   */\n      swap2\n      pop\n      pop\n        /* \"#utility.yul\":1603:2509   */\n      swap3\n      swap6\n      pop\n      swap3\n      swap6\n      swap1\n      swap4\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2514:2704   */\n    tag_53:\n      0x00\n        /* \"#utility.yul\":2626:2628   */\n      0x20\n        /* \"#utility.yul\":2614:2623   */\n      dup3\n        /* \"#utility.yul\":2605:2612   */\n      dup5\n        /* \"#utility.yul\":2601:2624   */\n      sub\n        /* \"#utility.yul\":2597:2629   */\n      slt\n        /* \"#utility.yul\":2594:2596   */\n      iszero\n      tag_247\n      jumpi\n        /* \"#utility.yul\":2647:2653   */\n      dup1\n        /* \"#utility.yul\":2639:2645   */\n      dup2\n        /* \"#utility.yul\":2632:2654   */\n      revert\n        /* \"#utility.yul\":2594:2596   */\n    tag_247:\n      pop\n        /* \"#utility.yul\":2675:2698   */\n      calldataload\n      swap2\n        /* \"#utility.yul\":2584:2704   */\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2709:3401   */\n    tag_82:\n      0x00\n        /* \"#utility.yul\":2971:2977   */\n      dup6\n        /* \"#utility.yul\":2964:2978   */\n      iszero\n        /* \"#utility.yul\":2957:2979   */\n      iszero\n        /* \"#utility.yul\":2952:2955   */\n      0xf8\n        /* \"#utility.yul\":2948:2980   */\n      shl\n        /* \"#utility.yul\":2943:2946   */\n      dup3\n        /* \"#utility.yul\":2936:2981   */\n      mstore\n        /* \"#utility.yul\":3010:3016   */\n      dup5\n        /* \"#utility.yul\":3006:3007   */\n      0x01\n        /* \"#utility.yul\":3001:3004   */\n      dup4\n        /* \"#utility.yul\":2997:3008   */\n      add\n        /* \"#utility.yul\":2990:3017   */\n      mstore\n        /* \"#utility.yul\":3047:3053   */\n      dup4\n        /* \"#utility.yul\":3042:3044   */\n      0x21\n        /* \"#utility.yul\":3037:3040   */\n      dup4\n        /* \"#utility.yul\":3033:3045   */\n      add\n        /* \"#utility.yul\":3026:3054   */\n      mstore\n        /* \"#utility.yul\":3083:3089   */\n      dup3\n        /* \"#utility.yul\":3077:3090   */\n      mload\n        /* \"#utility.yul\":3108:3111   */\n      dup2\n        /* \"#utility.yul\":3120:3258   */\n    tag_249:\n        /* \"#utility.yul\":3134:3140   */\n      dup2\n        /* \"#utility.yul\":3131:3132   */\n      dup2\n        /* \"#utility.yul\":3128:3141   */\n      lt\n        /* \"#utility.yul\":3120:3258   */\n      iszero\n      tag_251\n      jumpi\n        /* \"#utility.yul\":3241:3245   */\n      0x20\n        /* \"#utility.yul\":3225:3239   */\n      dup2\n      dup7\n      add\n        /* \"#utility.yul\":3221:3246   */\n      dup2\n      add\n        /* \"#utility.yul\":3215:3247   */\n      mload\n        /* \"#utility.yul\":3210:3212   */\n      0x41\n        /* \"#utility.yul\":3197:3208   */\n      dup7\n      dup5\n      add\n        /* \"#utility.yul\":3193:3213   */\n      add\n        /* \"#utility.yul\":3186:3248   */\n      mstore\n        /* \"#utility.yul\":3149:3161   */\n      add\n        /* \"#utility.yul\":3120:3258   */\n      jump(tag_249)\n    tag_251:\n        /* \"#utility.yul\":3276:3282   */\n      dup2\n        /* \"#utility.yul\":3273:3274   */\n      dup2\n        /* \"#utility.yul\":3270:3283   */\n      gt\n        /* \"#utility.yul\":3267:3269   */\n      iszero\n      tag_252\n      jumpi\n        /* \"#utility.yul\":3340:3343   */\n      dup3\n        /* \"#utility.yul\":3335:3337   */\n      0x41\n        /* \"#utility.yul\":3326:3332   */\n      dup4\n        /* \"#utility.yul\":3321:3324   */\n      dup7\n        /* \"#utility.yul\":3317:3333   */\n      add\n        /* \"#utility.yul\":3313:3338   */\n      add\n        /* \"#utility.yul\":3306:3344   */\n      mstore\n        /* \"#utility.yul\":3267:3269   */\n    tag_252:\n      pop\n        /* \"#utility.yul\":3374:3390   */\n      swap2\n      swap1\n      swap2\n      add\n        /* \"#utility.yul\":3392:3394   */\n      0x41\n        /* \"#utility.yul\":3370:3395   */\n      add\n      swap6\n        /* \"#utility.yul\":2926:3401   */\n      swap5\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3406:3786   */\n    tag_133:\n        /* \"#utility.yul\":3648:3714   */\n      0x19457468657265756d205369676e6564204d6573736167653a0a333200000000\n        /* \"#utility.yul\":3636:3715   */\n      dup2\n      mstore\n        /* \"#utility.yul\":3740:3742   */\n      0x1c\n        /* \"#utility.yul\":3731:3743   */\n      dup2\n      add\n        /* \"#utility.yul\":3724:3752   */\n      swap2\n      swap1\n      swap2\n      mstore\n        /* \"#utility.yul\":3777:3779   */\n      0x3c\n        /* \"#utility.yul\":3768:3780   */\n      add\n      swap1\n        /* \"#utility.yul\":3626:3786   */\n      jump\t// out\n        /* \"#utility.yul\":3791:3994   */\n    tag_24:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":3955:3987   */\n      swap2\n      swap1\n      swap2\n      and\n        /* \"#utility.yul\":3937:3988   */\n      dup2\n      mstore\n        /* \"#utility.yul\":3925:3927   */\n      0x20\n        /* \"#utility.yul\":3910:3928   */\n      add\n      swap1\n        /* \"#utility.yul\":3892:3994   */\n      jump\t// out\n        /* \"#utility.yul\":3999:4186   */\n    tag_20:\n        /* \"#utility.yul\":4164:4178   */\n      swap1\n      iszero\n        /* \"#utility.yul\":4157:4179   */\n      iszero\n        /* \"#utility.yul\":4139:4180   */\n      dup2\n      mstore\n        /* \"#utility.yul\":4127:4129   */\n      0x20\n        /* \"#utility.yul\":4112:4130   */\n      add\n      swap1\n        /* \"#utility.yul\":4094:4186   */\n      jump\t// out\n        /* \"#utility.yul\":4191:4589   */\n    tag_209:\n        /* \"#utility.yul\":4418:4443   */\n      swap4\n      dup5\n      mstore\n        /* \"#utility.yul\":4491:4495   */\n      0xff\n        /* \"#utility.yul\":4479:4496   */\n      swap3\n      swap1\n      swap3\n      and\n        /* \"#utility.yul\":4474:4476   */\n      0x20\n        /* \"#utility.yul\":4459:4477   */\n      dup5\n      add\n        /* \"#utility.yul\":4452:4497   */\n      mstore\n        /* \"#utility.yul\":4528:4530   */\n      0x40\n        /* \"#utility.yul\":4513:4531   */\n      dup4\n      add\n        /* \"#utility.yul\":4506:4540   */\n      mstore\n        /* \"#utility.yul\":4571:4573   */\n      0x60\n        /* \"#utility.yul\":4556:4574   */\n      dup3\n      add\n        /* \"#utility.yul\":4549:4583   */\n      mstore\n        /* \"#utility.yul\":4405:4408   */\n      0x80\n        /* \"#utility.yul\":4390:4409   */\n      add\n      swap1\n        /* \"#utility.yul\":4372:4589   */\n      jump\t// out\n        /* \"#utility.yul\":4594:4942   */\n    tag_169:\n        /* \"#utility.yul\":4796:4798   */\n      0x20\n        /* \"#utility.yul\":4778:4799   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":4835:4837   */\n      0x18\n        /* \"#utility.yul\":4815:4833   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":4808:4838   */\n      mstore\n        /* \"#utility.yul\":4874:4900   */\n      0x45434453413a20696e76616c6964207369676e61747572650000000000000000\n        /* \"#utility.yul\":4869:4871   */\n      0x40\n        /* \"#utility.yul\":4854:4872   */\n      dup3\n      add\n        /* \"#utility.yul\":4847:4901   */\n      mstore\n        /* \"#utility.yul\":4933:4935   */\n      0x60\n        /* \"#utility.yul\":4918:4936   */\n      add\n      swap1\n        /* \"#utility.yul\":4768:4942   */\n      jump\t// out\n        /* \"#utility.yul\":4947:5284   */\n    tag_77:\n        /* \"#utility.yul\":5149:5151   */\n      0x20\n        /* \"#utility.yul\":5131:5152   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":5188:5190   */\n      0x0d\n        /* \"#utility.yul\":5168:5186   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":5161:5191   */\n      mstore\n      shl(0x99, 0x3a34b6b2b9ba30b6b81032b939)\n        /* \"#utility.yul\":5222:5224   */\n      0x40\n        /* \"#utility.yul\":5207:5225   */\n      dup3\n      add\n        /* \"#utility.yul\":5200:5243   */\n      mstore\n        /* \"#utility.yul\":5275:5277   */\n      0x60\n        /* \"#utility.yul\":5260:5278   */\n      add\n      swap1\n        /* \"#utility.yul\":5121:5284   */\n      jump\t// out\n        /* \"#utility.yul\":5289:5644   */\n    tag_175:\n        /* \"#utility.yul\":5491:5493   */\n      0x20\n        /* \"#utility.yul\":5473:5494   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":5530:5532   */\n      0x1f\n        /* \"#utility.yul\":5510:5528   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":5503:5533   */\n      mstore\n        /* \"#utility.yul\":5569:5602   */\n      0x45434453413a20696e76616c6964207369676e6174757265206c656e67746800\n        /* \"#utility.yul\":5564:5566   */\n      0x40\n        /* \"#utility.yul\":5549:5567   */\n      dup3\n      add\n        /* \"#utility.yul\":5542:5603   */\n      mstore\n        /* \"#utility.yul\":5635:5637   */\n      0x60\n        /* \"#utility.yul\":5620:5638   */\n      add\n      swap1\n        /* \"#utility.yul\":5463:5644   */\n      jump\t// out\n        /* \"#utility.yul\":5649:6051   */\n    tag_127:\n        /* \"#utility.yul\":5851:5853   */\n      0x20\n        /* \"#utility.yul\":5833:5854   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":5890:5892   */\n      0x26\n        /* \"#utility.yul\":5870:5888   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":5863:5893   */\n      mstore\n        /* \"#utility.yul\":5929:5963   */\n      0x4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061\n        /* \"#utility.yul\":5924:5926   */\n      0x40\n        /* \"#utility.yul\":5909:5927   */\n      dup3\n      add\n        /* \"#utility.yul\":5902:5964   */\n      mstore\n      shl(0xd0, 0x646472657373)\n        /* \"#utility.yul\":5995:5997   */\n      0x60\n        /* \"#utility.yul\":5980:5998   */\n      dup3\n      add\n        /* \"#utility.yul\":5973:6009   */\n      mstore\n        /* \"#utility.yul\":6041:6044   */\n      0x80\n        /* \"#utility.yul\":6026:6045   */\n      add\n      swap1\n        /* \"#utility.yul\":5823:6051   */\n      jump\t// out\n        /* \"#utility.yul\":6056:6454   */\n    tag_181:\n        /* \"#utility.yul\":6258:6260   */\n      0x20\n        /* \"#utility.yul\":6240:6261   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":6297:6299   */\n      0x22\n        /* \"#utility.yul\":6277:6295   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":6270:6300   */\n      mstore\n        /* \"#utility.yul\":6336:6370   */\n      0x45434453413a20696e76616c6964207369676e6174757265202773272076616c\n        /* \"#utility.yul\":6331:6333   */\n      0x40\n        /* \"#utility.yul\":6316:6334   */\n      dup3\n      add\n        /* \"#utility.yul\":6309:6371   */\n      mstore\n      shl(0xf0, 0x7565)\n        /* \"#utility.yul\":6402:6404   */\n      0x60\n        /* \"#utility.yul\":6387:6405   */\n      dup3\n      add\n        /* \"#utility.yul\":6380:6412   */\n      mstore\n        /* \"#utility.yul\":6444:6447   */\n      0x80\n        /* \"#utility.yul\":6429:6448   */\n      add\n      swap1\n        /* \"#utility.yul\":6230:6454   */\n      jump\t// out\n        /* \"#utility.yul\":6459:6869   */\n    tag_106:\n        /* \"#utility.yul\":6661:6663   */\n      0x20\n        /* \"#utility.yul\":6643:6664   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":6700:6702   */\n      0x2e\n        /* \"#utility.yul\":6680:6698   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":6673:6703   */\n      mstore\n        /* \"#utility.yul\":6739:6773   */\n      0x496e697469616c697a61626c653a20636f6e747261637420697320616c726561\n        /* \"#utility.yul\":6734:6736   */\n      0x40\n        /* \"#utility.yul\":6719:6737   */\n      dup3\n      add\n        /* \"#utility.yul\":6712:6774   */\n      mstore\n      shl(0x92, 0x191e481a5b9a5d1a585b1a5e9959)\n        /* \"#utility.yul\":6805:6807   */\n      0x60\n        /* \"#utility.yul\":6790:6808   */\n      dup3\n      add\n        /* \"#utility.yul\":6783:6827   */\n      mstore\n        /* \"#utility.yul\":6859:6862   */\n      0x80\n        /* \"#utility.yul\":6844:6863   */\n      add\n      swap1\n        /* \"#utility.yul\":6633:6869   */\n      jump\t// out\n        /* \"#utility.yul\":6874:7210   */\n    tag_72:\n        /* \"#utility.yul\":7076:7078   */\n      0x20\n        /* \"#utility.yul\":7058:7079   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":7115:7117   */\n      0x0c\n        /* \"#utility.yul\":7095:7113   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":7088:7118   */\n      mstore\n      shl(0xa1, 0x32bc32b1baba37b91032b939)\n        /* \"#utility.yul\":7149:7151   */\n      0x40\n        /* \"#utility.yul\":7134:7152   */\n      dup3\n      add\n        /* \"#utility.yul\":7127:7169   */\n      mstore\n        /* \"#utility.yul\":7201:7203   */\n      0x60\n        /* \"#utility.yul\":7186:7204   */\n      add\n      swap1\n        /* \"#utility.yul\":7048:7210   */\n      jump\t// out\n        /* \"#utility.yul\":7215:7613   */\n    tag_187:\n        /* \"#utility.yul\":7417:7419   */\n      0x20\n        /* \"#utility.yul\":7399:7420   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":7456:7458   */\n      0x22\n        /* \"#utility.yul\":7436:7454   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":7429:7459   */\n      mstore\n        /* \"#utility.yul\":7495:7529   */\n      0x45434453413a20696e76616c6964207369676e6174757265202776272076616c\n        /* \"#utility.yul\":7490:7492   */\n      0x40\n        /* \"#utility.yul\":7475:7493   */\n      dup3\n      add\n        /* \"#utility.yul\":7468:7530   */\n      mstore\n      shl(0xf0, 0x7565)\n        /* \"#utility.yul\":7561:7563   */\n      0x60\n        /* \"#utility.yul\":7546:7564   */\n      dup3\n      add\n        /* \"#utility.yul\":7539:7571   */\n      mstore\n        /* \"#utility.yul\":7603:7606   */\n      0x80\n        /* \"#utility.yul\":7588:7607   */\n      add\n      swap1\n        /* \"#utility.yul\":7389:7613   */\n      jump\t// out\n        /* \"#utility.yul\":7618:7957   */\n    tag_80:\n        /* \"#utility.yul\":7820:7822   */\n      0x20\n        /* \"#utility.yul\":7802:7823   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":7859:7861   */\n      0x0f\n        /* \"#utility.yul\":7839:7857   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":7832:7862   */\n      mstore\n      shl(0x89, 0x26b0b935b2ba103737ba1037b832b7)\n        /* \"#utility.yul\":7893:7895   */\n      0x40\n        /* \"#utility.yul\":7878:7896   */\n      dup3\n      add\n        /* \"#utility.yul\":7871:7916   */\n      mstore\n        /* \"#utility.yul\":7948:7950   */\n      0x60\n        /* \"#utility.yul\":7933:7951   */\n      add\n      swap1\n        /* \"#utility.yul\":7792:7957   */\n      jump\t// out\n        /* \"#utility.yul\":7962:8318   */\n    tag_65:\n        /* \"#utility.yul\":8164:8166   */\n      0x20\n        /* \"#utility.yul\":8146:8167   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":8183:8201   */\n      dup2\n      dup2\n      add\n        /* \"#utility.yul\":8176:8206   */\n      mstore\n        /* \"#utility.yul\":8242:8276   */\n      0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572\n        /* \"#utility.yul\":8237:8239   */\n      0x40\n        /* \"#utility.yul\":8222:8240   */\n      dup3\n      add\n        /* \"#utility.yul\":8215:8277   */\n      mstore\n        /* \"#utility.yul\":8309:8311   */\n      0x60\n        /* \"#utility.yul\":8294:8312   */\n      add\n      swap1\n        /* \"#utility.yul\":8136:8318   */\n      jump\t// out\n        /* \"#utility.yul\":8323:8500   */\n    tag_47:\n        /* \"#utility.yul\":8469:8494   */\n      swap1\n      dup2\n      mstore\n        /* \"#utility.yul\":8457:8459   */\n      0x20\n        /* \"#utility.yul\":8442:8460   */\n      add\n      swap1\n        /* \"#utility.yul\":8424:8500   */\n      jump\t// out\n        /* \"#utility.yul\":8505:8733   */\n    tag_74:\n      0x00\n        /* \"#utility.yul\":8573:8574   */\n      dup3\n        /* \"#utility.yul\":8570:8571   */\n      dup3\n        /* \"#utility.yul\":8567:8575   */\n      lt\n        /* \"#utility.yul\":8564:8566   */\n      iszero\n      tag_269\n      jumpi\n      shl(0xe0, 0x4e487b71)\n        /* \"#utility.yul\":8598:8632   */\n      dup2\n      mstore\n        /* \"#utility.yul\":8655:8659   */\n      0x11\n        /* \"#utility.yul\":8652:8653   */\n      0x04\n        /* \"#utility.yul\":8645:8660   */\n      mstore\n        /* \"#utility.yul\":8686:8690   */\n      0x24\n        /* \"#utility.yul\":8605:8609   */\n      dup2\n        /* \"#utility.yul\":8673:8691   */\n      revert\n        /* \"#utility.yul\":8564:8566   */\n    tag_269:\n      pop\n        /* \"#utility.yul\":8718:8727   */\n      sub\n      swap1\n        /* \"#utility.yul\":8554:8733   */\n      jump\t// out\n        /* \"#utility.yul\":8738:8865   */\n    tag_220:\n        /* \"#utility.yul\":8799:8809   */\n      0x4e487b71\n        /* \"#utility.yul\":8794:8797   */\n      0xe0\n        /* \"#utility.yul\":8790:8810   */\n      shl\n        /* \"#utility.yul\":8787:8788   */\n      0x00\n        /* \"#utility.yul\":8780:8811   */\n      mstore\n        /* \"#utility.yul\":8830:8834   */\n      0x41\n        /* \"#utility.yul\":8827:8828   */\n      0x04\n        /* \"#utility.yul\":8820:8835   */\n      mstore\n        /* \"#utility.yul\":8854:8858   */\n      0x24\n        /* \"#utility.yul\":8851:8852   */\n      0x00\n        /* \"#utility.yul\":8844:8859   */\n      revert\n\n    auxdata: 0xa2646970667358221220e34dd53f30cb5b7bf905468027d4bad3b29dd4b8c9d146af2c0bae9092ffffcc64736f6c63430008000033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50610f0c806100206000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c8063715018a611610071578063715018a6146101255780638da5cb5b1461012f578063c08d1fe514610137578063c4d66de81461014c578063e2889c821461015f578063f2fde38b14610172576100a9565b80631e1bff3f146100ae578063238ac933146100d7578063239b93b2146100ec57806348c7e528146100ff5780636c19e78314610112575b600080fd5b6100c16100bc366004610aa4565b610185565b6040516100ce9190610c3a565b60405180910390f35b6100df6101e0565b6040516100ce9190610c26565b6100c16100fa366004610ad6565b6101ef565b6100c161010d366004610a8a565b6102c9565b6100c1610120366004610a8a565b6102de565b61012d610343565b005b6100df61038e565b61013f61039d565b6040516100ce9190610e94565b61012d61015a366004610a8a565b6103a3565b6100c161016d366004610b84565b61044d565b61012d610180366004610a8a565b610497565b600061018f610508565b6001600160a01b03166101a061038e565b6001600160a01b0316146101cf5760405162461bcd60e51b81526004016101c690610e5f565b60405180910390fd5b6101d9838361050c565b9392505050565b6065546001600160a01b031681565b3360009081526067602052604081205460ff1661021e5760405162461bcd60e51b81526004016101c690610dce565b836066544261022d9190610e9d565b1061024a5760405162461bcd60e51b81526004016101c690610c9a565b856102675760405162461bcd60e51b81526004016101c690610e36565b6000868686866040516020016102809493929190610b9c565b60405160208183030381529060405280519060200120905060006102ac6102a68361053a565b8561056a565b6065546001600160a01b0391821691161498975050505050505050565b60676020526000908152604090205460ff1681565b60006102e8610508565b6001600160a01b03166102f961038e565b6001600160a01b03161461031f5760405162461bcd60e51b81526004016101c690610e5f565b50606580546001600160a01b0319166001600160a01b03831617905560015b919050565b61034b610508565b6001600160a01b031661035c61038e565b6001600160a01b0316146103825760405162461bcd60e51b81526004016101c690610e5f565b61038c600061058e565b565b6033546001600160a01b031690565b60665481565b600054610100900460ff16806103bc575060005460ff16155b6103d85760405162461bcd60e51b81526004016101c690610d80565b600054610100900460ff16158015610403576000805460ff1961ff0019909116610100171660011790555b61040b6105e0565b61041682600161050c565b50606580546001600160a01b0319166001600160a01b038416179055603c6066558015610449576000805461ff00191690555b5050565b6000610457610508565b6001600160a01b031661046861038e565b6001600160a01b03161461048e5760405162461bcd60e51b81526004016101c690610e5f565b50606655600190565b61049f610508565b6001600160a01b03166104b061038e565b6001600160a01b0316146104d65760405162461bcd60e51b81526004016101c690610e5f565b6001600160a01b0381166104fc5760405162461bcd60e51b81526004016101c690610cf8565b6105058161058e565b50565b3390565b6001600160a01b0382166000908152606760205260409020805482151560ff19909116179055600192915050565b60008160405160200161054d9190610bf5565b604051602081830303815290604052805190602001209050919050565b60008060006105798585610664565b91509150610586816106d4565b509392505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff16806105f9575060005460ff16155b6106155760405162461bcd60e51b81526004016101c690610d80565b600054610100900460ff16158015610640576000805460ff1961ff0019909116610100171660011790555b610648610801565b610650610874565b8015610505576000805461ff001916905550565b60008082516041141561069b5760208301516040840151606085015160001a61068f878285856108e4565b945094505050506106cd565b8251604014156106c557602083015160408401516106ba8683836109c4565b9350935050506106cd565b506000905060025b9250929050565b60008160048111156106f657634e487b7160e01b600052602160045260246000fd5b141561070157610505565b600181600481111561072357634e487b7160e01b600052602160045260246000fd5b14156107415760405162461bcd60e51b81526004016101c690610c63565b600281600481111561076357634e487b7160e01b600052602160045260246000fd5b14156107815760405162461bcd60e51b81526004016101c690610cc1565b60038160048111156107a357634e487b7160e01b600052602160045260246000fd5b14156107c15760405162461bcd60e51b81526004016101c690610d3e565b60048160048111156107e357634e487b7160e01b600052602160045260246000fd5b14156105055760405162461bcd60e51b81526004016101c690610df4565b600054610100900460ff168061081a575060005460ff16155b6108365760405162461bcd60e51b81526004016101c690610d80565b600054610100900460ff16158015610650576000805460ff1961ff0019909116610100171660011790558015610505576000805461ff001916905550565b600054610100900460ff168061088d575060005460ff16155b6108a95760405162461bcd60e51b81526004016101c690610d80565b600054610100900460ff161580156108d4576000805460ff1961ff0019909116610100171660011790555b6106506108df610508565b61058e565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561091b57506000905060036109bb565b8460ff16601b1415801561093357508460ff16601c14155b1561094457506000905060046109bb565b6000600187878787604051600081526020016040526040516109699493929190610c45565b6020604051602081039080840390855afa15801561098b573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166109b4576000600192509250506109bb565b9150600090505b94509492505050565b6000806001600160ff1b03831660ff84901c601b016109e5878288856108e4565b935093505050935093915050565b600067ffffffffffffffff80841115610a0e57610a0e610ec0565b604051601f8501601f191681016020018281118282101715610a3257610a32610ec0565b604052848152915081838501861015610a4a57600080fd5b8484602083013760006020868301015250509392505050565b80356001600160a01b038116811461033e57600080fd5b8035801515811461033e57600080fd5b600060208284031215610a9b578081fd5b6101d982610a63565b60008060408385031215610ab6578081fd5b610abf83610a63565b9150610acd60208401610a7a565b90509250929050565b600080600080600060a08688031215610aed578081fd5b610af686610a7a565b94506020860135935060408601359250606086013567ffffffffffffffff80821115610b20578283fd5b818801915088601f830112610b33578283fd5b610b42898335602085016109f3565b93506080880135915080821115610b57578283fd5b508601601f81018813610b68578182fd5b610b77888235602084016109f3565b9150509295509295909350565b600060208284031215610b95578081fd5b5035919050565b600085151560f81b82528460018301528360218301528251815b81811015610bd35760208186018101516041868401015201610bb6565b81811115610be45782604183860101525b509190910160410195945050505050565b7f19457468657265756d205369676e6564204d6573736167653a0a3332000000008152601c810191909152603c0190565b6001600160a01b0391909116815260200190565b901515815260200190565b93845260ff9290921660208401526040830152606082015260800190565b60208082526018908201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604082015260600190565b6020808252600d908201526c3a34b6b2b9ba30b6b81032b93960991b604082015260600190565b6020808252601f908201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b60208082526022908201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604082015261756560f01b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252600c908201526b32bc32b1baba37b91032b93960a11b604082015260600190565b60208082526022908201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604082015261756560f01b606082015260800190565b6020808252600f908201526e26b0b935b2ba103737ba1037b832b760891b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b90815260200190565b600082821015610ebb57634e487b7160e01b81526011600452602481fd5b500390565b634e487b7160e01b600052604160045260246000fdfea2646970667358221220e34dd53f30cb5b7bf905468027d4bad3b29dd4b8c9d146af2c0bae9092ffffcc64736f6c63430008000033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF0C DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x715018A6 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x125 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x12F JUMPI DUP1 PUSH4 0xC08D1FE5 EQ PUSH2 0x137 JUMPI DUP1 PUSH4 0xC4D66DE8 EQ PUSH2 0x14C JUMPI DUP1 PUSH4 0xE2889C82 EQ PUSH2 0x15F JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x172 JUMPI PUSH2 0xA9 JUMP JUMPDEST DUP1 PUSH4 0x1E1BFF3F EQ PUSH2 0xAE JUMPI DUP1 PUSH4 0x238AC933 EQ PUSH2 0xD7 JUMPI DUP1 PUSH4 0x239B93B2 EQ PUSH2 0xEC JUMPI DUP1 PUSH4 0x48C7E528 EQ PUSH2 0xFF JUMPI DUP1 PUSH4 0x6C19E783 EQ PUSH2 0x112 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xC1 PUSH2 0xBC CALLDATASIZE PUSH1 0x4 PUSH2 0xAA4 JUMP JUMPDEST PUSH2 0x185 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xCE SWAP2 SWAP1 PUSH2 0xC3A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xDF PUSH2 0x1E0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xCE SWAP2 SWAP1 PUSH2 0xC26 JUMP JUMPDEST PUSH2 0xC1 PUSH2 0xFA CALLDATASIZE PUSH1 0x4 PUSH2 0xAD6 JUMP JUMPDEST PUSH2 0x1EF JUMP JUMPDEST PUSH2 0xC1 PUSH2 0x10D CALLDATASIZE PUSH1 0x4 PUSH2 0xA8A JUMP JUMPDEST PUSH2 0x2C9 JUMP JUMPDEST PUSH2 0xC1 PUSH2 0x120 CALLDATASIZE PUSH1 0x4 PUSH2 0xA8A JUMP JUMPDEST PUSH2 0x2DE JUMP JUMPDEST PUSH2 0x12D PUSH2 0x343 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xDF PUSH2 0x38E JUMP JUMPDEST PUSH2 0x13F PUSH2 0x39D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xCE SWAP2 SWAP1 PUSH2 0xE94 JUMP JUMPDEST PUSH2 0x12D PUSH2 0x15A CALLDATASIZE PUSH1 0x4 PUSH2 0xA8A JUMP JUMPDEST PUSH2 0x3A3 JUMP JUMPDEST PUSH2 0xC1 PUSH2 0x16D CALLDATASIZE PUSH1 0x4 PUSH2 0xB84 JUMP JUMPDEST PUSH2 0x44D JUMP JUMPDEST PUSH2 0x12D PUSH2 0x180 CALLDATASIZE PUSH1 0x4 PUSH2 0xA8A JUMP JUMPDEST PUSH2 0x497 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x18F PUSH2 0x508 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1A0 PUSH2 0x38E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1CF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1C6 SWAP1 PUSH2 0xE5F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1D9 DUP4 DUP4 PUSH2 0x50C JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x65 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x67 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x21E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1C6 SWAP1 PUSH2 0xDCE JUMP JUMPDEST DUP4 PUSH1 0x66 SLOAD TIMESTAMP PUSH2 0x22D SWAP2 SWAP1 PUSH2 0xE9D JUMP JUMPDEST LT PUSH2 0x24A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1C6 SWAP1 PUSH2 0xC9A JUMP JUMPDEST DUP6 PUSH2 0x267 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1C6 SWAP1 PUSH2 0xE36 JUMP JUMPDEST PUSH1 0x0 DUP7 DUP7 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x280 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xB9C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x0 PUSH2 0x2AC PUSH2 0x2A6 DUP4 PUSH2 0x53A JUMP JUMPDEST DUP6 PUSH2 0x56A JUMP JUMPDEST PUSH1 0x65 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND SWAP2 AND EQ SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x67 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2E8 PUSH2 0x508 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x2F9 PUSH2 0x38E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x31F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1C6 SWAP1 PUSH2 0xE5F JUMP JUMPDEST POP PUSH1 0x65 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND OR SWAP1 SSTORE PUSH1 0x1 JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x34B PUSH2 0x508 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x35C PUSH2 0x38E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x382 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1C6 SWAP1 PUSH2 0xE5F JUMP JUMPDEST PUSH2 0x38C PUSH1 0x0 PUSH2 0x58E JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x66 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND DUP1 PUSH2 0x3BC JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF AND ISZERO JUMPDEST PUSH2 0x3D8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1C6 SWAP1 PUSH2 0xD80 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 ISZERO PUSH2 0x403 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT PUSH2 0xFF00 NOT SWAP1 SWAP2 AND PUSH2 0x100 OR AND PUSH1 0x1 OR SWAP1 SSTORE JUMPDEST PUSH2 0x40B PUSH2 0x5E0 JUMP JUMPDEST PUSH2 0x416 DUP3 PUSH1 0x1 PUSH2 0x50C JUMP JUMPDEST POP PUSH1 0x65 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND OR SWAP1 SSTORE PUSH1 0x3C PUSH1 0x66 SSTORE DUP1 ISZERO PUSH2 0x449 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x457 PUSH2 0x508 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x468 PUSH2 0x38E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x48E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1C6 SWAP1 PUSH2 0xE5F JUMP JUMPDEST POP PUSH1 0x66 SSTORE PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH2 0x49F PUSH2 0x508 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x4B0 PUSH2 0x38E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x4D6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1C6 SWAP1 PUSH2 0xE5F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x4FC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1C6 SWAP1 PUSH2 0xCF8 JUMP JUMPDEST PUSH2 0x505 DUP2 PUSH2 0x58E JUMP JUMPDEST POP JUMP JUMPDEST CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x67 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP3 ISZERO ISZERO PUSH1 0xFF NOT SWAP1 SWAP2 AND OR SWAP1 SSTORE PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x54D SWAP2 SWAP1 PUSH2 0xBF5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x579 DUP6 DUP6 PUSH2 0x664 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x586 DUP2 PUSH2 0x6D4 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x33 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND DUP1 PUSH2 0x5F9 JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF AND ISZERO JUMPDEST PUSH2 0x615 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1C6 SWAP1 PUSH2 0xD80 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 ISZERO PUSH2 0x640 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT PUSH2 0xFF00 NOT SWAP1 SWAP2 AND PUSH2 0x100 OR AND PUSH1 0x1 OR SWAP1 SSTORE JUMPDEST PUSH2 0x648 PUSH2 0x801 JUMP JUMPDEST PUSH2 0x650 PUSH2 0x874 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x505 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 MLOAD PUSH1 0x41 EQ ISZERO PUSH2 0x69B JUMPI PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x40 DUP5 ADD MLOAD PUSH1 0x60 DUP6 ADD MLOAD PUSH1 0x0 BYTE PUSH2 0x68F DUP8 DUP3 DUP6 DUP6 PUSH2 0x8E4 JUMP JUMPDEST SWAP5 POP SWAP5 POP POP POP POP PUSH2 0x6CD JUMP JUMPDEST DUP3 MLOAD PUSH1 0x40 EQ ISZERO PUSH2 0x6C5 JUMPI PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x40 DUP5 ADD MLOAD PUSH2 0x6BA DUP7 DUP4 DUP4 PUSH2 0x9C4 JUMP JUMPDEST SWAP4 POP SWAP4 POP POP POP PUSH2 0x6CD JUMP JUMPDEST POP PUSH1 0x0 SWAP1 POP PUSH1 0x2 JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x6F6 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST EQ ISZERO PUSH2 0x701 JUMPI PUSH2 0x505 JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x723 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST EQ ISZERO PUSH2 0x741 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1C6 SWAP1 PUSH2 0xC63 JUMP JUMPDEST PUSH1 0x2 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x763 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST EQ ISZERO PUSH2 0x781 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1C6 SWAP1 PUSH2 0xCC1 JUMP JUMPDEST PUSH1 0x3 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x7A3 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST EQ ISZERO PUSH2 0x7C1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1C6 SWAP1 PUSH2 0xD3E JUMP JUMPDEST PUSH1 0x4 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x7E3 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST EQ ISZERO PUSH2 0x505 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1C6 SWAP1 PUSH2 0xDF4 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND DUP1 PUSH2 0x81A JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF AND ISZERO JUMPDEST PUSH2 0x836 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1C6 SWAP1 PUSH2 0xD80 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 ISZERO PUSH2 0x650 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT PUSH2 0xFF00 NOT SWAP1 SWAP2 AND PUSH2 0x100 OR AND PUSH1 0x1 OR SWAP1 SSTORE DUP1 ISZERO PUSH2 0x505 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND DUP1 PUSH2 0x88D JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF AND ISZERO JUMPDEST PUSH2 0x8A9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1C6 SWAP1 PUSH2 0xD80 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 ISZERO PUSH2 0x8D4 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT PUSH2 0xFF00 NOT SWAP1 SWAP2 AND PUSH2 0x100 OR AND PUSH1 0x1 OR SWAP1 SSTORE JUMPDEST PUSH2 0x650 PUSH2 0x8DF PUSH2 0x508 JUMP JUMPDEST PUSH2 0x58E JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 DUP4 GT ISZERO PUSH2 0x91B JUMPI POP PUSH1 0x0 SWAP1 POP PUSH1 0x3 PUSH2 0x9BB JUMP JUMPDEST DUP5 PUSH1 0xFF AND PUSH1 0x1B EQ ISZERO DUP1 ISZERO PUSH2 0x933 JUMPI POP DUP5 PUSH1 0xFF AND PUSH1 0x1C EQ ISZERO JUMPDEST ISZERO PUSH2 0x944 JUMPI POP PUSH1 0x0 SWAP1 POP PUSH1 0x4 PUSH2 0x9BB JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP8 DUP8 DUP8 DUP8 PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH2 0x969 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xC45 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x98B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH1 0x1F NOT ADD MLOAD SWAP2 POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x9B4 JUMPI PUSH1 0x0 PUSH1 0x1 SWAP3 POP SWAP3 POP POP PUSH2 0x9BB JUMP JUMPDEST SWAP2 POP PUSH1 0x0 SWAP1 POP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xFF SHL SUB DUP4 AND PUSH1 0xFF DUP5 SWAP1 SHR PUSH1 0x1B ADD PUSH2 0x9E5 DUP8 DUP3 DUP9 DUP6 PUSH2 0x8E4 JUMP JUMPDEST SWAP4 POP SWAP4 POP POP POP SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP5 GT ISZERO PUSH2 0xA0E JUMPI PUSH2 0xA0E PUSH2 0xEC0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP6 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH1 0x20 ADD DUP3 DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0xA32 JUMPI PUSH2 0xA32 PUSH2 0xEC0 JUMP JUMPDEST PUSH1 0x40 MSTORE DUP5 DUP2 MSTORE SWAP2 POP DUP2 DUP4 DUP6 ADD DUP7 LT ISZERO PUSH2 0xA4A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 DUP5 PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP7 DUP4 ADD ADD MSTORE POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x33E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x33E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xA9B JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x1D9 DUP3 PUSH2 0xA63 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xAB6 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0xABF DUP4 PUSH2 0xA63 JUMP JUMPDEST SWAP2 POP PUSH2 0xACD PUSH1 0x20 DUP5 ADD PUSH2 0xA7A JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0xAED JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0xAF6 DUP7 PUSH2 0xA7A JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xB20 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 DUP9 ADD SWAP2 POP DUP9 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xB33 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0xB42 DUP10 DUP4 CALLDATALOAD PUSH1 0x20 DUP6 ADD PUSH2 0x9F3 JUMP JUMPDEST SWAP4 POP PUSH1 0x80 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0xB57 JUMPI DUP3 DUP4 REVERT JUMPDEST POP DUP7 ADD PUSH1 0x1F DUP2 ADD DUP9 SGT PUSH2 0xB68 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0xB77 DUP9 DUP3 CALLDATALOAD PUSH1 0x20 DUP5 ADD PUSH2 0x9F3 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xB95 JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP6 ISZERO ISZERO PUSH1 0xF8 SHL DUP3 MSTORE DUP5 PUSH1 0x1 DUP4 ADD MSTORE DUP4 PUSH1 0x21 DUP4 ADD MSTORE DUP3 MLOAD DUP2 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xBD3 JUMPI PUSH1 0x20 DUP2 DUP7 ADD DUP2 ADD MLOAD PUSH1 0x41 DUP7 DUP5 ADD ADD MSTORE ADD PUSH2 0xBB6 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0xBE4 JUMPI DUP3 PUSH1 0x41 DUP4 DUP7 ADD ADD MSTORE JUMPDEST POP SWAP2 SWAP1 SWAP2 ADD PUSH1 0x41 ADD SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH32 0x19457468657265756D205369676E6564204D6573736167653A0A333200000000 DUP2 MSTORE PUSH1 0x1C DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x3C ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP4 DUP5 MSTORE PUSH1 0xFF SWAP3 SWAP1 SWAP3 AND PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x18 SWAP1 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E61747572650000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xD SWAP1 DUP3 ADD MSTORE PUSH13 0x3A34B6B2B9BA30B6B81032B939 PUSH1 0x99 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1F SWAP1 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265206C656E67746800 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x26 SWAP1 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x40 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x22 SWAP1 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265202773272076616C PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x7565 PUSH1 0xF0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2E SWAP1 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x40 DUP3 ADD MSTORE PUSH14 0x191E481A5B9A5D1A585B1A5E9959 PUSH1 0x92 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xC SWAP1 DUP3 ADD MSTORE PUSH12 0x32BC32B1BABA37B91032B939 PUSH1 0xA1 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x22 SWAP1 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265202776272076616C PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x7565 PUSH1 0xF0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xF SWAP1 DUP3 ADD MSTORE PUSH15 0x26B0B935B2BA103737BA1037B832B7 PUSH1 0x89 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0xEBB JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 DUP2 REVERT JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE3 0x4D 0xD5 EXTCODEHASH ADDRESS 0xCB JUMPDEST PUSH28 0xF905468027D4BAD3B29DD4B8C9D146AF2C0BAE9092FFFFCC64736F6C PUSH4 0x43000800 STOP CALLER ",
							"sourceMap": "436:1979:9:-:0;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:8867:10",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:10",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "90:531:10",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "100:28:10",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "110:18:10",
																"type": "",
																"value": "0xffffffffffffffff"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "104:2:10",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "155:22:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "157:16:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "157:18:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "157:18:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "143:6:10"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "151:2:10"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "140:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "140:14:10"
															},
															"nodeType": "YulIf",
															"src": "137:2:10"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "186:23:10",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "206:2:10",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "200:5:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "200:9:10"
															},
															"variables": [
																{
																	"name": "memPtr",
																	"nodeType": "YulTypedName",
																	"src": "190:6:10",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "218:73:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "244:6:10"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "length",
																								"nodeType": "YulIdentifier",
																								"src": "260:6:10"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "268:4:10",
																								"type": "",
																								"value": "0x1f"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "256:3:10"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "256:17:10"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "279:2:10",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "275:3:10"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "275:7:10"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "252:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "252:31:10"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "240:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "240:44:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "286:4:10",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "236:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "236:55:10"
															},
															"variables": [
																{
																	"name": "newFreePtr",
																	"nodeType": "YulTypedName",
																	"src": "222:10:10",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "350:22:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "352:16:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "352:18:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "352:18:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "309:10:10"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "321:2:10"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "306:2:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "306:18:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "329:10:10"
																			},
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "341:6:10"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "326:2:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "326:22:10"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "303:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "303:46:10"
															},
															"nodeType": "YulIf",
															"src": "300:2:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "388:2:10",
																		"type": "",
																		"value": "64"
																	},
																	{
																		"name": "newFreePtr",
																		"nodeType": "YulIdentifier",
																		"src": "392:10:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "381:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "381:22:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "381:22:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "412:15:10",
															"value": {
																"name": "memPtr",
																"nodeType": "YulIdentifier",
																"src": "421:6:10"
															},
															"variableNames": [
																{
																	"name": "array",
																	"nodeType": "YulIdentifier",
																	"src": "412:5:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "443:6:10"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "451:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "436:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "436:22:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "436:22:10"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "496:16:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "505:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "508:1:10",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "498:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "498:12:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "498:12:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "src",
																				"nodeType": "YulIdentifier",
																				"src": "477:3:10"
																			},
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "482:6:10"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "473:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "473:16:10"
																	},
																	{
																		"name": "end",
																		"nodeType": "YulIdentifier",
																		"src": "491:3:10"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "470:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "470:25:10"
															},
															"nodeType": "YulIf",
															"src": "467:2:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "538:6:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "546:4:10",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "534:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "534:17:10"
																	},
																	{
																		"name": "src",
																		"nodeType": "YulIdentifier",
																		"src": "553:3:10"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "558:6:10"
																	}
																],
																"functionName": {
																	"name": "calldatacopy",
																	"nodeType": "YulIdentifier",
																	"src": "521:12:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "521:44:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "521:44:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "memPtr",
																						"nodeType": "YulIdentifier",
																						"src": "589:6:10"
																					},
																					{
																						"name": "length",
																						"nodeType": "YulIdentifier",
																						"src": "597:6:10"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "585:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "585:19:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "606:4:10",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "581:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "581:30:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "613:1:10",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "574:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "574:41:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "574:41:10"
														}
													]
												},
												"name": "abi_decode_available_length_t_bytes",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "src",
														"nodeType": "YulTypedName",
														"src": "59:3:10",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "64:6:10",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "72:3:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "array",
														"nodeType": "YulTypedName",
														"src": "80:5:10",
														"type": ""
													}
												],
												"src": "14:607:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "677:124:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "687:29:10",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "709:6:10"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "696:12:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "696:20:10"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "687:5:10"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "779:16:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "788:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "791:1:10",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "781:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "781:12:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "781:12:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "738:5:10"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "749:5:10"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "764:3:10",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "769:1:10",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "760:3:10"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "760:11:10"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "773:1:10",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "756:3:10"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "756:19:10"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "745:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "745:31:10"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "735:2:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "735:42:10"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "728:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "728:50:10"
															},
															"nodeType": "YulIf",
															"src": "725:2:10"
														}
													]
												},
												"name": "abi_decode_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "656:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "667:5:10",
														"type": ""
													}
												],
												"src": "626:175:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "854:114:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "864:29:10",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "886:6:10"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "873:12:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "873:20:10"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "864:5:10"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "946:16:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "955:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "958:1:10",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "948:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "948:12:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "948:12:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "915:5:10"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "value",
																								"nodeType": "YulIdentifier",
																								"src": "936:5:10"
																							}
																						],
																						"functionName": {
																							"name": "iszero",
																							"nodeType": "YulIdentifier",
																							"src": "929:6:10"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "929:13:10"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "922:6:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "922:21:10"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "912:2:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "912:32:10"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "905:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "905:40:10"
															},
															"nodeType": "YulIf",
															"src": "902:2:10"
														}
													]
												},
												"name": "abi_decode_t_bool",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "833:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "844:5:10",
														"type": ""
													}
												],
												"src": "806:162:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1043:128:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1089:26:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "1098:6:10"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "1106:6:10"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1091:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1091:22:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1091:22:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1064:7:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1073:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1060:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1060:23:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1085:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1056:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1056:32:10"
															},
															"nodeType": "YulIf",
															"src": "1053:2:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1124:41:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1155:9:10"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "1134:20:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1134:31:10"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1124:6:10"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1009:9:10",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1020:7:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1032:6:10",
														"type": ""
													}
												],
												"src": "973:198:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1260:184:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1306:26:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value1",
																					"nodeType": "YulIdentifier",
																					"src": "1315:6:10"
																				},
																				{
																					"name": "value1",
																					"nodeType": "YulIdentifier",
																					"src": "1323:6:10"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1308:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1308:22:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1308:22:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1281:7:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1290:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1277:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1277:23:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1302:2:10",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1273:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1273:32:10"
															},
															"nodeType": "YulIf",
															"src": "1270:2:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1341:41:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1372:9:10"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "1351:20:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1351:31:10"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1341:6:10"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1391:47:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1423:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1434:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1419:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1419:18:10"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_bool",
																	"nodeType": "YulIdentifier",
																	"src": "1401:17:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1401:37:10"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "1391:6:10"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_bool",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1218:9:10",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1229:7:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1241:6:10",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1249:6:10",
														"type": ""
													}
												],
												"src": "1176:268:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1603:906:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1650:26:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value4",
																					"nodeType": "YulIdentifier",
																					"src": "1659:6:10"
																				},
																				{
																					"name": "value4",
																					"nodeType": "YulIdentifier",
																					"src": "1667:6:10"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1652:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1652:22:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1652:22:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1624:7:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1633:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1620:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1620:23:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1645:3:10",
																		"type": "",
																		"value": "160"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1616:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1616:33:10"
															},
															"nodeType": "YulIf",
															"src": "1613:2:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1685:38:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1713:9:10"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_bool",
																	"nodeType": "YulIdentifier",
																	"src": "1695:17:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1695:28:10"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1685:6:10"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1732:42:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1759:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1770:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1755:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1755:18:10"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1742:12:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1742:32:10"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "1732:6:10"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1783:42:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1810:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1821:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1806:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1806:18:10"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1793:12:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1793:32:10"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "1783:6:10"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1834:46:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1865:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1876:2:10",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1861:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1861:18:10"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1848:12:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1848:32:10"
															},
															"variables": [
																{
																	"name": "offset",
																	"nodeType": "YulTypedName",
																	"src": "1838:6:10",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1889:28:10",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "1899:18:10",
																"type": "",
																"value": "0xffffffffffffffff"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "1893:2:10",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1944:26:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value4",
																					"nodeType": "YulIdentifier",
																					"src": "1953:6:10"
																				},
																				{
																					"name": "value4",
																					"nodeType": "YulIdentifier",
																					"src": "1961:6:10"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1946:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1946:22:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1946:22:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "1932:6:10"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "1940:2:10"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "1929:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1929:14:10"
															},
															"nodeType": "YulIf",
															"src": "1926:2:10"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1979:32:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1993:9:10"
																	},
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "2004:6:10"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1989:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1989:22:10"
															},
															"variables": [
																{
																	"name": "_2",
																	"nodeType": "YulTypedName",
																	"src": "1983:2:10",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2059:26:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value4",
																					"nodeType": "YulIdentifier",
																					"src": "2068:6:10"
																				},
																				{
																					"name": "value4",
																					"nodeType": "YulIdentifier",
																					"src": "2076:6:10"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2061:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2061:22:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2061:22:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "_2",
																						"nodeType": "YulIdentifier",
																						"src": "2038:2:10"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "2042:4:10",
																						"type": "",
																						"value": "0x1f"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "2034:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2034:13:10"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2049:7:10"
																			}
																		],
																		"functionName": {
																			"name": "slt",
																			"nodeType": "YulIdentifier",
																			"src": "2030:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2030:27:10"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "2023:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2023:35:10"
															},
															"nodeType": "YulIf",
															"src": "2020:2:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2094:85:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "_2",
																				"nodeType": "YulIdentifier",
																				"src": "2144:2:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2148:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2140:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2140:11:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "_2",
																				"nodeType": "YulIdentifier",
																				"src": "2166:2:10"
																			}
																		],
																		"functionName": {
																			"name": "calldataload",
																			"nodeType": "YulIdentifier",
																			"src": "2153:12:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2153:16:10"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "2171:7:10"
																	}
																],
																"functionName": {
																	"name": "abi_decode_available_length_t_bytes",
																	"nodeType": "YulIdentifier",
																	"src": "2104:35:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2104:75:10"
															},
															"variableNames": [
																{
																	"name": "value3",
																	"nodeType": "YulIdentifier",
																	"src": "2094:6:10"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2188:49:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2221:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2232:3:10",
																				"type": "",
																				"value": "128"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2217:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2217:19:10"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2204:12:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2204:33:10"
															},
															"variables": [
																{
																	"name": "offset_1",
																	"nodeType": "YulTypedName",
																	"src": "2192:8:10",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2266:26:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value4",
																					"nodeType": "YulIdentifier",
																					"src": "2275:6:10"
																				},
																				{
																					"name": "value4",
																					"nodeType": "YulIdentifier",
																					"src": "2283:6:10"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2268:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2268:22:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2268:22:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset_1",
																		"nodeType": "YulIdentifier",
																		"src": "2252:8:10"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "2262:2:10"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "2249:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2249:16:10"
															},
															"nodeType": "YulIf",
															"src": "2246:2:10"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2301:34:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2315:9:10"
																	},
																	{
																		"name": "offset_1",
																		"nodeType": "YulIdentifier",
																		"src": "2326:8:10"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2311:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2311:24:10"
															},
															"variables": [
																{
																	"name": "_3",
																	"nodeType": "YulTypedName",
																	"src": "2305:2:10",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2383:26:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value4",
																					"nodeType": "YulIdentifier",
																					"src": "2392:6:10"
																				},
																				{
																					"name": "value4",
																					"nodeType": "YulIdentifier",
																					"src": "2400:6:10"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2385:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2385:22:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2385:22:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "_3",
																						"nodeType": "YulIdentifier",
																						"src": "2362:2:10"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "2366:4:10",
																						"type": "",
																						"value": "0x1f"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "2358:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2358:13:10"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2373:7:10"
																			}
																		],
																		"functionName": {
																			"name": "slt",
																			"nodeType": "YulIdentifier",
																			"src": "2354:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2354:27:10"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "2347:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2347:35:10"
															},
															"nodeType": "YulIf",
															"src": "2344:2:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2418:85:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "_3",
																				"nodeType": "YulIdentifier",
																				"src": "2468:2:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2472:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2464:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2464:11:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "_3",
																				"nodeType": "YulIdentifier",
																				"src": "2490:2:10"
																			}
																		],
																		"functionName": {
																			"name": "calldataload",
																			"nodeType": "YulIdentifier",
																			"src": "2477:12:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2477:16:10"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "2495:7:10"
																	}
																],
																"functionName": {
																	"name": "abi_decode_available_length_t_bytes",
																	"nodeType": "YulIdentifier",
																	"src": "2428:35:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2428:75:10"
															},
															"variableNames": [
																{
																	"name": "value4",
																	"nodeType": "YulIdentifier",
																	"src": "2418:6:10"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_boolt_uint256t_uint256t_string_memory_ptrt_bytes_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1537:9:10",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1548:7:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1560:6:10",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1568:6:10",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "1576:6:10",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "1584:6:10",
														"type": ""
													},
													{
														"name": "value4",
														"nodeType": "YulTypedName",
														"src": "1592:6:10",
														"type": ""
													}
												],
												"src": "1449:1060:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2584:120:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2630:26:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "2639:6:10"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "2647:6:10"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2632:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2632:22:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2632:22:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2605:7:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2614:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2601:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2601:23:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2626:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2597:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2597:32:10"
															},
															"nodeType": "YulIf",
															"src": "2594:2:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2665:33:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2688:9:10"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2675:12:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2675:23:10"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "2665:6:10"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2550:9:10",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2561:7:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2573:6:10",
														"type": ""
													}
												],
												"src": "2514:190:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2926:475:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "2943:3:10"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2952:3:10",
																				"type": "",
																				"value": "248"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "value0",
																								"nodeType": "YulIdentifier",
																								"src": "2971:6:10"
																							}
																						],
																						"functionName": {
																							"name": "iszero",
																							"nodeType": "YulIdentifier",
																							"src": "2964:6:10"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "2964:14:10"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "2957:6:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2957:22:10"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "2948:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2948:32:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2936:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2936:45:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2936:45:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "pos",
																				"nodeType": "YulIdentifier",
																				"src": "3001:3:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3006:1:10",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2997:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2997:11:10"
																	},
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "3010:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2990:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2990:27:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2990:27:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "pos",
																				"nodeType": "YulIdentifier",
																				"src": "3037:3:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3042:2:10",
																				"type": "",
																				"value": "33"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3033:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3033:12:10"
																	},
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "3047:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3026:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3026:28:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3026:28:10"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3063:27:10",
															"value": {
																"arguments": [
																	{
																		"name": "value3",
																		"nodeType": "YulIdentifier",
																		"src": "3083:6:10"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "3077:5:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3077:13:10"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "3067:6:10",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3099:12:10",
															"value": {
																"name": "end",
																"nodeType": "YulIdentifier",
																"src": "3108:3:10"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "3103:1:10",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3172:86:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "pos",
																									"nodeType": "YulIdentifier",
																									"src": "3201:3:10"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "3206:1:10"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "3197:3:10"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "3197:11:10"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "3210:2:10",
																							"type": "",
																							"value": "65"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "3193:3:10"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "3193:20:10"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"name": "value3",
																											"nodeType": "YulIdentifier",
																											"src": "3229:6:10"
																										},
																										{
																											"name": "i",
																											"nodeType": "YulIdentifier",
																											"src": "3237:1:10"
																										}
																									],
																									"functionName": {
																										"name": "add",
																										"nodeType": "YulIdentifier",
																										"src": "3225:3:10"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "3225:14:10"
																								},
																								{
																									"kind": "number",
																									"nodeType": "YulLiteral",
																									"src": "3241:4:10",
																									"type": "",
																									"value": "0x20"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "3221:3:10"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "3221:25:10"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "3215:5:10"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "3215:32:10"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "3186:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3186:62:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3186:62:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "3131:1:10"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "3134:6:10"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "3128:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3128:13:10"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "3142:21:10",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "3144:17:10",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "3153:1:10"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3156:4:10",
																					"type": "",
																					"value": "0x20"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "3149:3:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3149:12:10"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "3144:1:10"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "3124:3:10",
																"statements": []
															},
															"src": "3120:138:10"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3292:62:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "pos",
																									"nodeType": "YulIdentifier",
																									"src": "3321:3:10"
																								},
																								{
																									"name": "length",
																									"nodeType": "YulIdentifier",
																									"src": "3326:6:10"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "3317:3:10"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "3317:16:10"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "3335:2:10",
																							"type": "",
																							"value": "65"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "3313:3:10"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "3313:25:10"
																				},
																				{
																					"name": "end",
																					"nodeType": "YulIdentifier",
																					"src": "3340:3:10"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "3306:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3306:38:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3306:38:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "3273:1:10"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "3276:6:10"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "3270:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3270:13:10"
															},
															"nodeType": "YulIf",
															"src": "3267:2:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3363:32:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "pos",
																				"nodeType": "YulIdentifier",
																				"src": "3378:3:10"
																			},
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "3383:6:10"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3374:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3374:16:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3392:2:10",
																		"type": "",
																		"value": "65"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3370:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3370:25:10"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "3363:3:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_packed_t_bool_t_uint256_t_uint256_t_string_memory_ptr__to_t_bool_t_uint256_t_uint256_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "2878:3:10",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "2883:6:10",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "2891:6:10",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "2899:6:10",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2907:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "2918:3:10",
														"type": ""
													}
												],
												"src": "2709:692:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3626:160:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "3643:3:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3648:66:10",
																		"type": "",
																		"value": "0x19457468657265756d205369676e6564204d6573736167653a0a333200000000"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3636:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3636:79:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3636:79:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "pos",
																				"nodeType": "YulIdentifier",
																				"src": "3735:3:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3740:2:10",
																				"type": "",
																				"value": "28"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3731:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3731:12:10"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "3745:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3724:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3724:28:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3724:28:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3761:19:10",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "3772:3:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3777:2:10",
																		"type": "",
																		"value": "60"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3768:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3768:12:10"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "3761:3:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_packed_t_stringliteral_178a2411ab6fbc1ba11064408972259c558d0e82fd48b0aba3ad81d14f065e73_t_bytes32__to_t_string_memory_ptr_t_bytes32__nonPadded_inplace_fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "3602:3:10",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3607:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "3618:3:10",
														"type": ""
													}
												],
												"src": "3406:380:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3892:102:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3902:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3914:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3925:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3910:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3910:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3902:4:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3944:9:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "3959:6:10"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "3975:3:10",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "3980:1:10",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "3971:3:10"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "3971:11:10"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "3984:1:10",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "3967:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3967:19:10"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "3955:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3955:32:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3937:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3937:51:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3937:51:10"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3861:9:10",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3872:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3883:4:10",
														"type": ""
													}
												],
												"src": "3791:203:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4094:92:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4104:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4116:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4127:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4112:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4112:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4104:4:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4146:9:10"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value0",
																						"nodeType": "YulIdentifier",
																						"src": "4171:6:10"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "4164:6:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4164:14:10"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "4157:6:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4157:22:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4139:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4139:41:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4139:41:10"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4063:9:10",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4074:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4085:4:10",
														"type": ""
													}
												],
												"src": "3999:187:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4372:217:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4382:27:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4394:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4405:3:10",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4390:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4390:19:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4382:4:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4425:9:10"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "4436:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4418:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4418:25:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4418:25:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4463:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4474:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4459:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4459:18:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value1",
																				"nodeType": "YulIdentifier",
																				"src": "4483:6:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4491:4:10",
																				"type": "",
																				"value": "0xff"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "4479:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4479:17:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4452:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4452:45:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4452:45:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4517:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4528:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4513:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4513:18:10"
																	},
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "4533:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4506:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4506:34:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4506:34:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4560:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4571:2:10",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4556:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4556:18:10"
																	},
																	{
																		"name": "value3",
																		"nodeType": "YulIdentifier",
																		"src": "4576:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4549:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4549:34:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4549:34:10"
														}
													]
												},
												"name": "abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4317:9:10",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "4328:6:10",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "4336:6:10",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "4344:6:10",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4352:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4363:4:10",
														"type": ""
													}
												],
												"src": "4191:398:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4768:174:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4785:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4796:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4778:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4778:21:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4778:21:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4819:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4830:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4815:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4815:18:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4835:2:10",
																		"type": "",
																		"value": "24"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4808:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4808:30:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4808:30:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4858:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4869:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4854:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4854:18:10"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4874:26:10",
																		"type": "",
																		"value": "ECDSA: invalid signature"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4847:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4847:54:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4847:54:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4910:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4922:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4933:2:10",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4918:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4918:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4910:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4745:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4759:4:10",
														"type": ""
													}
												],
												"src": "4594:348:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5121:163:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5138:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5149:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5131:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5131:21:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5131:21:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5172:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5183:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5168:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5168:18:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5188:2:10",
																		"type": "",
																		"value": "13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5161:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5161:30:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5161:30:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5211:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5222:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5207:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5207:18:10"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5227:15:10",
																		"type": "",
																		"value": "timestamp err"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5200:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5200:43:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5200:43:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5252:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5264:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5275:2:10",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5260:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5260:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5252:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_072ebc86744005b13d5fd6240155e429628bfb1ee414c3c974c70f073ea6c132__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5098:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5112:4:10",
														"type": ""
													}
												],
												"src": "4947:337:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5463:181:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5480:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5491:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5473:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5473:21:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5473:21:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5514:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5525:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5510:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5510:18:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5530:2:10",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5503:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5503:30:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5503:30:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5553:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5564:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5549:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5549:18:10"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5569:33:10",
																		"type": "",
																		"value": "ECDSA: invalid signature length"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5542:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5542:61:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5542:61:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5612:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5624:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5635:2:10",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5620:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5620:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5612:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5440:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5454:4:10",
														"type": ""
													}
												],
												"src": "5289:355:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5823:228:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5840:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5851:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5833:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5833:21:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5833:21:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5874:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5885:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5870:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5870:18:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5890:2:10",
																		"type": "",
																		"value": "38"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5863:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5863:30:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5863:30:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5913:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5924:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5909:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5909:18:10"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5929:34:10",
																		"type": "",
																		"value": "Ownable: new owner is the zero a"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5902:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5902:62:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5902:62:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5984:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5995:2:10",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5980:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5980:18:10"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "6000:8:10",
																		"type": "",
																		"value": "ddress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5973:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5973:36:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5973:36:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6018:27:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6030:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6041:3:10",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6026:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6026:19:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6018:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5800:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5814:4:10",
														"type": ""
													}
												],
												"src": "5649:402:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6230:224:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6247:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6258:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6240:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6240:21:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6240:21:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6281:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6292:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6277:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6277:18:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6297:2:10",
																		"type": "",
																		"value": "34"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6270:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6270:30:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6270:30:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6320:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6331:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6316:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6316:18:10"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "6336:34:10",
																		"type": "",
																		"value": "ECDSA: invalid signature 's' val"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6309:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6309:62:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6309:62:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6391:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6402:2:10",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6387:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6387:18:10"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "6407:4:10",
																		"type": "",
																		"value": "ue"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6380:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6380:32:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6380:32:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6421:27:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6433:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6444:3:10",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6429:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6429:19:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6421:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6207:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "6221:4:10",
														"type": ""
													}
												],
												"src": "6056:398:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6633:236:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6650:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6661:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6643:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6643:21:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6643:21:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6684:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6695:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6680:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6680:18:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6700:2:10",
																		"type": "",
																		"value": "46"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6673:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6673:30:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6673:30:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6723:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6734:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6719:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6719:18:10"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "6739:34:10",
																		"type": "",
																		"value": "Initializable: contract is alrea"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6712:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6712:62:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6712:62:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6794:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6805:2:10",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6790:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6790:18:10"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "6810:16:10",
																		"type": "",
																		"value": "dy initialized"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6783:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6783:44:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6783:44:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6836:27:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6848:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6859:3:10",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6844:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6844:19:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6836:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6610:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "6624:4:10",
														"type": ""
													}
												],
												"src": "6459:410:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7048:162:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7065:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7076:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7058:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7058:21:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7058:21:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7099:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7110:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7095:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7095:18:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7115:2:10",
																		"type": "",
																		"value": "12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7088:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7088:30:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7088:30:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7138:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7149:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7134:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7134:18:10"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "7154:14:10",
																		"type": "",
																		"value": "executor err"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7127:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7127:42:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7127:42:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7178:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7190:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7201:2:10",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7186:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7186:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7178:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_7e80b57c31606f27bf3b71c12c012706f9d1d32402fcaa4edfe4bd032f9396bc__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "7025:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "7039:4:10",
														"type": ""
													}
												],
												"src": "6874:336:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7389:224:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7406:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7417:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7399:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7399:21:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7399:21:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7440:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7451:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7436:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7436:18:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7456:2:10",
																		"type": "",
																		"value": "34"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7429:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7429:30:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7429:30:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7479:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7490:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7475:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7475:18:10"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "7495:34:10",
																		"type": "",
																		"value": "ECDSA: invalid signature 'v' val"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7468:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7468:62:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7468:62:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7550:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7561:2:10",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7546:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7546:18:10"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "7566:4:10",
																		"type": "",
																		"value": "ue"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7539:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7539:32:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7539:32:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7580:27:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7592:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7603:3:10",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7588:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7588:19:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7580:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_8522ee1b53216f595394db8e80a64d9e7d9bd512c0811c18debe9f40858597e4__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "7366:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "7380:4:10",
														"type": ""
													}
												],
												"src": "7215:398:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7792:165:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7809:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7820:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7802:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7802:21:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7802:21:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7843:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7854:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7839:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7839:18:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7859:2:10",
																		"type": "",
																		"value": "15"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7832:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7832:30:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7832:30:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7882:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7893:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7878:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7878:18:10"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "7898:17:10",
																		"type": "",
																		"value": "Market not open"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7871:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7871:45:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7871:45:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7925:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7937:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7948:2:10",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7933:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7933:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7925:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_87a1aed8d26bb35b9266926ed414e36459129c09fe39ed45cfeb7d91a17c321d__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "7769:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "7783:4:10",
														"type": ""
													}
												],
												"src": "7618:339:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8136:182:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8153:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8164:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8146:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "8146:21:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8146:21:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8187:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8198:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8183:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8183:18:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8203:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8176:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "8176:30:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8176:30:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8226:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8237:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8222:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8222:18:10"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "8242:34:10",
																		"type": "",
																		"value": "Ownable: caller is not the owner"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8215:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "8215:62:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8215:62:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8286:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8298:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8309:2:10",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8294:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "8294:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "8286:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "8113:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "8127:4:10",
														"type": ""
													}
												],
												"src": "7962:356:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8424:76:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "8434:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8446:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8457:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8442:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "8442:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "8434:4:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8476:9:10"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "8487:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8469:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "8469:25:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8469:25:10"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "8393:9:10",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "8404:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "8415:4:10",
														"type": ""
													}
												],
												"src": "8323:177:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8554:179:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "8584:117:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "diff",
																					"nodeType": "YulIdentifier",
																					"src": "8605:4:10"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "8615:3:10",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "8620:10:10",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "8611:3:10"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "8611:20:10"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "8598:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "8598:34:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "8598:34:10"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "8652:1:10",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "8655:4:10",
																					"type": "",
																					"value": "0x11"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "8645:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "8645:15:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "8645:15:10"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "diff",
																					"nodeType": "YulIdentifier",
																					"src": "8680:4:10"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "8686:4:10",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "8673:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "8673:18:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "8673:18:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "8570:1:10"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "8573:1:10"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "8567:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "8567:8:10"
															},
															"nodeType": "YulIf",
															"src": "8564:2:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8710:17:10",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "8722:1:10"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "8725:1:10"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "8718:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "8718:9:10"
															},
															"variableNames": [
																{
																	"name": "diff",
																	"nodeType": "YulIdentifier",
																	"src": "8710:4:10"
																}
															]
														}
													]
												},
												"name": "checked_sub_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "8536:1:10",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "8539:1:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "diff",
														"nodeType": "YulTypedName",
														"src": "8545:4:10",
														"type": ""
													}
												],
												"src": "8505:228:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8770:95:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8787:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8794:3:10",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8799:10:10",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "8790:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8790:20:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8780:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "8780:31:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8780:31:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8827:1:10",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8830:4:10",
																		"type": "",
																		"value": "0x41"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8820:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "8820:15:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8820:15:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8851:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8854:4:10",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "8844:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "8844:15:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8844:15:10"
														}
													]
												},
												"name": "panic_error_0x41",
												"nodeType": "YulFunctionDefinition",
												"src": "8738:127:10"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_decode_available_length_t_bytes(src, length, end) -> array\n    {\n        let _1 := 0xffffffffffffffff\n        if gt(length, _1) { panic_error_0x41() }\n        let memPtr := mload(64)\n        let newFreePtr := add(add(memPtr, and(add(length, 0x1f), not(31))), 0x20)\n        if or(gt(newFreePtr, _1), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        array := memPtr\n        mstore(memPtr, length)\n        if gt(add(src, length), end) { revert(0, 0) }\n        calldatacopy(add(memPtr, 0x20), src, length)\n        mstore(add(add(memPtr, length), 0x20), 0)\n    }\n    function abi_decode_t_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_t_bool(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := abi_decode_t_address(headStart)\n    }\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value1, value1) }\n        value0 := abi_decode_t_address(headStart)\n        value1 := abi_decode_t_bool(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_boolt_uint256t_uint256t_string_memory_ptrt_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(value4, value4) }\n        value0 := abi_decode_t_bool(headStart)\n        value1 := calldataload(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        let offset := calldataload(add(headStart, 96))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(value4, value4) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(value4, value4) }\n        value3 := abi_decode_available_length_t_bytes(add(_2, 32), calldataload(_2), dataEnd)\n        let offset_1 := calldataload(add(headStart, 128))\n        if gt(offset_1, _1) { revert(value4, value4) }\n        let _3 := add(headStart, offset_1)\n        if iszero(slt(add(_3, 0x1f), dataEnd)) { revert(value4, value4) }\n        value4 := abi_decode_available_length_t_bytes(add(_3, 32), calldataload(_3), dataEnd)\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_packed_t_bool_t_uint256_t_uint256_t_string_memory_ptr__to_t_bool_t_uint256_t_uint256_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value3, value2, value1, value0) -> end\n    {\n        mstore(pos, shl(248, iszero(iszero(value0))))\n        mstore(add(pos, 1), value1)\n        mstore(add(pos, 33), value2)\n        let length := mload(value3)\n        let i := end\n        for { } lt(i, length) { i := add(i, 0x20) }\n        {\n            mstore(add(add(pos, i), 65), mload(add(add(value3, i), 0x20)))\n        }\n        if gt(i, length)\n        {\n            mstore(add(add(pos, length), 65), end)\n        }\n        end := add(add(pos, length), 65)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_178a2411ab6fbc1ba11064408972259c558d0e82fd48b0aba3ad81d14f065e73_t_bytes32__to_t_string_memory_ptr_t_bytes32__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        mstore(pos, 0x19457468657265756d205369676e6564204d6573736167653a0a333200000000)\n        mstore(add(pos, 28), value0)\n        end := add(pos, 60)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, 0xff))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n    }\n    function abi_encode_tuple_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 24)\n        mstore(add(headStart, 64), \"ECDSA: invalid signature\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_072ebc86744005b13d5fd6240155e429628bfb1ee414c3c974c70f073ea6c132__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 13)\n        mstore(add(headStart, 64), \"timestamp err\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 31)\n        mstore(add(headStart, 64), \"ECDSA: invalid signature length\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Ownable: new owner is the zero a\")\n        mstore(add(headStart, 96), \"ddress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"ECDSA: invalid signature 's' val\")\n        mstore(add(headStart, 96), \"ue\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 46)\n        mstore(add(headStart, 64), \"Initializable: contract is alrea\")\n        mstore(add(headStart, 96), \"dy initialized\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_7e80b57c31606f27bf3b71c12c012706f9d1d32402fcaa4edfe4bd032f9396bc__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 12)\n        mstore(add(headStart, 64), \"executor err\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_8522ee1b53216f595394db8e80a64d9e7d9bd512c0811c18debe9f40858597e4__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"ECDSA: invalid signature 'v' val\")\n        mstore(add(headStart, 96), \"ue\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_87a1aed8d26bb35b9266926ed414e36459129c09fe39ed45cfeb7d91a17c321d__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 15)\n        mstore(add(headStart, 64), \"Market not open\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Ownable: caller is not the owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        if lt(x, y)\n        {\n            mstore(diff, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(diff, 0x24)\n        }\n        diff := sub(x, y)\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n}",
									"id": 10,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50600436106100a95760003560e01c8063715018a611610071578063715018a6146101255780638da5cb5b1461012f578063c08d1fe514610137578063c4d66de81461014c578063e2889c821461015f578063f2fde38b14610172576100a9565b80631e1bff3f146100ae578063238ac933146100d7578063239b93b2146100ec57806348c7e528146100ff5780636c19e78314610112575b600080fd5b6100c16100bc366004610aa4565b610185565b6040516100ce9190610c3a565b60405180910390f35b6100df6101e0565b6040516100ce9190610c26565b6100c16100fa366004610ad6565b6101ef565b6100c161010d366004610a8a565b6102c9565b6100c1610120366004610a8a565b6102de565b61012d610343565b005b6100df61038e565b61013f61039d565b6040516100ce9190610e94565b61012d61015a366004610a8a565b6103a3565b6100c161016d366004610b84565b61044d565b61012d610180366004610a8a565b610497565b600061018f610508565b6001600160a01b03166101a061038e565b6001600160a01b0316146101cf5760405162461bcd60e51b81526004016101c690610e5f565b60405180910390fd5b6101d9838361050c565b9392505050565b6065546001600160a01b031681565b3360009081526067602052604081205460ff1661021e5760405162461bcd60e51b81526004016101c690610dce565b836066544261022d9190610e9d565b1061024a5760405162461bcd60e51b81526004016101c690610c9a565b856102675760405162461bcd60e51b81526004016101c690610e36565b6000868686866040516020016102809493929190610b9c565b60405160208183030381529060405280519060200120905060006102ac6102a68361053a565b8561056a565b6065546001600160a01b0391821691161498975050505050505050565b60676020526000908152604090205460ff1681565b60006102e8610508565b6001600160a01b03166102f961038e565b6001600160a01b03161461031f5760405162461bcd60e51b81526004016101c690610e5f565b50606580546001600160a01b0319166001600160a01b03831617905560015b919050565b61034b610508565b6001600160a01b031661035c61038e565b6001600160a01b0316146103825760405162461bcd60e51b81526004016101c690610e5f565b61038c600061058e565b565b6033546001600160a01b031690565b60665481565b600054610100900460ff16806103bc575060005460ff16155b6103d85760405162461bcd60e51b81526004016101c690610d80565b600054610100900460ff16158015610403576000805460ff1961ff0019909116610100171660011790555b61040b6105e0565b61041682600161050c565b50606580546001600160a01b0319166001600160a01b038416179055603c6066558015610449576000805461ff00191690555b5050565b6000610457610508565b6001600160a01b031661046861038e565b6001600160a01b03161461048e5760405162461bcd60e51b81526004016101c690610e5f565b50606655600190565b61049f610508565b6001600160a01b03166104b061038e565b6001600160a01b0316146104d65760405162461bcd60e51b81526004016101c690610e5f565b6001600160a01b0381166104fc5760405162461bcd60e51b81526004016101c690610cf8565b6105058161058e565b50565b3390565b6001600160a01b0382166000908152606760205260409020805482151560ff19909116179055600192915050565b60008160405160200161054d9190610bf5565b604051602081830303815290604052805190602001209050919050565b60008060006105798585610664565b91509150610586816106d4565b509392505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff16806105f9575060005460ff16155b6106155760405162461bcd60e51b81526004016101c690610d80565b600054610100900460ff16158015610640576000805460ff1961ff0019909116610100171660011790555b610648610801565b610650610874565b8015610505576000805461ff001916905550565b60008082516041141561069b5760208301516040840151606085015160001a61068f878285856108e4565b945094505050506106cd565b8251604014156106c557602083015160408401516106ba8683836109c4565b9350935050506106cd565b506000905060025b9250929050565b60008160048111156106f657634e487b7160e01b600052602160045260246000fd5b141561070157610505565b600181600481111561072357634e487b7160e01b600052602160045260246000fd5b14156107415760405162461bcd60e51b81526004016101c690610c63565b600281600481111561076357634e487b7160e01b600052602160045260246000fd5b14156107815760405162461bcd60e51b81526004016101c690610cc1565b60038160048111156107a357634e487b7160e01b600052602160045260246000fd5b14156107c15760405162461bcd60e51b81526004016101c690610d3e565b60048160048111156107e357634e487b7160e01b600052602160045260246000fd5b14156105055760405162461bcd60e51b81526004016101c690610df4565b600054610100900460ff168061081a575060005460ff16155b6108365760405162461bcd60e51b81526004016101c690610d80565b600054610100900460ff16158015610650576000805460ff1961ff0019909116610100171660011790558015610505576000805461ff001916905550565b600054610100900460ff168061088d575060005460ff16155b6108a95760405162461bcd60e51b81526004016101c690610d80565b600054610100900460ff161580156108d4576000805460ff1961ff0019909116610100171660011790555b6106506108df610508565b61058e565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561091b57506000905060036109bb565b8460ff16601b1415801561093357508460ff16601c14155b1561094457506000905060046109bb565b6000600187878787604051600081526020016040526040516109699493929190610c45565b6020604051602081039080840390855afa15801561098b573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166109b4576000600192509250506109bb565b9150600090505b94509492505050565b6000806001600160ff1b03831660ff84901c601b016109e5878288856108e4565b935093505050935093915050565b600067ffffffffffffffff80841115610a0e57610a0e610ec0565b604051601f8501601f191681016020018281118282101715610a3257610a32610ec0565b604052848152915081838501861015610a4a57600080fd5b8484602083013760006020868301015250509392505050565b80356001600160a01b038116811461033e57600080fd5b8035801515811461033e57600080fd5b600060208284031215610a9b578081fd5b6101d982610a63565b60008060408385031215610ab6578081fd5b610abf83610a63565b9150610acd60208401610a7a565b90509250929050565b600080600080600060a08688031215610aed578081fd5b610af686610a7a565b94506020860135935060408601359250606086013567ffffffffffffffff80821115610b20578283fd5b818801915088601f830112610b33578283fd5b610b42898335602085016109f3565b93506080880135915080821115610b57578283fd5b508601601f81018813610b68578182fd5b610b77888235602084016109f3565b9150509295509295909350565b600060208284031215610b95578081fd5b5035919050565b600085151560f81b82528460018301528360218301528251815b81811015610bd35760208186018101516041868401015201610bb6565b81811115610be45782604183860101525b509190910160410195945050505050565b7f19457468657265756d205369676e6564204d6573736167653a0a3332000000008152601c810191909152603c0190565b6001600160a01b0391909116815260200190565b901515815260200190565b93845260ff9290921660208401526040830152606082015260800190565b60208082526018908201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604082015260600190565b6020808252600d908201526c3a34b6b2b9ba30b6b81032b93960991b604082015260600190565b6020808252601f908201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b60208082526022908201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604082015261756560f01b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252600c908201526b32bc32b1baba37b91032b93960a11b604082015260600190565b60208082526022908201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604082015261756560f01b606082015260800190565b6020808252600f908201526e26b0b935b2ba103737ba1037b832b760891b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b90815260200190565b600082821015610ebb57634e487b7160e01b81526011600452602481fd5b500390565b634e487b7160e01b600052604160045260246000fdfea2646970667358221220e34dd53f30cb5b7bf905468027d4bad3b29dd4b8c9d146af2c0bae9092ffffcc64736f6c63430008000033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x715018A6 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x125 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x12F JUMPI DUP1 PUSH4 0xC08D1FE5 EQ PUSH2 0x137 JUMPI DUP1 PUSH4 0xC4D66DE8 EQ PUSH2 0x14C JUMPI DUP1 PUSH4 0xE2889C82 EQ PUSH2 0x15F JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x172 JUMPI PUSH2 0xA9 JUMP JUMPDEST DUP1 PUSH4 0x1E1BFF3F EQ PUSH2 0xAE JUMPI DUP1 PUSH4 0x238AC933 EQ PUSH2 0xD7 JUMPI DUP1 PUSH4 0x239B93B2 EQ PUSH2 0xEC JUMPI DUP1 PUSH4 0x48C7E528 EQ PUSH2 0xFF JUMPI DUP1 PUSH4 0x6C19E783 EQ PUSH2 0x112 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xC1 PUSH2 0xBC CALLDATASIZE PUSH1 0x4 PUSH2 0xAA4 JUMP JUMPDEST PUSH2 0x185 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xCE SWAP2 SWAP1 PUSH2 0xC3A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xDF PUSH2 0x1E0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xCE SWAP2 SWAP1 PUSH2 0xC26 JUMP JUMPDEST PUSH2 0xC1 PUSH2 0xFA CALLDATASIZE PUSH1 0x4 PUSH2 0xAD6 JUMP JUMPDEST PUSH2 0x1EF JUMP JUMPDEST PUSH2 0xC1 PUSH2 0x10D CALLDATASIZE PUSH1 0x4 PUSH2 0xA8A JUMP JUMPDEST PUSH2 0x2C9 JUMP JUMPDEST PUSH2 0xC1 PUSH2 0x120 CALLDATASIZE PUSH1 0x4 PUSH2 0xA8A JUMP JUMPDEST PUSH2 0x2DE JUMP JUMPDEST PUSH2 0x12D PUSH2 0x343 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xDF PUSH2 0x38E JUMP JUMPDEST PUSH2 0x13F PUSH2 0x39D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xCE SWAP2 SWAP1 PUSH2 0xE94 JUMP JUMPDEST PUSH2 0x12D PUSH2 0x15A CALLDATASIZE PUSH1 0x4 PUSH2 0xA8A JUMP JUMPDEST PUSH2 0x3A3 JUMP JUMPDEST PUSH2 0xC1 PUSH2 0x16D CALLDATASIZE PUSH1 0x4 PUSH2 0xB84 JUMP JUMPDEST PUSH2 0x44D JUMP JUMPDEST PUSH2 0x12D PUSH2 0x180 CALLDATASIZE PUSH1 0x4 PUSH2 0xA8A JUMP JUMPDEST PUSH2 0x497 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x18F PUSH2 0x508 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1A0 PUSH2 0x38E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1CF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1C6 SWAP1 PUSH2 0xE5F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1D9 DUP4 DUP4 PUSH2 0x50C JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x65 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x67 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x21E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1C6 SWAP1 PUSH2 0xDCE JUMP JUMPDEST DUP4 PUSH1 0x66 SLOAD TIMESTAMP PUSH2 0x22D SWAP2 SWAP1 PUSH2 0xE9D JUMP JUMPDEST LT PUSH2 0x24A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1C6 SWAP1 PUSH2 0xC9A JUMP JUMPDEST DUP6 PUSH2 0x267 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1C6 SWAP1 PUSH2 0xE36 JUMP JUMPDEST PUSH1 0x0 DUP7 DUP7 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x280 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xB9C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x0 PUSH2 0x2AC PUSH2 0x2A6 DUP4 PUSH2 0x53A JUMP JUMPDEST DUP6 PUSH2 0x56A JUMP JUMPDEST PUSH1 0x65 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND SWAP2 AND EQ SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x67 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2E8 PUSH2 0x508 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x2F9 PUSH2 0x38E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x31F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1C6 SWAP1 PUSH2 0xE5F JUMP JUMPDEST POP PUSH1 0x65 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND OR SWAP1 SSTORE PUSH1 0x1 JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x34B PUSH2 0x508 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x35C PUSH2 0x38E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x382 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1C6 SWAP1 PUSH2 0xE5F JUMP JUMPDEST PUSH2 0x38C PUSH1 0x0 PUSH2 0x58E JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x66 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND DUP1 PUSH2 0x3BC JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF AND ISZERO JUMPDEST PUSH2 0x3D8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1C6 SWAP1 PUSH2 0xD80 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 ISZERO PUSH2 0x403 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT PUSH2 0xFF00 NOT SWAP1 SWAP2 AND PUSH2 0x100 OR AND PUSH1 0x1 OR SWAP1 SSTORE JUMPDEST PUSH2 0x40B PUSH2 0x5E0 JUMP JUMPDEST PUSH2 0x416 DUP3 PUSH1 0x1 PUSH2 0x50C JUMP JUMPDEST POP PUSH1 0x65 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND OR SWAP1 SSTORE PUSH1 0x3C PUSH1 0x66 SSTORE DUP1 ISZERO PUSH2 0x449 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x457 PUSH2 0x508 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x468 PUSH2 0x38E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x48E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1C6 SWAP1 PUSH2 0xE5F JUMP JUMPDEST POP PUSH1 0x66 SSTORE PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH2 0x49F PUSH2 0x508 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x4B0 PUSH2 0x38E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x4D6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1C6 SWAP1 PUSH2 0xE5F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x4FC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1C6 SWAP1 PUSH2 0xCF8 JUMP JUMPDEST PUSH2 0x505 DUP2 PUSH2 0x58E JUMP JUMPDEST POP JUMP JUMPDEST CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x67 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP3 ISZERO ISZERO PUSH1 0xFF NOT SWAP1 SWAP2 AND OR SWAP1 SSTORE PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x54D SWAP2 SWAP1 PUSH2 0xBF5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x579 DUP6 DUP6 PUSH2 0x664 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x586 DUP2 PUSH2 0x6D4 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x33 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND DUP1 PUSH2 0x5F9 JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF AND ISZERO JUMPDEST PUSH2 0x615 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1C6 SWAP1 PUSH2 0xD80 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 ISZERO PUSH2 0x640 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT PUSH2 0xFF00 NOT SWAP1 SWAP2 AND PUSH2 0x100 OR AND PUSH1 0x1 OR SWAP1 SSTORE JUMPDEST PUSH2 0x648 PUSH2 0x801 JUMP JUMPDEST PUSH2 0x650 PUSH2 0x874 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x505 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 MLOAD PUSH1 0x41 EQ ISZERO PUSH2 0x69B JUMPI PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x40 DUP5 ADD MLOAD PUSH1 0x60 DUP6 ADD MLOAD PUSH1 0x0 BYTE PUSH2 0x68F DUP8 DUP3 DUP6 DUP6 PUSH2 0x8E4 JUMP JUMPDEST SWAP5 POP SWAP5 POP POP POP POP PUSH2 0x6CD JUMP JUMPDEST DUP3 MLOAD PUSH1 0x40 EQ ISZERO PUSH2 0x6C5 JUMPI PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x40 DUP5 ADD MLOAD PUSH2 0x6BA DUP7 DUP4 DUP4 PUSH2 0x9C4 JUMP JUMPDEST SWAP4 POP SWAP4 POP POP POP PUSH2 0x6CD JUMP JUMPDEST POP PUSH1 0x0 SWAP1 POP PUSH1 0x2 JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x6F6 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST EQ ISZERO PUSH2 0x701 JUMPI PUSH2 0x505 JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x723 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST EQ ISZERO PUSH2 0x741 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1C6 SWAP1 PUSH2 0xC63 JUMP JUMPDEST PUSH1 0x2 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x763 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST EQ ISZERO PUSH2 0x781 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1C6 SWAP1 PUSH2 0xCC1 JUMP JUMPDEST PUSH1 0x3 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x7A3 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST EQ ISZERO PUSH2 0x7C1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1C6 SWAP1 PUSH2 0xD3E JUMP JUMPDEST PUSH1 0x4 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x7E3 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST EQ ISZERO PUSH2 0x505 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1C6 SWAP1 PUSH2 0xDF4 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND DUP1 PUSH2 0x81A JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF AND ISZERO JUMPDEST PUSH2 0x836 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1C6 SWAP1 PUSH2 0xD80 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 ISZERO PUSH2 0x650 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT PUSH2 0xFF00 NOT SWAP1 SWAP2 AND PUSH2 0x100 OR AND PUSH1 0x1 OR SWAP1 SSTORE DUP1 ISZERO PUSH2 0x505 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND DUP1 PUSH2 0x88D JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF AND ISZERO JUMPDEST PUSH2 0x8A9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1C6 SWAP1 PUSH2 0xD80 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 ISZERO PUSH2 0x8D4 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT PUSH2 0xFF00 NOT SWAP1 SWAP2 AND PUSH2 0x100 OR AND PUSH1 0x1 OR SWAP1 SSTORE JUMPDEST PUSH2 0x650 PUSH2 0x8DF PUSH2 0x508 JUMP JUMPDEST PUSH2 0x58E JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 DUP4 GT ISZERO PUSH2 0x91B JUMPI POP PUSH1 0x0 SWAP1 POP PUSH1 0x3 PUSH2 0x9BB JUMP JUMPDEST DUP5 PUSH1 0xFF AND PUSH1 0x1B EQ ISZERO DUP1 ISZERO PUSH2 0x933 JUMPI POP DUP5 PUSH1 0xFF AND PUSH1 0x1C EQ ISZERO JUMPDEST ISZERO PUSH2 0x944 JUMPI POP PUSH1 0x0 SWAP1 POP PUSH1 0x4 PUSH2 0x9BB JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP8 DUP8 DUP8 DUP8 PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH2 0x969 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xC45 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x98B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH1 0x1F NOT ADD MLOAD SWAP2 POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x9B4 JUMPI PUSH1 0x0 PUSH1 0x1 SWAP3 POP SWAP3 POP POP PUSH2 0x9BB JUMP JUMPDEST SWAP2 POP PUSH1 0x0 SWAP1 POP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xFF SHL SUB DUP4 AND PUSH1 0xFF DUP5 SWAP1 SHR PUSH1 0x1B ADD PUSH2 0x9E5 DUP8 DUP3 DUP9 DUP6 PUSH2 0x8E4 JUMP JUMPDEST SWAP4 POP SWAP4 POP POP POP SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP5 GT ISZERO PUSH2 0xA0E JUMPI PUSH2 0xA0E PUSH2 0xEC0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP6 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH1 0x20 ADD DUP3 DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0xA32 JUMPI PUSH2 0xA32 PUSH2 0xEC0 JUMP JUMPDEST PUSH1 0x40 MSTORE DUP5 DUP2 MSTORE SWAP2 POP DUP2 DUP4 DUP6 ADD DUP7 LT ISZERO PUSH2 0xA4A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 DUP5 PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP7 DUP4 ADD ADD MSTORE POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x33E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x33E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xA9B JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x1D9 DUP3 PUSH2 0xA63 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xAB6 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0xABF DUP4 PUSH2 0xA63 JUMP JUMPDEST SWAP2 POP PUSH2 0xACD PUSH1 0x20 DUP5 ADD PUSH2 0xA7A JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0xAED JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0xAF6 DUP7 PUSH2 0xA7A JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xB20 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 DUP9 ADD SWAP2 POP DUP9 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xB33 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0xB42 DUP10 DUP4 CALLDATALOAD PUSH1 0x20 DUP6 ADD PUSH2 0x9F3 JUMP JUMPDEST SWAP4 POP PUSH1 0x80 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0xB57 JUMPI DUP3 DUP4 REVERT JUMPDEST POP DUP7 ADD PUSH1 0x1F DUP2 ADD DUP9 SGT PUSH2 0xB68 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0xB77 DUP9 DUP3 CALLDATALOAD PUSH1 0x20 DUP5 ADD PUSH2 0x9F3 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xB95 JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP6 ISZERO ISZERO PUSH1 0xF8 SHL DUP3 MSTORE DUP5 PUSH1 0x1 DUP4 ADD MSTORE DUP4 PUSH1 0x21 DUP4 ADD MSTORE DUP3 MLOAD DUP2 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xBD3 JUMPI PUSH1 0x20 DUP2 DUP7 ADD DUP2 ADD MLOAD PUSH1 0x41 DUP7 DUP5 ADD ADD MSTORE ADD PUSH2 0xBB6 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0xBE4 JUMPI DUP3 PUSH1 0x41 DUP4 DUP7 ADD ADD MSTORE JUMPDEST POP SWAP2 SWAP1 SWAP2 ADD PUSH1 0x41 ADD SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH32 0x19457468657265756D205369676E6564204D6573736167653A0A333200000000 DUP2 MSTORE PUSH1 0x1C DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x3C ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP4 DUP5 MSTORE PUSH1 0xFF SWAP3 SWAP1 SWAP3 AND PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x18 SWAP1 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E61747572650000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xD SWAP1 DUP3 ADD MSTORE PUSH13 0x3A34B6B2B9BA30B6B81032B939 PUSH1 0x99 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1F SWAP1 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265206C656E67746800 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x26 SWAP1 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x40 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x22 SWAP1 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265202773272076616C PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x7565 PUSH1 0xF0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2E SWAP1 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x40 DUP3 ADD MSTORE PUSH14 0x191E481A5B9A5D1A585B1A5E9959 PUSH1 0x92 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xC SWAP1 DUP3 ADD MSTORE PUSH12 0x32BC32B1BABA37B91032B939 PUSH1 0xA1 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x22 SWAP1 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265202776272076616C PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x7565 PUSH1 0xF0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xF SWAP1 DUP3 ADD MSTORE PUSH15 0x26B0B935B2BA103737BA1037B832B7 PUSH1 0x89 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0xEBB JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 DUP2 REVERT JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE3 0x4D 0xD5 EXTCODEHASH ADDRESS 0xCB JUMPDEST PUSH28 0xF905468027D4BAD3B29DD4B8C9D146AF2C0BAE9092FFFFCC64736F6C PUSH4 0x43000800 STOP CALLER ",
							"sourceMap": "436:1979:9:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1024:166;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;557:21;;;:::i;:::-;;;;;;;:::i;1751:662::-;;;;;;:::i;:::-;;:::i;629:40::-;;;;;;:::i;:::-;;:::i;1619:126::-;;;;;;:::i;:::-;;:::i;1934:101:0:-;;;:::i;:::-;;1302:85;;;:::i;584:24:9:-;;;:::i;:::-;;;;;;;:::i;840:178::-;;;;;;:::i;:::-;;:::i;1489:124::-;;;;;;:::i;:::-;;:::i;2184:198:0:-;;;;;;:::i;:::-;;:::i;1024:166:9:-;1127:4;1525:12:0;:10;:12::i;:::-;-1:-1:-1;;;;;1514:23:0;:7;:5;:7::i;:::-;-1:-1:-1;;;;;1514:23:0;;1506:68;;;;-1:-1:-1;;;1506:68:0;;;;;;;:::i;:::-;;;;;;;;;1154:29:9::1;1167:8;1177:5;1154:12;:29::i;:::-;1147:36:::0;1024:166;-1:-1:-1;;;1024:166:9:o;557:21::-;;;-1:-1:-1;;;;;557:21:9;;:::o;1751:662::-;1973:10;1940:4;1964:20;;;:8;:20;;;;;;;;1956:45;;;;-1:-1:-1;;;1956:45:9;;;;;;;:::i;:::-;2049:10;2037:9;;2019:15;:27;;;;:::i;:::-;:40;2011:66;;;;-1:-1:-1;;;2011:66:9;;;;;;;:::i;:::-;2095:12;2087:40;;;;-1:-1:-1;;;2087:40:9;;;;;;;:::i;:::-;2137:12;2192;2206:8;2216:10;2228:8;2175:62;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;2152:95;;;;;;2137:110;;2257:15;2275:95;2302:34;2331:4;2302:28;:34::i;:::-;2350:10;2275:13;:95::i;:::-;2388:6;;-1:-1:-1;;;;;2388:17:9;;;:6;;:17;;1751:662;-1:-1:-1;;;;;;;;1751:662:9:o;629:40::-;;;;;;;;;;;;;;;:::o;1619:126::-;1684:4;1525:12:0;:10;:12::i;:::-;-1:-1:-1;;;;;1514:23:0;:7;:5;:7::i;:::-;-1:-1:-1;;;;;1514:23:0;;1506:68;;;;-1:-1:-1;;;1506:68:0;;;;;;;:::i;:::-;-1:-1:-1;1700:6:9::1;:17:::0;;-1:-1:-1;;;;;;1700:17:9::1;-1:-1:-1::0;;;;;1700:17:9;::::1;;::::0;;-1:-1:-1;1584:1:0::1;1619:126:9::0;;;:::o;1934:101:0:-;1525:12;:10;:12::i;:::-;-1:-1:-1;;;;;1514:23:0;:7;:5;:7::i;:::-;-1:-1:-1;;;;;1514:23:0;;1506:68;;;;-1:-1:-1;;;1506:68:0;;;;;;;:::i;:::-;1998:30:::1;2025:1;1998:18;:30::i;:::-;1934:101::o:0;1302:85::-;1374:6;;-1:-1:-1;;;;;1374:6:0;1302:85;:::o;584:24:9:-;;;;:::o;840:178::-;539:13:1;;;;;;;;:30;;-1:-1:-1;557:12:1;;;;556:13;539:30;531:89;;;;-1:-1:-1;;;531:89:1;;;;;;;:::i;:::-;631:19;654:13;;;;;;653:14;677:98;;;;711:13;:20;;-1:-1:-1;;;;711:20:1;;;;;745:19;727:4;745:19;;;677:98;908:16:9::1;:14;:16::i;:::-;934:27;947:7;956:4;934:12;:27::i;:::-;-1:-1:-1::0;971:6:9::1;:16:::0;;-1:-1:-1;;;;;;971:16:9::1;-1:-1:-1::0;;;;;971:16:9;::::1;;::::0;;1009:2:::1;997:9;:14:::0;797:66:1;;;;847:5;831:21;;-1:-1:-1;;831:21:1;;;797:66;840:178:9;;:::o;1489:124::-;1553:4;1525:12:0;:10;:12::i;:::-;-1:-1:-1;;;;;1514:23:0;:7;:5;:7::i;:::-;-1:-1:-1;;;;;1514:23:0;;1506:68;;;;-1:-1:-1;;;1506:68:0;;;;;;;:::i;:::-;-1:-1:-1;1569:9:9::1;:16:::0;1602:4:::1;::::0;1489:124::o;2184:198:0:-;1525:12;:10;:12::i;:::-;-1:-1:-1;;;;;1514:23:0;:7;:5;:7::i;:::-;-1:-1:-1;;;;;1514:23:0;;1506:68;;;;-1:-1:-1;;;1506:68:0;;;;;;;:::i;:::-;-1:-1:-1;;;;;2272:22:0;::::1;2264:73;;;;-1:-1:-1::0;;;2264:73:0::1;;;;;;;:::i;:::-;2347:28;2366:8;2347:18;:28::i;:::-;2184:198:::0;:::o;876:96:2:-;955:10;876:96;:::o;1196:160:9:-;-1:-1:-1;;;;;1302:18:9;;1282:4;1302:18;;;:8;:18;;;;;:26;;;;;-1:-1:-1;;1302:26:9;;;;;;;1196:160;;;;:::o;8040:265:6:-;8109:7;8292:4;8239:58;;;;;;;;:::i;:::-;;;;;;;;;;;;;8229:69;;;;;;8222:76;;8040:265;;;:::o;4293:227::-;4371:7;4391:17;4410:18;4432:27;4443:4;4449:9;4432:10;:27::i;:::-;4390:69;;;;4469:18;4481:5;4469:11;:18::i;:::-;-1:-1:-1;4504:9:6;4293:227;-1:-1:-1;;;4293:227:6:o;2536:187:0:-;2628:6;;;-1:-1:-1;;;;;2644:17:0;;;-1:-1:-1;;;;;;2644:17:0;;;;;;;2676:40;;2628:6;;;2644:17;2628:6;;2676:40;;2609:16;;2676:40;2536:187;;:::o;988:126::-;539:13:1;;;;;;;;:30;;-1:-1:-1;557:12:1;;;;556:13;539:30;531:89;;;;-1:-1:-1;;;531:89:1;;;;;;;:::i;:::-;631:19;654:13;;;;;;653:14;677:98;;;;711:13;:20;;-1:-1:-1;;;;711:20:1;;;;;745:19;727:4;745:19;;;677:98;1045:26:0::1;:24;:26::i;:::-;1081;:24;:26::i;:::-;801:14:1::0;797:66;;;847:5;831:21;;-1:-1:-1;;831:21:1;;;988:126:0;:::o;2228:1279:6:-;2309:7;2318:12;2539:9;:16;2559:2;2539:22;2535:966;;;2828:4;2813:20;;2807:27;2877:4;2862:20;;2856:27;2934:4;2919:20;;2913:27;2577:9;2905:36;2975:25;2986:4;2905:36;2807:27;2856;2975:10;:25::i;:::-;2968:32;;;;;;;;;2535:966;3021:9;:16;3041:2;3021:22;3017:484;;;3290:4;3275:20;;3269:27;3340:4;3325:20;;3319:27;3380:23;3391:4;3269:27;3319;3380:10;:23::i;:::-;3373:30;;;;;;;;3017:484;-1:-1:-1;3450:1:6;;-1:-1:-1;3454:35:6;3017:484;2228:1279;;;;;:::o;533:631::-;610:20;601:5;:29;;;;;;-1:-1:-1;;;601:29:6;;;;;;;;;;597:561;;;646:7;;597:561;706:29;697:5;:38;;;;;;-1:-1:-1;;;697:38:6;;;;;;;;;;693:465;;;751:34;;-1:-1:-1;;;751:34:6;;;;;;;:::i;693:465::-;815:35;806:5;:44;;;;;;-1:-1:-1;;;806:44:6;;;;;;;;;;802:356;;;866:41;;-1:-1:-1;;;866:41:6;;;;;;;:::i;802:356::-;937:30;928:5;:39;;;;;;-1:-1:-1;;;928:39:6;;;;;;;;;;924:234;;;983:44;;-1:-1:-1;;;983:44:6;;;;;;;:::i;924:234::-;1057:30;1048:5;:39;;;;;;-1:-1:-1;;;1048:39:6;;;;;;;;;;1044:114;;;1103:44;;-1:-1:-1;;;1103:44:6;;;;;;;:::i;807:64:2:-;539:13:1;;;;;;;;:30;;-1:-1:-1;557:12:1;;;;556:13;539:30;531:89;;;;-1:-1:-1;;;531:89:1;;;;;;;:::i;:::-;631:19;654:13;;;;;;653:14;677:98;;;;711:13;:20;;-1:-1:-1;;;;711:20:1;;;;;745:19;727:4;745:19;;;801:14;797:66;;;847:5;831:21;;-1:-1:-1;;831:21:1;;;807:64:2;:::o;1120:106:0:-;539:13:1;;;;;;;;:30;;-1:-1:-1;557:12:1;;;;556:13;539:30;531:89;;;;-1:-1:-1;;;531:89:1;;;;;;;:::i;:::-;631:19;654:13;;;;;;653:14;677:98;;;;711:13;:20;;-1:-1:-1;;;;711:20:1;;;;;745:19;727:4;745:19;;;677:98;1187:32:0::1;1206:12;:10;:12::i;:::-;1187:18;:32::i;5744:1603:6:-:0;5870:7;;6794:66;6781:79;;6777:161;;;-1:-1:-1;6892:1:6;;-1:-1:-1;6896:30:6;6876:51;;6777:161;6951:1;:7;;6956:2;6951:7;;:18;;;;;6962:1;:7;;6967:2;6962:7;;6951:18;6947:100;;;-1:-1:-1;7001:1:6;;-1:-1:-1;7005:30:6;6985:51;;6947:100;7141:14;7158:24;7168:4;7174:1;7177;7180;7158:24;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;7158:24:6;;-1:-1:-1;;7158:24:6;;;-1:-1:-1;;;;;;;7196:20:6;;7192:101;;7248:1;7252:29;7232:50;;;;;;;7192:101;7311:6;-1:-1:-1;7319:20:6;;-1:-1:-1;5744:1603:6;;;;;;;;:::o;4774:379::-;4884:7;;-1:-1:-1;;;;;4981:75:6;;5082:3;5078:12;;;5092:2;5074:21;5121:25;5132:4;5074:21;5141:1;4981:75;5121:10;:25::i;:::-;5114:32;;;;;;4774:379;;;;;;:::o;14:607:10:-;;110:18;151:2;143:6;140:14;137:2;;;157:18;;:::i;:::-;206:2;200:9;279:2;256:17;;-1:-1:-1;;252:31:10;240:44;;286:4;236:55;306:18;;;326:22;;;303:46;300:2;;;352:18;;:::i;:::-;388:2;381:22;436;;;421:6;-1:-1:-1;421:6:10;473:16;;;470:25;-1:-1:-1;467:2:10;;;508:1;505;498:12;467:2;558:6;553:3;546:4;538:6;534:17;521:44;613:1;606:4;597:6;589;585:19;581:30;574:41;;;90:531;;;;;:::o;626:175::-;696:20;;-1:-1:-1;;;;;745:31:10;;735:42;;725:2;;791:1;788;781:12;806:162;873:20;;929:13;;922:21;912:32;;902:2;;958:1;955;948:12;973:198;;1085:2;1073:9;1064:7;1060:23;1056:32;1053:2;;;1106:6;1098;1091:22;1053:2;1134:31;1155:9;1134:31;:::i;1176:268::-;;;1302:2;1290:9;1281:7;1277:23;1273:32;1270:2;;;1323:6;1315;1308:22;1270:2;1351:31;1372:9;1351:31;:::i;:::-;1341:41;;1401:37;1434:2;1423:9;1419:18;1401:37;:::i;:::-;1391:47;;1260:184;;;;;:::o;1449:1060::-;;;;;;1645:3;1633:9;1624:7;1620:23;1616:33;1613:2;;;1667:6;1659;1652:22;1613:2;1695:28;1713:9;1695:28;:::i;:::-;1685:38;;1770:2;1759:9;1755:18;1742:32;1732:42;;1821:2;1810:9;1806:18;1793:32;1783:42;;1876:2;1865:9;1861:18;1848:32;1899:18;1940:2;1932:6;1929:14;1926:2;;;1961:6;1953;1946:22;1926:2;2004:6;1993:9;1989:22;1979:32;;2049:7;2042:4;2038:2;2034:13;2030:27;2020:2;;2076:6;2068;2061:22;2020:2;2104:75;2171:7;2166:2;2153:16;2148:2;2144;2140:11;2104:75;:::i;:::-;2094:85;;2232:3;2221:9;2217:19;2204:33;2188:49;;2262:2;2252:8;2249:16;2246:2;;;2283:6;2275;2268:22;2246:2;-1:-1:-1;2311:24:10;;2366:4;2358:13;;2354:27;-1:-1:-1;2344:2:10;;2400:6;2392;2385:22;2344:2;2428:75;2495:7;2490:2;2477:16;2472:2;2468;2464:11;2428:75;:::i;:::-;2418:85;;;1603:906;;;;;;;;:::o;2514:190::-;;2626:2;2614:9;2605:7;2601:23;2597:32;2594:2;;;2647:6;2639;2632:22;2594:2;-1:-1:-1;2675:23:10;;2584:120;-1:-1:-1;2584:120:10:o;2709:692::-;;2971:6;2964:14;2957:22;2952:3;2948:32;2943:3;2936:45;3010:6;3006:1;3001:3;2997:11;2990:27;3047:6;3042:2;3037:3;3033:12;3026:28;3083:6;3077:13;3108:3;3120:138;3134:6;3131:1;3128:13;3120:138;;;3241:4;3225:14;;;3221:25;;3215:32;3210:2;3197:11;;;3193:20;3186:62;3149:12;3120:138;;;3276:6;3273:1;3270:13;3267:2;;;3340:3;3335:2;3326:6;3321:3;3317:16;3313:25;3306:38;3267:2;-1:-1:-1;3374:16:10;;;;3392:2;3370:25;;2926:475;-1:-1:-1;;;;;2926:475:10:o;3406:380::-;3648:66;3636:79;;3740:2;3731:12;;3724:28;;;;3777:2;3768:12;;3626:160::o;3791:203::-;-1:-1:-1;;;;;3955:32:10;;;;3937:51;;3925:2;3910:18;;3892:102::o;3999:187::-;4164:14;;4157:22;4139:41;;4127:2;4112:18;;4094:92::o;4191:398::-;4418:25;;;4491:4;4479:17;;;;4474:2;4459:18;;4452:45;4528:2;4513:18;;4506:34;4571:2;4556:18;;4549:34;4405:3;4390:19;;4372:217::o;4594:348::-;4796:2;4778:21;;;4835:2;4815:18;;;4808:30;4874:26;4869:2;4854:18;;4847:54;4933:2;4918:18;;4768:174::o;4947:337::-;5149:2;5131:21;;;5188:2;5168:18;;;5161:30;-1:-1:-1;;;5222:2:10;5207:18;;5200:43;5275:2;5260:18;;5121:163::o;5289:355::-;5491:2;5473:21;;;5530:2;5510:18;;;5503:30;5569:33;5564:2;5549:18;;5542:61;5635:2;5620:18;;5463:181::o;5649:402::-;5851:2;5833:21;;;5890:2;5870:18;;;5863:30;5929:34;5924:2;5909:18;;5902:62;-1:-1:-1;;;5995:2:10;5980:18;;5973:36;6041:3;6026:19;;5823:228::o;6056:398::-;6258:2;6240:21;;;6297:2;6277:18;;;6270:30;6336:34;6331:2;6316:18;;6309:62;-1:-1:-1;;;6402:2:10;6387:18;;6380:32;6444:3;6429:19;;6230:224::o;6459:410::-;6661:2;6643:21;;;6700:2;6680:18;;;6673:30;6739:34;6734:2;6719:18;;6712:62;-1:-1:-1;;;6805:2:10;6790:18;;6783:44;6859:3;6844:19;;6633:236::o;6874:336::-;7076:2;7058:21;;;7115:2;7095:18;;;7088:30;-1:-1:-1;;;7149:2:10;7134:18;;7127:42;7201:2;7186:18;;7048:162::o;7215:398::-;7417:2;7399:21;;;7456:2;7436:18;;;7429:30;7495:34;7490:2;7475:18;;7468:62;-1:-1:-1;;;7561:2:10;7546:18;;7539:32;7603:3;7588:19;;7389:224::o;7618:339::-;7820:2;7802:21;;;7859:2;7839:18;;;7832:30;-1:-1:-1;;;7893:2:10;7878:18;;7871:45;7948:2;7933:18;;7792:165::o;7962:356::-;8164:2;8146:21;;;8183:18;;;8176:30;8242:34;8237:2;8222:18;;8215:62;8309:2;8294:18;;8136:182::o;8323:177::-;8469:25;;;8457:2;8442:18;;8424:76::o;8505:228::-;;8573:1;8570;8567:8;8564:2;;;-1:-1:-1;;;8598:34:10;;8655:4;8652:1;8645:15;8686:4;8605;8673:18;8564:2;-1:-1:-1;8718:9:10;;8554:179::o;8738:127::-;8799:10;8794:3;8790:20;8787:1;8780:31;8830:4;8827:1;8820:15;8854:4;8851:1;8844:15"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "770400",
								"executionCost": "805",
								"totalCost": "771205"
							},
							"external": {
								"executor(address)": "1331",
								"getkey(bool,uint256,uint256,string,bytes)": "infinite",
								"initialize(address)": "infinite",
								"owner()": "1092",
								"renounceOwnership()": "23507",
								"setExecutor(address,bool)": "infinite",
								"setSigner(address)": "infinite",
								"setTimeLimit(uint256)": "21337",
								"signer()": "1093",
								"timeLimit()": "1072",
								"transferOwnership(address)": "23812"
							},
							"internal": {
								"_setExecutor(address,bool)": "20951"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 436,
									"end": 2415,
									"name": "PUSH",
									"source": 9,
									"value": "80"
								},
								{
									"begin": 436,
									"end": 2415,
									"name": "PUSH",
									"source": 9,
									"value": "40"
								},
								{
									"begin": 436,
									"end": 2415,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 436,
									"end": 2415,
									"name": "CALLVALUE",
									"source": 9
								},
								{
									"begin": 436,
									"end": 2415,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 436,
									"end": 2415,
									"name": "ISZERO",
									"source": 9
								},
								{
									"begin": 436,
									"end": 2415,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 436,
									"end": 2415,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 436,
									"end": 2415,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 436,
									"end": 2415,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 436,
									"end": 2415,
									"name": "REVERT",
									"source": 9
								},
								{
									"begin": 436,
									"end": 2415,
									"name": "tag",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 436,
									"end": 2415,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 436,
									"end": 2415,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 436,
									"end": 2415,
									"name": "PUSH #[$]",
									"source": 9,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 436,
									"end": 2415,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 436,
									"end": 2415,
									"name": "PUSH [$]",
									"source": 9,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 436,
									"end": 2415,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 436,
									"end": 2415,
									"name": "CODECOPY",
									"source": 9
								},
								{
									"begin": 436,
									"end": 2415,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 436,
									"end": 2415,
									"name": "RETURN",
									"source": 9
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220e34dd53f30cb5b7bf905468027d4bad3b29dd4b8c9d146af2c0bae9092ffffcc64736f6c63430008000033",
									".code": [
										{
											"begin": 436,
											"end": 2415,
											"name": "PUSH",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 436,
											"end": 2415,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 436,
											"end": 2415,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 436,
											"end": 2415,
											"name": "CALLVALUE",
											"source": 9
										},
										{
											"begin": 436,
											"end": 2415,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 436,
											"end": 2415,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 436,
											"end": 2415,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 436,
											"end": 2415,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 436,
											"end": 2415,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 436,
											"end": 2415,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 436,
											"end": 2415,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 436,
											"end": 2415,
											"name": "tag",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 436,
											"end": 2415,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 436,
											"end": 2415,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 436,
											"end": 2415,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 436,
											"end": 2415,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 436,
											"end": 2415,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 436,
											"end": 2415,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 436,
											"end": 2415,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 436,
											"end": 2415,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 436,
											"end": 2415,
											"name": "CALLDATALOAD",
											"source": 9
										},
										{
											"begin": 436,
											"end": 2415,
											"name": "PUSH",
											"source": 9,
											"value": "E0"
										},
										{
											"begin": 436,
											"end": 2415,
											"name": "SHR",
											"source": 9
										},
										{
											"begin": 436,
											"end": 2415,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 436,
											"end": 2415,
											"name": "PUSH",
											"source": 9,
											"value": "715018A6"
										},
										{
											"begin": 436,
											"end": 2415,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 436,
											"end": 2415,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "14"
										},
										{
											"begin": 436,
											"end": 2415,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 436,
											"end": 2415,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 436,
											"end": 2415,
											"name": "PUSH",
											"source": 9,
											"value": "715018A6"
										},
										{
											"begin": 436,
											"end": 2415,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 436,
											"end": 2415,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "8"
										},
										{
											"begin": 436,
											"end": 2415,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 436,
											"end": 2415,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 436,
											"end": 2415,
											"name": "PUSH",
											"source": 9,
											"value": "8DA5CB5B"
										},
										{
											"begin": 436,
											"end": 2415,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 436,
											"end": 2415,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "9"
										},
										{
											"begin": 436,
											"end": 2415,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 436,
											"end": 2415,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 436,
											"end": 2415,
											"name": "PUSH",
											"source": 9,
											"value": "C08D1FE5"
										},
										{
											"begin": 436,
											"end": 2415,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 436,
											"end": 2415,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "10"
										},
										{
											"begin": 436,
											"end": 2415,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 436,
											"end": 2415,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 436,
											"end": 2415,
											"name": "PUSH",
											"source": 9,
											"value": "C4D66DE8"
										},
										{
											"begin": 436,
											"end": 2415,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 436,
											"end": 2415,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "11"
										},
										{
											"begin": 436,
											"end": 2415,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 436,
											"end": 2415,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 436,
											"end": 2415,
											"name": "PUSH",
											"source": 9,
											"value": "E2889C82"
										},
										{
											"begin": 436,
											"end": 2415,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 436,
											"end": 2415,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "12"
										},
										{
											"begin": 436,
											"end": 2415,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 436,
											"end": 2415,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 436,
											"end": 2415,
											"name": "PUSH",
											"source": 9,
											"value": "F2FDE38B"
										},
										{
											"begin": 436,
											"end": 2415,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 436,
											"end": 2415,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "13"
										},
										{
											"begin": 436,
											"end": 2415,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 436,
											"end": 2415,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 436,
											"end": 2415,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 436,
											"end": 2415,
											"name": "tag",
											"source": 9,
											"value": "14"
										},
										{
											"begin": 436,
											"end": 2415,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 436,
											"end": 2415,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 436,
											"end": 2415,
											"name": "PUSH",
											"source": 9,
											"value": "1E1BFF3F"
										},
										{
											"begin": 436,
											"end": 2415,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 436,
											"end": 2415,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 436,
											"end": 2415,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 436,
											"end": 2415,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 436,
											"end": 2415,
											"name": "PUSH",
											"source": 9,
											"value": "238AC933"
										},
										{
											"begin": 436,
											"end": 2415,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 436,
											"end": 2415,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 436,
											"end": 2415,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 436,
											"end": 2415,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 436,
											"end": 2415,
											"name": "PUSH",
											"source": 9,
											"value": "239B93B2"
										},
										{
											"begin": 436,
											"end": 2415,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 436,
											"end": 2415,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "5"
										},
										{
											"begin": 436,
											"end": 2415,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 436,
											"end": 2415,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 436,
											"end": 2415,
											"name": "PUSH",
											"source": 9,
											"value": "48C7E528"
										},
										{
											"begin": 436,
											"end": 2415,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 436,
											"end": 2415,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "6"
										},
										{
											"begin": 436,
											"end": 2415,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 436,
											"end": 2415,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 436,
											"end": 2415,
											"name": "PUSH",
											"source": 9,
											"value": "6C19E783"
										},
										{
											"begin": 436,
											"end": 2415,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 436,
											"end": 2415,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "7"
										},
										{
											"begin": 436,
											"end": 2415,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 436,
											"end": 2415,
											"name": "tag",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 436,
											"end": 2415,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 436,
											"end": 2415,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 436,
											"end": 2415,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 436,
											"end": 2415,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 1024,
											"end": 1190,
											"name": "tag",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 1024,
											"end": 1190,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1024,
											"end": 1190,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "15"
										},
										{
											"begin": 1024,
											"end": 1190,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "16"
										},
										{
											"begin": 1024,
											"end": 1190,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 1024,
											"end": 1190,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 1024,
											"end": 1190,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "17"
										},
										{
											"begin": 1024,
											"end": 1190,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 1024,
											"end": 1190,
											"name": "tag",
											"source": 9,
											"value": "16"
										},
										{
											"begin": 1024,
											"end": 1190,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1024,
											"end": 1190,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "18"
										},
										{
											"begin": 1024,
											"end": 1190,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 1024,
											"end": 1190,
											"name": "tag",
											"source": 9,
											"value": "15"
										},
										{
											"begin": 1024,
											"end": 1190,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1024,
											"end": 1190,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 1024,
											"end": 1190,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 1024,
											"end": 1190,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "19"
										},
										{
											"begin": 1024,
											"end": 1190,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 1024,
											"end": 1190,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1024,
											"end": 1190,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 1024,
											"end": 1190,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 1024,
											"end": 1190,
											"name": "tag",
											"source": 9,
											"value": "19"
										},
										{
											"begin": 1024,
											"end": 1190,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1024,
											"end": 1190,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 1024,
											"end": 1190,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 1024,
											"end": 1190,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1024,
											"end": 1190,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 1024,
											"end": 1190,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 1024,
											"end": 1190,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1024,
											"end": 1190,
											"name": "RETURN",
											"source": 9
										},
										{
											"begin": 557,
											"end": 578,
											"name": "tag",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 557,
											"end": 578,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 557,
											"end": 578,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "21"
										},
										{
											"begin": 557,
											"end": 578,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "22"
										},
										{
											"begin": 557,
											"end": 578,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 557,
											"end": 578,
											"name": "tag",
											"source": 9,
											"value": "21"
										},
										{
											"begin": 557,
											"end": 578,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 557,
											"end": 578,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 557,
											"end": 578,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 557,
											"end": 578,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "19"
										},
										{
											"begin": 557,
											"end": 578,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 557,
											"end": 578,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 557,
											"end": 578,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 557,
											"end": 578,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 1751,
											"end": 2413,
											"name": "tag",
											"source": 9,
											"value": "5"
										},
										{
											"begin": 1751,
											"end": 2413,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1751,
											"end": 2413,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "15"
										},
										{
											"begin": 1751,
											"end": 2413,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "26"
										},
										{
											"begin": 1751,
											"end": 2413,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 1751,
											"end": 2413,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 1751,
											"end": 2413,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "27"
										},
										{
											"begin": 1751,
											"end": 2413,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 1751,
											"end": 2413,
											"name": "tag",
											"source": 9,
											"value": "26"
										},
										{
											"begin": 1751,
											"end": 2413,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1751,
											"end": 2413,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "28"
										},
										{
											"begin": 1751,
											"end": 2413,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 629,
											"end": 669,
											"name": "tag",
											"source": 9,
											"value": "6"
										},
										{
											"begin": 629,
											"end": 669,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 629,
											"end": 669,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "15"
										},
										{
											"begin": 629,
											"end": 669,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "31"
										},
										{
											"begin": 629,
											"end": 669,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 629,
											"end": 669,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 629,
											"end": 669,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "32"
										},
										{
											"begin": 629,
											"end": 669,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 629,
											"end": 669,
											"name": "tag",
											"source": 9,
											"value": "31"
										},
										{
											"begin": 629,
											"end": 669,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 629,
											"end": 669,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "33"
										},
										{
											"begin": 629,
											"end": 669,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 1619,
											"end": 1745,
											"name": "tag",
											"source": 9,
											"value": "7"
										},
										{
											"begin": 1619,
											"end": 1745,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1619,
											"end": 1745,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "15"
										},
										{
											"begin": 1619,
											"end": 1745,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "36"
										},
										{
											"begin": 1619,
											"end": 1745,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 1619,
											"end": 1745,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 1619,
											"end": 1745,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "32"
										},
										{
											"begin": 1619,
											"end": 1745,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 1619,
											"end": 1745,
											"name": "tag",
											"source": 9,
											"value": "36"
										},
										{
											"begin": 1619,
											"end": 1745,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1619,
											"end": 1745,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "37"
										},
										{
											"begin": 1619,
											"end": 1745,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 1934,
											"end": 2035,
											"name": "tag",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 1934,
											"end": 2035,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1934,
											"end": 2035,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "39"
										},
										{
											"begin": 1934,
											"end": 2035,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1934,
											"end": 2035,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1934,
											"end": 2035,
											"name": "tag",
											"source": 0,
											"value": "39"
										},
										{
											"begin": 1934,
											"end": 2035,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1934,
											"end": 2035,
											"name": "STOP",
											"source": 0
										},
										{
											"begin": 1302,
											"end": 1387,
											"name": "tag",
											"source": 0,
											"value": "9"
										},
										{
											"begin": 1302,
											"end": 1387,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1302,
											"end": 1387,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "21"
										},
										{
											"begin": 1302,
											"end": 1387,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "42"
										},
										{
											"begin": 1302,
											"end": 1387,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 584,
											"end": 608,
											"name": "tag",
											"source": 9,
											"value": "10"
										},
										{
											"begin": 584,
											"end": 608,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 584,
											"end": 608,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "44"
										},
										{
											"begin": 584,
											"end": 608,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "45"
										},
										{
											"begin": 584,
											"end": 608,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 584,
											"end": 608,
											"name": "tag",
											"source": 9,
											"value": "44"
										},
										{
											"begin": 584,
											"end": 608,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 584,
											"end": 608,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 584,
											"end": 608,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 584,
											"end": 608,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "19"
										},
										{
											"begin": 584,
											"end": 608,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 584,
											"end": 608,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 584,
											"end": 608,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "47"
										},
										{
											"begin": 584,
											"end": 608,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 840,
											"end": 1018,
											"name": "tag",
											"source": 9,
											"value": "11"
										},
										{
											"begin": 840,
											"end": 1018,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 840,
											"end": 1018,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "39"
										},
										{
											"begin": 840,
											"end": 1018,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "49"
										},
										{
											"begin": 840,
											"end": 1018,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 840,
											"end": 1018,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 840,
											"end": 1018,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "32"
										},
										{
											"begin": 840,
											"end": 1018,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 840,
											"end": 1018,
											"name": "tag",
											"source": 9,
											"value": "49"
										},
										{
											"begin": 840,
											"end": 1018,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 840,
											"end": 1018,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "50"
										},
										{
											"begin": 840,
											"end": 1018,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 1489,
											"end": 1613,
											"name": "tag",
											"source": 9,
											"value": "12"
										},
										{
											"begin": 1489,
											"end": 1613,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1489,
											"end": 1613,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "15"
										},
										{
											"begin": 1489,
											"end": 1613,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "52"
										},
										{
											"begin": 1489,
											"end": 1613,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 1489,
											"end": 1613,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 1489,
											"end": 1613,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "53"
										},
										{
											"begin": 1489,
											"end": 1613,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 1489,
											"end": 1613,
											"name": "tag",
											"source": 9,
											"value": "52"
										},
										{
											"begin": 1489,
											"end": 1613,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1489,
											"end": 1613,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "54"
										},
										{
											"begin": 1489,
											"end": 1613,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 2184,
											"end": 2382,
											"name": "tag",
											"source": 0,
											"value": "13"
										},
										{
											"begin": 2184,
											"end": 2382,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2184,
											"end": 2382,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "39"
										},
										{
											"begin": 2184,
											"end": 2382,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "57"
										},
										{
											"begin": 2184,
											"end": 2382,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 2184,
											"end": 2382,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2184,
											"end": 2382,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "32"
										},
										{
											"begin": 2184,
											"end": 2382,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2184,
											"end": 2382,
											"name": "tag",
											"source": 0,
											"value": "57"
										},
										{
											"begin": 2184,
											"end": 2382,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2184,
											"end": 2382,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "58"
										},
										{
											"begin": 2184,
											"end": 2382,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1024,
											"end": 1190,
											"name": "tag",
											"source": 9,
											"value": "18"
										},
										{
											"begin": 1024,
											"end": 1190,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1127,
											"end": 1131,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1525,
											"end": 1537,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 1525,
											"end": 1535,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "61"
										},
										{
											"begin": 1525,
											"end": 1537,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1525,
											"end": 1537,
											"name": "tag",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 1525,
											"end": 1537,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1514,
											"end": 1537,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1514,
											"end": 1521,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "62"
										},
										{
											"begin": 1514,
											"end": 1519,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "42"
										},
										{
											"begin": 1514,
											"end": 1521,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1514,
											"end": 1521,
											"name": "tag",
											"source": 0,
											"value": "62"
										},
										{
											"begin": 1514,
											"end": 1521,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1514,
											"end": 1537,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1514,
											"end": 1537,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "63"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "64"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "65"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "tag",
											"source": 0,
											"value": "64"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "tag",
											"source": 0,
											"value": "63"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1154,
											"end": 1183,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "67"
										},
										{
											"begin": 1167,
											"end": 1175,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 1177,
											"end": 1182,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 1154,
											"end": 1166,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "68"
										},
										{
											"begin": 1154,
											"end": 1183,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 1154,
											"end": 1183,
											"name": "tag",
											"source": 9,
											"value": "67"
										},
										{
											"begin": 1154,
											"end": 1183,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1147,
											"end": 1183,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 1024,
											"end": 1190,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1024,
											"end": 1190,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 557,
											"end": 578,
											"name": "tag",
											"source": 9,
											"value": "22"
										},
										{
											"begin": 557,
											"end": 578,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 557,
											"end": 578,
											"name": "PUSH",
											"source": 9,
											"value": "65"
										},
										{
											"begin": 557,
											"end": 578,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 557,
											"end": 578,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 557,
											"end": 578,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 557,
											"end": 578,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 1751,
											"end": 2413,
											"name": "tag",
											"source": 9,
											"value": "28"
										},
										{
											"begin": 1751,
											"end": 2413,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1973,
											"end": 1983,
											"name": "CALLER",
											"source": 9
										},
										{
											"begin": 1940,
											"end": 1944,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1964,
											"end": 1984,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1964,
											"end": 1984,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1964,
											"end": 1984,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 1964,
											"end": 1972,
											"name": "PUSH",
											"source": 9,
											"value": "67"
										},
										{
											"begin": 1964,
											"end": 1984,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 1964,
											"end": 1984,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 1964,
											"end": 1984,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 1964,
											"end": 1984,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1964,
											"end": 1984,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 1964,
											"end": 1984,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 1964,
											"end": 1984,
											"name": "PUSH",
											"source": 9,
											"value": "FF"
										},
										{
											"begin": 1964,
											"end": 1984,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 1956,
											"end": 2001,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "70"
										},
										{
											"begin": 1956,
											"end": 2001,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 1956,
											"end": 2001,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 1956,
											"end": 2001,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1956,
											"end": 2001,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1956,
											"end": 2001,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 1956,
											"end": 2001,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 1956,
											"end": 2001,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1956,
											"end": 2001,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 1956,
											"end": 2001,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1956,
											"end": 2001,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "72"
										},
										{
											"begin": 1956,
											"end": 2001,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 1956,
											"end": 2001,
											"name": "tag",
											"source": 9,
											"value": "70"
										},
										{
											"begin": 1956,
											"end": 2001,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2049,
											"end": 2059,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 2037,
											"end": 2046,
											"name": "PUSH",
											"source": 9,
											"value": "66"
										},
										{
											"begin": 2037,
											"end": 2046,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 2019,
											"end": 2034,
											"name": "TIMESTAMP",
											"source": 9
										},
										{
											"begin": 2019,
											"end": 2046,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "73"
										},
										{
											"begin": 2019,
											"end": 2046,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2019,
											"end": 2046,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2019,
											"end": 2046,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "74"
										},
										{
											"begin": 2019,
											"end": 2046,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 2019,
											"end": 2046,
											"name": "tag",
											"source": 9,
											"value": "73"
										},
										{
											"begin": 2019,
											"end": 2046,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2019,
											"end": 2059,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 2011,
											"end": 2077,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "75"
										},
										{
											"begin": 2011,
											"end": 2077,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 2011,
											"end": 2077,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 2011,
											"end": 2077,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2011,
											"end": 2077,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2011,
											"end": 2077,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2011,
											"end": 2077,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 2011,
											"end": 2077,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2011,
											"end": 2077,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 2011,
											"end": 2077,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2011,
											"end": 2077,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "77"
										},
										{
											"begin": 2011,
											"end": 2077,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 2011,
											"end": 2077,
											"name": "tag",
											"source": 9,
											"value": "75"
										},
										{
											"begin": 2011,
											"end": 2077,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2095,
											"end": 2107,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 2087,
											"end": 2127,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "78"
										},
										{
											"begin": 2087,
											"end": 2127,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 2087,
											"end": 2127,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 2087,
											"end": 2127,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2087,
											"end": 2127,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2087,
											"end": 2127,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2087,
											"end": 2127,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 2087,
											"end": 2127,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2087,
											"end": 2127,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 2087,
											"end": 2127,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2087,
											"end": 2127,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 2087,
											"end": 2127,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 2087,
											"end": 2127,
											"name": "tag",
											"source": 9,
											"value": "78"
										},
										{
											"begin": 2087,
											"end": 2127,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2137,
											"end": 2149,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2192,
											"end": 2204,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 2206,
											"end": 2214,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 2216,
											"end": 2226,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 2228,
											"end": 2236,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 2175,
											"end": 2237,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 2175,
											"end": 2237,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 2175,
											"end": 2237,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2175,
											"end": 2237,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2175,
											"end": 2237,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "81"
										},
										{
											"begin": 2175,
											"end": 2237,
											"name": "SWAP5",
											"source": 9
										},
										{
											"begin": 2175,
											"end": 2237,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 2175,
											"end": 2237,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 2175,
											"end": 2237,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2175,
											"end": 2237,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2175,
											"end": 2237,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "82"
										},
										{
											"begin": 2175,
											"end": 2237,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 2175,
											"end": 2237,
											"name": "tag",
											"source": 9,
											"value": "81"
										},
										{
											"begin": 2175,
											"end": 2237,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2175,
											"end": 2237,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 2175,
											"end": 2237,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 2175,
											"end": 2237,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2175,
											"end": 2237,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2175,
											"end": 2237,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 2175,
											"end": 2237,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 2175,
											"end": 2237,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 2175,
											"end": 2237,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2175,
											"end": 2237,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2175,
											"end": 2237,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2175,
											"end": 2237,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 2175,
											"end": 2237,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2152,
											"end": 2247,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2152,
											"end": 2247,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 2152,
											"end": 2247,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2152,
											"end": 2247,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2152,
											"end": 2247,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2152,
											"end": 2247,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 2137,
											"end": 2247,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2137,
											"end": 2247,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2257,
											"end": 2272,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2275,
											"end": 2370,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "83"
										},
										{
											"begin": 2302,
											"end": 2336,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "84"
										},
										{
											"begin": 2331,
											"end": 2335,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 2302,
											"end": 2330,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "85"
										},
										{
											"begin": 2302,
											"end": 2336,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 2302,
											"end": 2336,
											"name": "tag",
											"source": 9,
											"value": "84"
										},
										{
											"begin": 2302,
											"end": 2336,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2350,
											"end": 2360,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 2275,
											"end": 2288,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "86"
										},
										{
											"begin": 2275,
											"end": 2370,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 2275,
											"end": 2370,
											"name": "tag",
											"source": 9,
											"value": "83"
										},
										{
											"begin": 2275,
											"end": 2370,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2388,
											"end": 2394,
											"name": "PUSH",
											"source": 9,
											"value": "65"
										},
										{
											"begin": 2388,
											"end": 2394,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2388,
											"end": 2405,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2388,
											"end": 2405,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2388,
											"end": 2405,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2388,
											"end": 2394,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2388,
											"end": 2394,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2388,
											"end": 2405,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 2388,
											"end": 2405,
											"name": "SWAP9",
											"source": 9
										},
										{
											"begin": 1751,
											"end": 2413,
											"name": "SWAP8",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1751,
											"end": 2413,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 629,
											"end": 669,
											"name": "tag",
											"source": 9,
											"value": "33"
										},
										{
											"begin": 629,
											"end": 669,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 629,
											"end": 669,
											"name": "PUSH",
											"source": 9,
											"value": "67"
										},
										{
											"begin": 629,
											"end": 669,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 629,
											"end": 669,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 629,
											"end": 669,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 629,
											"end": 669,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 629,
											"end": 669,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 629,
											"end": 669,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 629,
											"end": 669,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 629,
											"end": 669,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 629,
											"end": 669,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 629,
											"end": 669,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 629,
											"end": 669,
											"name": "PUSH",
											"source": 9,
											"value": "FF"
										},
										{
											"begin": 629,
											"end": 669,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 629,
											"end": 669,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 629,
											"end": 669,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 1619,
											"end": 1745,
											"name": "tag",
											"source": 9,
											"value": "37"
										},
										{
											"begin": 1619,
											"end": 1745,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1684,
											"end": 1688,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1525,
											"end": 1537,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "88"
										},
										{
											"begin": 1525,
											"end": 1535,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "61"
										},
										{
											"begin": 1525,
											"end": 1537,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1525,
											"end": 1537,
											"name": "tag",
											"source": 0,
											"value": "88"
										},
										{
											"begin": 1525,
											"end": 1537,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1514,
											"end": 1537,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1514,
											"end": 1521,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "89"
										},
										{
											"begin": 1514,
											"end": 1519,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "42"
										},
										{
											"begin": 1514,
											"end": 1521,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1514,
											"end": 1521,
											"name": "tag",
											"source": 0,
											"value": "89"
										},
										{
											"begin": 1514,
											"end": 1521,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1514,
											"end": 1537,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1514,
											"end": 1537,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "90"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "64"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "65"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "tag",
											"source": 0,
											"value": "90"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1700,
											"end": 1706,
											"name": "PUSH",
											"source": 9,
											"value": "65"
										},
										{
											"begin": 1700,
											"end": 1717,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1700,
											"end": 1717,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1700,
											"end": 1717,
											"name": "AND",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1700,
											"end": 1717,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 1700,
											"end": 1717,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 1700,
											"end": 1717,
											"name": "OR",
											"source": 9
										},
										{
											"begin": 1700,
											"end": 1717,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1700,
											"end": 1717,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": 1584,
											"end": 1585,
											"name": "tag",
											"source": 0,
											"value": "92"
										},
										{
											"begin": 1584,
											"end": 1585,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1619,
											"end": 1745,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 1619,
											"end": 1745,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1619,
											"end": 1745,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1619,
											"end": 1745,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 1934,
											"end": 2035,
											"name": "tag",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1934,
											"end": 2035,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1525,
											"end": 1537,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "94"
										},
										{
											"begin": 1525,
											"end": 1535,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "61"
										},
										{
											"begin": 1525,
											"end": 1537,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1525,
											"end": 1537,
											"name": "tag",
											"source": 0,
											"value": "94"
										},
										{
											"begin": 1525,
											"end": 1537,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1514,
											"end": 1537,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1514,
											"end": 1521,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "95"
										},
										{
											"begin": 1514,
											"end": 1519,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "42"
										},
										{
											"begin": 1514,
											"end": 1521,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1514,
											"end": 1521,
											"name": "tag",
											"source": 0,
											"value": "95"
										},
										{
											"begin": 1514,
											"end": 1521,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1514,
											"end": 1537,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1514,
											"end": 1537,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "96"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "64"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "65"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "tag",
											"source": 0,
											"value": "96"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1998,
											"end": 2028,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "99"
										},
										{
											"begin": 2025,
											"end": 2026,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1998,
											"end": 2016,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 1998,
											"end": 2028,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1998,
											"end": 2028,
											"name": "tag",
											"source": 0,
											"value": "99"
										},
										{
											"begin": 1998,
											"end": 2028,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1934,
											"end": 2035,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 1302,
											"end": 1387,
											"name": "tag",
											"source": 0,
											"value": "42"
										},
										{
											"begin": 1302,
											"end": 1387,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1374,
											"end": 1380,
											"name": "PUSH",
											"source": 0,
											"value": "33"
										},
										{
											"begin": 1374,
											"end": 1380,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1374,
											"end": 1380,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1302,
											"end": 1387,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1302,
											"end": 1387,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 584,
											"end": 608,
											"name": "tag",
											"source": 9,
											"value": "45"
										},
										{
											"begin": 584,
											"end": 608,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 584,
											"end": 608,
											"name": "PUSH",
											"source": 9,
											"value": "66"
										},
										{
											"begin": 584,
											"end": 608,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 584,
											"end": 608,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 584,
											"end": 608,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 840,
											"end": 1018,
											"name": "tag",
											"source": 9,
											"value": "50"
										},
										{
											"begin": 840,
											"end": 1018,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 539,
											"end": 552,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 539,
											"end": 552,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 539,
											"end": 552,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 539,
											"end": 552,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 539,
											"end": 552,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 539,
											"end": 552,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 539,
											"end": 552,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 539,
											"end": 552,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 539,
											"end": 569,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "103"
										},
										{
											"begin": 539,
											"end": 569,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 557,
											"end": 569,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 557,
											"end": 569,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 557,
											"end": 569,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 557,
											"end": 569,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 556,
											"end": 569,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 539,
											"end": 569,
											"name": "tag",
											"source": 1,
											"value": "103"
										},
										{
											"begin": 539,
											"end": 569,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 531,
											"end": 620,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "104"
										},
										{
											"begin": 531,
											"end": 620,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 531,
											"end": 620,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 531,
											"end": 620,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 531,
											"end": 620,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 531,
											"end": 620,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 531,
											"end": 620,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 531,
											"end": 620,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 531,
											"end": 620,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "64"
										},
										{
											"begin": 531,
											"end": 620,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 531,
											"end": 620,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "106"
										},
										{
											"begin": 531,
											"end": 620,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 531,
											"end": 620,
											"name": "tag",
											"source": 1,
											"value": "104"
										},
										{
											"begin": 531,
											"end": 620,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 631,
											"end": 650,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 654,
											"end": 667,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 654,
											"end": 667,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 654,
											"end": 667,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 654,
											"end": 667,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 654,
											"end": 667,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 654,
											"end": 667,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 653,
											"end": 667,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 677,
											"end": 775,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 677,
											"end": 775,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 677,
											"end": 775,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "107"
										},
										{
											"begin": 677,
											"end": 775,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 711,
											"end": 724,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 711,
											"end": 731,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 711,
											"end": 731,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF00"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 711,
											"end": 731,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 711,
											"end": 731,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 711,
											"end": 731,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 711,
											"end": 731,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 711,
											"end": 731,
											"name": "OR",
											"source": 1
										},
										{
											"begin": 745,
											"end": 764,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 727,
											"end": 731,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 745,
											"end": 764,
											"name": "OR",
											"source": 1
										},
										{
											"begin": 745,
											"end": 764,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 745,
											"end": 764,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 677,
											"end": 775,
											"name": "tag",
											"source": 1,
											"value": "107"
										},
										{
											"begin": 677,
											"end": 775,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 908,
											"end": 924,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "109"
										},
										{
											"begin": 908,
											"end": 922,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "110"
										},
										{
											"begin": 908,
											"end": 924,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 908,
											"end": 924,
											"name": "tag",
											"source": 9,
											"value": "109"
										},
										{
											"begin": 908,
											"end": 924,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 934,
											"end": 961,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "111"
										},
										{
											"begin": 947,
											"end": 954,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 956,
											"end": 960,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 934,
											"end": 946,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "68"
										},
										{
											"begin": 934,
											"end": 961,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 934,
											"end": 961,
											"name": "tag",
											"source": 9,
											"value": "111"
										},
										{
											"begin": 934,
											"end": 961,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 971,
											"end": 977,
											"name": "PUSH",
											"source": 9,
											"value": "65"
										},
										{
											"begin": 971,
											"end": 987,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 971,
											"end": 987,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 971,
											"end": 987,
											"name": "AND",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 971,
											"end": 987,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 971,
											"end": 987,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 971,
											"end": 987,
											"name": "OR",
											"source": 9
										},
										{
											"begin": 971,
											"end": 987,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 971,
											"end": 987,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 1009,
											"end": 1011,
											"name": "PUSH",
											"source": 9,
											"value": "3C"
										},
										{
											"begin": 997,
											"end": 1006,
											"name": "PUSH",
											"source": 9,
											"value": "66"
										},
										{
											"begin": 997,
											"end": 1011,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 797,
											"end": 863,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 797,
											"end": 863,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 797,
											"end": 863,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "112"
										},
										{
											"begin": 797,
											"end": 863,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 847,
											"end": 852,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 831,
											"end": 852,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 831,
											"end": 852,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF00"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 831,
											"end": 852,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 831,
											"end": 852,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 831,
											"end": 852,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 797,
											"end": 863,
											"name": "tag",
											"source": 1,
											"value": "112"
										},
										{
											"begin": 797,
											"end": 863,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 840,
											"end": 1018,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 840,
											"end": 1018,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 840,
											"end": 1018,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 1489,
											"end": 1613,
											"name": "tag",
											"source": 9,
											"value": "54"
										},
										{
											"begin": 1489,
											"end": 1613,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1553,
											"end": 1557,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1525,
											"end": 1537,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "114"
										},
										{
											"begin": 1525,
											"end": 1535,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "61"
										},
										{
											"begin": 1525,
											"end": 1537,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1525,
											"end": 1537,
											"name": "tag",
											"source": 0,
											"value": "114"
										},
										{
											"begin": 1525,
											"end": 1537,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1514,
											"end": 1537,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1514,
											"end": 1521,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "115"
										},
										{
											"begin": 1514,
											"end": 1519,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "42"
										},
										{
											"begin": 1514,
											"end": 1521,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1514,
											"end": 1521,
											"name": "tag",
											"source": 0,
											"value": "115"
										},
										{
											"begin": 1514,
											"end": 1521,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1514,
											"end": 1537,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1514,
											"end": 1537,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "116"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "64"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "65"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "tag",
											"source": 0,
											"value": "116"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1569,
											"end": 1578,
											"name": "PUSH",
											"source": 9,
											"value": "66"
										},
										{
											"begin": 1569,
											"end": 1585,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 1602,
											"end": 1606,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 1602,
											"end": 1606,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1489,
											"end": 1613,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 2184,
											"end": 2382,
											"name": "tag",
											"source": 0,
											"value": "58"
										},
										{
											"begin": 2184,
											"end": 2382,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1525,
											"end": 1537,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "120"
										},
										{
											"begin": 1525,
											"end": 1535,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "61"
										},
										{
											"begin": 1525,
											"end": 1537,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1525,
											"end": 1537,
											"name": "tag",
											"source": 0,
											"value": "120"
										},
										{
											"begin": 1525,
											"end": 1537,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1514,
											"end": 1537,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1514,
											"end": 1521,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "121"
										},
										{
											"begin": 1514,
											"end": 1519,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "42"
										},
										{
											"begin": 1514,
											"end": 1521,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1514,
											"end": 1521,
											"name": "tag",
											"source": 0,
											"value": "121"
										},
										{
											"begin": 1514,
											"end": 1521,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1514,
											"end": 1537,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1514,
											"end": 1537,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "122"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "64"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "65"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "tag",
											"source": 0,
											"value": "122"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2272,
											"end": 2294,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2272,
											"end": 2294,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2264,
											"end": 2337,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "125"
										},
										{
											"begin": 2264,
											"end": 2337,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2264,
											"end": 2337,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2264,
											"end": 2337,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2264,
											"end": 2337,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2264,
											"end": 2337,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2264,
											"end": 2337,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2264,
											"end": 2337,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2264,
											"end": 2337,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "64"
										},
										{
											"begin": 2264,
											"end": 2337,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2264,
											"end": 2337,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "127"
										},
										{
											"begin": 2264,
											"end": 2337,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2264,
											"end": 2337,
											"name": "tag",
											"source": 0,
											"value": "125"
										},
										{
											"begin": 2264,
											"end": 2337,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2347,
											"end": 2375,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "128"
										},
										{
											"begin": 2366,
											"end": 2374,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2347,
											"end": 2365,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 2347,
											"end": 2375,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2347,
											"end": 2375,
											"name": "tag",
											"source": 0,
											"value": "128"
										},
										{
											"begin": 2347,
											"end": 2375,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2184,
											"end": 2382,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2184,
											"end": 2382,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 876,
											"end": 972,
											"name": "tag",
											"source": 2,
											"value": "61"
										},
										{
											"begin": 876,
											"end": 972,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 955,
											"end": 965,
											"name": "CALLER",
											"source": 2
										},
										{
											"begin": 876,
											"end": 972,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 876,
											"end": 972,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 1196,
											"end": 1356,
											"name": "tag",
											"source": 9,
											"value": "68"
										},
										{
											"begin": 1196,
											"end": 1356,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1302,
											"end": 1320,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 1302,
											"end": 1320,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 1282,
											"end": 1286,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1302,
											"end": 1320,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1302,
											"end": 1320,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1302,
											"end": 1320,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 1302,
											"end": 1310,
											"name": "PUSH",
											"source": 9,
											"value": "67"
										},
										{
											"begin": 1302,
											"end": 1320,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 1302,
											"end": 1320,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 1302,
											"end": 1320,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 1302,
											"end": 1320,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1302,
											"end": 1320,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 1302,
											"end": 1328,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1302,
											"end": 1328,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 1302,
											"end": 1328,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 1302,
											"end": 1328,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 1302,
											"end": 1328,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1302,
											"end": 1328,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1302,
											"end": 1328,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 1302,
											"end": 1328,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 1302,
											"end": 1328,
											"name": "OR",
											"source": 9
										},
										{
											"begin": 1302,
											"end": 1328,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1302,
											"end": 1328,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 1302,
											"end": 1328,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 1196,
											"end": 1356,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 1196,
											"end": 1356,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 1196,
											"end": 1356,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1196,
											"end": 1356,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1196,
											"end": 1356,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 8040,
											"end": 8305,
											"name": "tag",
											"source": 6,
											"value": "85"
										},
										{
											"begin": 8040,
											"end": 8305,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 8109,
											"end": 8116,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 8292,
											"end": 8296,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8239,
											"end": 8297,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 8239,
											"end": 8297,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 8239,
											"end": 8297,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 8239,
											"end": 8297,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8239,
											"end": 8297,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "132"
										},
										{
											"begin": 8239,
											"end": 8297,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 8239,
											"end": 8297,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8239,
											"end": 8297,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "133"
										},
										{
											"begin": 8239,
											"end": 8297,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 8239,
											"end": 8297,
											"name": "tag",
											"source": 6,
											"value": "132"
										},
										{
											"begin": 8239,
											"end": 8297,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 8239,
											"end": 8297,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 8239,
											"end": 8297,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 8239,
											"end": 8297,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 8239,
											"end": 8297,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8239,
											"end": 8297,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 8239,
											"end": 8297,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 8239,
											"end": 8297,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 8239,
											"end": 8297,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8239,
											"end": 8297,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 8239,
											"end": 8297,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8239,
											"end": 8297,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 8239,
											"end": 8297,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 8229,
											"end": 8298,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 8229,
											"end": 8298,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 8229,
											"end": 8298,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8229,
											"end": 8298,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 8229,
											"end": 8298,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8229,
											"end": 8298,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 8222,
											"end": 8298,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8222,
											"end": 8298,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 8040,
											"end": 8305,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 8040,
											"end": 8305,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8040,
											"end": 8305,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 8040,
											"end": 8305,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 4293,
											"end": 4520,
											"name": "tag",
											"source": 6,
											"value": "86"
										},
										{
											"begin": 4293,
											"end": 4520,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4371,
											"end": 4378,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 4391,
											"end": 4408,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 4410,
											"end": 4428,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 4432,
											"end": 4459,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "135"
										},
										{
											"begin": 4443,
											"end": 4447,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 4449,
											"end": 4458,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 4432,
											"end": 4442,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "136"
										},
										{
											"begin": 4432,
											"end": 4459,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 4432,
											"end": 4459,
											"name": "tag",
											"source": 6,
											"value": "135"
										},
										{
											"begin": 4432,
											"end": 4459,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4390,
											"end": 4459,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 4390,
											"end": 4459,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 4390,
											"end": 4459,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 4390,
											"end": 4459,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 4469,
											"end": 4487,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "137"
										},
										{
											"begin": 4481,
											"end": 4486,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4469,
											"end": 4480,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "138"
										},
										{
											"begin": 4469,
											"end": 4487,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 4469,
											"end": 4487,
											"name": "tag",
											"source": 6,
											"value": "137"
										},
										{
											"begin": 4469,
											"end": 4487,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4504,
											"end": 4513,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 4293,
											"end": 4520,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4293,
											"end": 4520,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 2536,
											"end": 2723,
											"name": "tag",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 2536,
											"end": 2723,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2628,
											"end": 2634,
											"name": "PUSH",
											"source": 0,
											"value": "33"
										},
										{
											"begin": 2628,
											"end": 2634,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2628,
											"end": 2634,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2644,
											"end": 2661,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2644,
											"end": 2661,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2644,
											"end": 2661,
											"name": "AND",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2644,
											"end": 2661,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2644,
											"end": 2661,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2644,
											"end": 2661,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2644,
											"end": 2661,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 2644,
											"end": 2661,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2644,
											"end": 2661,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 2644,
											"end": 2661,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 2676,
											"end": 2716,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2676,
											"end": 2716,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2628,
											"end": 2634,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2628,
											"end": 2634,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2628,
											"end": 2634,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2644,
											"end": 2661,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2628,
											"end": 2634,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2628,
											"end": 2634,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2676,
											"end": 2716,
											"name": "PUSH",
											"source": 0,
											"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
										},
										{
											"begin": 2676,
											"end": 2716,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2609,
											"end": 2625,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2609,
											"end": 2625,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2676,
											"end": 2716,
											"name": "LOG3",
											"source": 0
										},
										{
											"begin": 2536,
											"end": 2723,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2536,
											"end": 2723,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2536,
											"end": 2723,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 988,
											"end": 1114,
											"name": "tag",
											"source": 0,
											"value": "110"
										},
										{
											"begin": 988,
											"end": 1114,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 539,
											"end": 552,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 539,
											"end": 552,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 539,
											"end": 552,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 539,
											"end": 552,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 539,
											"end": 552,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 539,
											"end": 552,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 539,
											"end": 552,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 539,
											"end": 552,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 539,
											"end": 569,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "141"
										},
										{
											"begin": 539,
											"end": 569,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 557,
											"end": 569,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 557,
											"end": 569,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 557,
											"end": 569,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 557,
											"end": 569,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 556,
											"end": 569,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 539,
											"end": 569,
											"name": "tag",
											"source": 1,
											"value": "141"
										},
										{
											"begin": 539,
											"end": 569,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 531,
											"end": 620,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "142"
										},
										{
											"begin": 531,
											"end": 620,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 531,
											"end": 620,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 531,
											"end": 620,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 531,
											"end": 620,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 531,
											"end": 620,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 531,
											"end": 620,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 531,
											"end": 620,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 531,
											"end": 620,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "64"
										},
										{
											"begin": 531,
											"end": 620,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 531,
											"end": 620,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "106"
										},
										{
											"begin": 531,
											"end": 620,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 531,
											"end": 620,
											"name": "tag",
											"source": 1,
											"value": "142"
										},
										{
											"begin": 531,
											"end": 620,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 631,
											"end": 650,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 654,
											"end": 667,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 654,
											"end": 667,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 654,
											"end": 667,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 654,
											"end": 667,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 654,
											"end": 667,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 654,
											"end": 667,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 653,
											"end": 667,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 677,
											"end": 775,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 677,
											"end": 775,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 677,
											"end": 775,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "144"
										},
										{
											"begin": 677,
											"end": 775,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 711,
											"end": 724,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 711,
											"end": 731,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 711,
											"end": 731,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF00"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 711,
											"end": 731,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 711,
											"end": 731,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 711,
											"end": 731,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 711,
											"end": 731,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 711,
											"end": 731,
											"name": "OR",
											"source": 1
										},
										{
											"begin": 745,
											"end": 764,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 727,
											"end": 731,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 745,
											"end": 764,
											"name": "OR",
											"source": 1
										},
										{
											"begin": 745,
											"end": 764,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 745,
											"end": 764,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 677,
											"end": 775,
											"name": "tag",
											"source": 1,
											"value": "144"
										},
										{
											"begin": 677,
											"end": 775,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1045,
											"end": 1071,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "146"
										},
										{
											"begin": 1045,
											"end": 1069,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "147"
										},
										{
											"begin": 1045,
											"end": 1071,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1045,
											"end": 1071,
											"name": "tag",
											"source": 0,
											"value": "146"
										},
										{
											"begin": 1045,
											"end": 1071,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1081,
											"end": 1107,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "148"
										},
										{
											"begin": 1081,
											"end": 1105,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "149"
										},
										{
											"begin": 1081,
											"end": 1107,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1081,
											"end": 1107,
											"name": "tag",
											"source": 0,
											"value": "148"
										},
										{
											"begin": 1081,
											"end": 1107,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 801,
											"end": 815,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 797,
											"end": 863,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 797,
											"end": 863,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "128"
										},
										{
											"begin": 797,
											"end": 863,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 847,
											"end": 852,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 831,
											"end": 852,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 831,
											"end": 852,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF00"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 831,
											"end": 852,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 831,
											"end": 852,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 831,
											"end": 852,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 988,
											"end": 1114,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 988,
											"end": 1114,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 2228,
											"end": 3507,
											"name": "tag",
											"source": 6,
											"value": "136"
										},
										{
											"begin": 2228,
											"end": 3507,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2309,
											"end": 2316,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 2318,
											"end": 2330,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 2539,
											"end": 2548,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 2539,
											"end": 2555,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 2559,
											"end": 2561,
											"name": "PUSH",
											"source": 6,
											"value": "41"
										},
										{
											"begin": 2539,
											"end": 2561,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 2535,
											"end": 3501,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 2535,
											"end": 3501,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "152"
										},
										{
											"begin": 2535,
											"end": 3501,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 2828,
											"end": 2832,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 2813,
											"end": 2833,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 2813,
											"end": 2833,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2807,
											"end": 2834,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 2877,
											"end": 2881,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 2862,
											"end": 2882,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 2862,
											"end": 2882,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2856,
											"end": 2883,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 2934,
											"end": 2938,
											"name": "PUSH",
											"source": 6,
											"value": "60"
										},
										{
											"begin": 2919,
											"end": 2939,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 2919,
											"end": 2939,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2913,
											"end": 2940,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 2577,
											"end": 2586,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 2905,
											"end": 2941,
											"name": "BYTE",
											"source": 6
										},
										{
											"begin": 2975,
											"end": 3000,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "153"
										},
										{
											"begin": 2986,
											"end": 2990,
											"name": "DUP8",
											"source": 6
										},
										{
											"begin": 2905,
											"end": 2941,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 2807,
											"end": 2834,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 2856,
											"end": 2883,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 2975,
											"end": 2985,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "154"
										},
										{
											"begin": 2975,
											"end": 3000,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 2975,
											"end": 3000,
											"name": "tag",
											"source": 6,
											"value": "153"
										},
										{
											"begin": 2975,
											"end": 3000,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2968,
											"end": 3000,
											"name": "SWAP5",
											"source": 6
										},
										{
											"begin": 2968,
											"end": 3000,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2968,
											"end": 3000,
											"name": "SWAP5",
											"source": 6
										},
										{
											"begin": 2968,
											"end": 3000,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2968,
											"end": 3000,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2968,
											"end": 3000,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2968,
											"end": 3000,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2968,
											"end": 3000,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "159"
										},
										{
											"begin": 2968,
											"end": 3000,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 2535,
											"end": 3501,
											"name": "tag",
											"source": 6,
											"value": "152"
										},
										{
											"begin": 2535,
											"end": 3501,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3021,
											"end": 3030,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 3021,
											"end": 3037,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 3041,
											"end": 3043,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 3021,
											"end": 3043,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 3017,
											"end": 3501,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 3017,
											"end": 3501,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "156"
										},
										{
											"begin": 3017,
											"end": 3501,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 3290,
											"end": 3294,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 3275,
											"end": 3295,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 3275,
											"end": 3295,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 3269,
											"end": 3296,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 3340,
											"end": 3344,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 3325,
											"end": 3345,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 3325,
											"end": 3345,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 3319,
											"end": 3346,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 3380,
											"end": 3403,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "157"
										},
										{
											"begin": 3391,
											"end": 3395,
											"name": "DUP7",
											"source": 6
										},
										{
											"begin": 3269,
											"end": 3296,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 3319,
											"end": 3346,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 3380,
											"end": 3390,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "158"
										},
										{
											"begin": 3380,
											"end": 3403,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 3380,
											"end": 3403,
											"name": "tag",
											"source": 6,
											"value": "157"
										},
										{
											"begin": 3380,
											"end": 3403,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3373,
											"end": 3403,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 3373,
											"end": 3403,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3373,
											"end": 3403,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 3373,
											"end": 3403,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3373,
											"end": 3403,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3373,
											"end": 3403,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3373,
											"end": 3403,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "159"
										},
										{
											"begin": 3373,
											"end": 3403,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 3017,
											"end": 3501,
											"name": "tag",
											"source": 6,
											"value": "156"
										},
										{
											"begin": 3017,
											"end": 3501,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3450,
											"end": 3451,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 3450,
											"end": 3451,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3454,
											"end": 3489,
											"name": "PUSH",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 3017,
											"end": 3501,
											"name": "tag",
											"source": 6,
											"value": "159"
										},
										{
											"begin": 3017,
											"end": 3501,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2228,
											"end": 3507,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 2228,
											"end": 3507,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2228,
											"end": 3507,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 2228,
											"end": 3507,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2228,
											"end": 3507,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2228,
											"end": 3507,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 533,
											"end": 1164,
											"name": "tag",
											"source": 6,
											"value": "138"
										},
										{
											"begin": 533,
											"end": 1164,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 610,
											"end": 630,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 601,
											"end": 606,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 601,
											"end": 630,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 601,
											"end": 630,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 601,
											"end": 630,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 601,
											"end": 630,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 601,
											"end": 630,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "162"
										},
										{
											"begin": 601,
											"end": 630,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4E487B71"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 601,
											"end": 630,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 601,
											"end": 630,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 601,
											"end": 630,
											"name": "PUSH",
											"source": 6,
											"value": "21"
										},
										{
											"begin": 601,
											"end": 630,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 601,
											"end": 630,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 601,
											"end": 630,
											"name": "PUSH",
											"source": 6,
											"value": "24"
										},
										{
											"begin": 601,
											"end": 630,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 601,
											"end": 630,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 601,
											"end": 630,
											"name": "tag",
											"source": 6,
											"value": "162"
										},
										{
											"begin": 601,
											"end": 630,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 601,
											"end": 630,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 597,
											"end": 1158,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 597,
											"end": 1158,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "163"
										},
										{
											"begin": 597,
											"end": 1158,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 646,
											"end": 653,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "128"
										},
										{
											"begin": 646,
											"end": 653,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 597,
											"end": 1158,
											"name": "tag",
											"source": 6,
											"value": "163"
										},
										{
											"begin": 597,
											"end": 1158,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 706,
											"end": 735,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 697,
											"end": 702,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 697,
											"end": 735,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 697,
											"end": 735,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 697,
											"end": 735,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 697,
											"end": 735,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 697,
											"end": 735,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "166"
										},
										{
											"begin": 697,
											"end": 735,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4E487B71"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 697,
											"end": 735,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 697,
											"end": 735,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 697,
											"end": 735,
											"name": "PUSH",
											"source": 6,
											"value": "21"
										},
										{
											"begin": 697,
											"end": 735,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 697,
											"end": 735,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 697,
											"end": 735,
											"name": "PUSH",
											"source": 6,
											"value": "24"
										},
										{
											"begin": 697,
											"end": 735,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 697,
											"end": 735,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 697,
											"end": 735,
											"name": "tag",
											"source": 6,
											"value": "166"
										},
										{
											"begin": 697,
											"end": 735,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 697,
											"end": 735,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 693,
											"end": 1158,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 693,
											"end": 1158,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "167"
										},
										{
											"begin": 693,
											"end": 1158,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 751,
											"end": 785,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 751,
											"end": 785,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 751,
											"end": 785,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 751,
											"end": 785,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 751,
											"end": 785,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 751,
											"end": 785,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 751,
											"end": 785,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "64"
										},
										{
											"begin": 751,
											"end": 785,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 751,
											"end": 785,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "169"
										},
										{
											"begin": 751,
											"end": 785,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 693,
											"end": 1158,
											"name": "tag",
											"source": 6,
											"value": "167"
										},
										{
											"begin": 693,
											"end": 1158,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 815,
											"end": 850,
											"name": "PUSH",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 806,
											"end": 811,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 806,
											"end": 850,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 806,
											"end": 850,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 806,
											"end": 850,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 806,
											"end": 850,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 806,
											"end": 850,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "172"
										},
										{
											"begin": 806,
											"end": 850,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4E487B71"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 806,
											"end": 850,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 806,
											"end": 850,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 806,
											"end": 850,
											"name": "PUSH",
											"source": 6,
											"value": "21"
										},
										{
											"begin": 806,
											"end": 850,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 806,
											"end": 850,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 806,
											"end": 850,
											"name": "PUSH",
											"source": 6,
											"value": "24"
										},
										{
											"begin": 806,
											"end": 850,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 806,
											"end": 850,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 806,
											"end": 850,
											"name": "tag",
											"source": 6,
											"value": "172"
										},
										{
											"begin": 806,
											"end": 850,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 806,
											"end": 850,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 802,
											"end": 1158,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 802,
											"end": 1158,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "173"
										},
										{
											"begin": 802,
											"end": 1158,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 866,
											"end": 907,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 866,
											"end": 907,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 866,
											"end": 907,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 866,
											"end": 907,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 866,
											"end": 907,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 866,
											"end": 907,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 866,
											"end": 907,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "64"
										},
										{
											"begin": 866,
											"end": 907,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 866,
											"end": 907,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "175"
										},
										{
											"begin": 866,
											"end": 907,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 802,
											"end": 1158,
											"name": "tag",
											"source": 6,
											"value": "173"
										},
										{
											"begin": 802,
											"end": 1158,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 937,
											"end": 967,
											"name": "PUSH",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 928,
											"end": 933,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 928,
											"end": 967,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 928,
											"end": 967,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 928,
											"end": 967,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 928,
											"end": 967,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 928,
											"end": 967,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "178"
										},
										{
											"begin": 928,
											"end": 967,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4E487B71"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 928,
											"end": 967,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 928,
											"end": 967,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 928,
											"end": 967,
											"name": "PUSH",
											"source": 6,
											"value": "21"
										},
										{
											"begin": 928,
											"end": 967,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 928,
											"end": 967,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 928,
											"end": 967,
											"name": "PUSH",
											"source": 6,
											"value": "24"
										},
										{
											"begin": 928,
											"end": 967,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 928,
											"end": 967,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 928,
											"end": 967,
											"name": "tag",
											"source": 6,
											"value": "178"
										},
										{
											"begin": 928,
											"end": 967,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 928,
											"end": 967,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 924,
											"end": 1158,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 924,
											"end": 1158,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "179"
										},
										{
											"begin": 924,
											"end": 1158,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 983,
											"end": 1027,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 983,
											"end": 1027,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 983,
											"end": 1027,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 983,
											"end": 1027,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 983,
											"end": 1027,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 983,
											"end": 1027,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 983,
											"end": 1027,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "64"
										},
										{
											"begin": 983,
											"end": 1027,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 983,
											"end": 1027,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "181"
										},
										{
											"begin": 983,
											"end": 1027,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 924,
											"end": 1158,
											"name": "tag",
											"source": 6,
											"value": "179"
										},
										{
											"begin": 924,
											"end": 1158,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1057,
											"end": 1087,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 1048,
											"end": 1053,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1048,
											"end": 1087,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 1048,
											"end": 1087,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1048,
											"end": 1087,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 1048,
											"end": 1087,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 1048,
											"end": 1087,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "184"
										},
										{
											"begin": 1048,
											"end": 1087,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4E487B71"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1048,
											"end": 1087,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1048,
											"end": 1087,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1048,
											"end": 1087,
											"name": "PUSH",
											"source": 6,
											"value": "21"
										},
										{
											"begin": 1048,
											"end": 1087,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 1048,
											"end": 1087,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1048,
											"end": 1087,
											"name": "PUSH",
											"source": 6,
											"value": "24"
										},
										{
											"begin": 1048,
											"end": 1087,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1048,
											"end": 1087,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 1048,
											"end": 1087,
											"name": "tag",
											"source": 6,
											"value": "184"
										},
										{
											"begin": 1048,
											"end": 1087,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1048,
											"end": 1087,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 1044,
											"end": 1158,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 1044,
											"end": 1158,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "128"
										},
										{
											"begin": 1044,
											"end": 1158,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1103,
											"end": 1147,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1103,
											"end": 1147,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1103,
											"end": 1147,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1103,
											"end": 1147,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1103,
											"end": 1147,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 1103,
											"end": 1147,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1103,
											"end": 1147,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "64"
										},
										{
											"begin": 1103,
											"end": 1147,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1103,
											"end": 1147,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "187"
										},
										{
											"begin": 1103,
											"end": 1147,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 807,
											"end": 871,
											"name": "tag",
											"source": 2,
											"value": "147"
										},
										{
											"begin": 807,
											"end": 871,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 539,
											"end": 552,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 539,
											"end": 552,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 539,
											"end": 552,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 539,
											"end": 552,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 539,
											"end": 552,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 539,
											"end": 552,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 539,
											"end": 552,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 539,
											"end": 552,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 539,
											"end": 569,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "189"
										},
										{
											"begin": 539,
											"end": 569,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 557,
											"end": 569,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 557,
											"end": 569,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 557,
											"end": 569,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 557,
											"end": 569,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 556,
											"end": 569,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 539,
											"end": 569,
											"name": "tag",
											"source": 1,
											"value": "189"
										},
										{
											"begin": 539,
											"end": 569,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 531,
											"end": 620,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "190"
										},
										{
											"begin": 531,
											"end": 620,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 531,
											"end": 620,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 531,
											"end": 620,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 531,
											"end": 620,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 531,
											"end": 620,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 531,
											"end": 620,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 531,
											"end": 620,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 531,
											"end": 620,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "64"
										},
										{
											"begin": 531,
											"end": 620,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 531,
											"end": 620,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "106"
										},
										{
											"begin": 531,
											"end": 620,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 531,
											"end": 620,
											"name": "tag",
											"source": 1,
											"value": "190"
										},
										{
											"begin": 531,
											"end": 620,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 631,
											"end": 650,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 654,
											"end": 667,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 654,
											"end": 667,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 654,
											"end": 667,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 654,
											"end": 667,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 654,
											"end": 667,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 654,
											"end": 667,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 653,
											"end": 667,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 677,
											"end": 775,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 677,
											"end": 775,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 677,
											"end": 775,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "148"
										},
										{
											"begin": 677,
											"end": 775,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 711,
											"end": 724,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 711,
											"end": 731,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 711,
											"end": 731,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF00"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 711,
											"end": 731,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 711,
											"end": 731,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 711,
											"end": 731,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 711,
											"end": 731,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 711,
											"end": 731,
											"name": "OR",
											"source": 1
										},
										{
											"begin": 745,
											"end": 764,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 727,
											"end": 731,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 745,
											"end": 764,
											"name": "OR",
											"source": 1
										},
										{
											"begin": 745,
											"end": 764,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 745,
											"end": 764,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 801,
											"end": 815,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 797,
											"end": 863,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 797,
											"end": 863,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "128"
										},
										{
											"begin": 797,
											"end": 863,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 847,
											"end": 852,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 831,
											"end": 852,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 831,
											"end": 852,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF00"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 831,
											"end": 852,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 831,
											"end": 852,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 831,
											"end": 852,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 807,
											"end": 871,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 807,
											"end": 871,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 1120,
											"end": 1226,
											"name": "tag",
											"source": 0,
											"value": "149"
										},
										{
											"begin": 1120,
											"end": 1226,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 539,
											"end": 552,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 539,
											"end": 552,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 539,
											"end": 552,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 539,
											"end": 552,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 539,
											"end": 552,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 539,
											"end": 552,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 539,
											"end": 552,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 539,
											"end": 552,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 539,
											"end": 569,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "196"
										},
										{
											"begin": 539,
											"end": 569,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 557,
											"end": 569,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 557,
											"end": 569,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 557,
											"end": 569,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 557,
											"end": 569,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 556,
											"end": 569,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 539,
											"end": 569,
											"name": "tag",
											"source": 1,
											"value": "196"
										},
										{
											"begin": 539,
											"end": 569,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 531,
											"end": 620,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "197"
										},
										{
											"begin": 531,
											"end": 620,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 531,
											"end": 620,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 531,
											"end": 620,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 531,
											"end": 620,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 531,
											"end": 620,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 531,
											"end": 620,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 531,
											"end": 620,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 531,
											"end": 620,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "64"
										},
										{
											"begin": 531,
											"end": 620,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 531,
											"end": 620,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "106"
										},
										{
											"begin": 531,
											"end": 620,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 531,
											"end": 620,
											"name": "tag",
											"source": 1,
											"value": "197"
										},
										{
											"begin": 531,
											"end": 620,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 631,
											"end": 650,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 654,
											"end": 667,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 654,
											"end": 667,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 654,
											"end": 667,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 654,
											"end": 667,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 654,
											"end": 667,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 654,
											"end": 667,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 653,
											"end": 667,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 677,
											"end": 775,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 677,
											"end": 775,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 677,
											"end": 775,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "199"
										},
										{
											"begin": 677,
											"end": 775,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 711,
											"end": 724,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 711,
											"end": 731,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 711,
											"end": 731,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF00"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 711,
											"end": 731,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 711,
											"end": 731,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 711,
											"end": 731,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 711,
											"end": 731,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 711,
											"end": 731,
											"name": "OR",
											"source": 1
										},
										{
											"begin": 745,
											"end": 764,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 727,
											"end": 731,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 745,
											"end": 764,
											"name": "OR",
											"source": 1
										},
										{
											"begin": 745,
											"end": 764,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 745,
											"end": 764,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 677,
											"end": 775,
											"name": "tag",
											"source": 1,
											"value": "199"
										},
										{
											"begin": 677,
											"end": 775,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1187,
											"end": 1219,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "148"
										},
										{
											"begin": 1206,
											"end": 1218,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "202"
										},
										{
											"begin": 1206,
											"end": 1216,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "61"
										},
										{
											"begin": 1206,
											"end": 1218,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1206,
											"end": 1218,
											"name": "tag",
											"source": 0,
											"value": "202"
										},
										{
											"begin": 1206,
											"end": 1218,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1187,
											"end": 1205,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 1187,
											"end": 1219,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 5744,
											"end": 7347,
											"name": "tag",
											"source": 6,
											"value": "154"
										},
										{
											"begin": 5744,
											"end": 7347,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5870,
											"end": 5877,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 5870,
											"end": 5877,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 6794,
											"end": 6860,
											"name": "PUSH",
											"source": 6,
											"value": "7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0"
										},
										{
											"begin": 6781,
											"end": 6860,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 6781,
											"end": 6860,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 6777,
											"end": 6938,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 6777,
											"end": 6938,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "205"
										},
										{
											"begin": 6777,
											"end": 6938,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6892,
											"end": 6893,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 6892,
											"end": 6893,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6896,
											"end": 6926,
											"name": "PUSH",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 6876,
											"end": 6927,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "204"
										},
										{
											"begin": 6876,
											"end": 6927,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 6777,
											"end": 6938,
											"name": "tag",
											"source": 6,
											"value": "205"
										},
										{
											"begin": 6777,
											"end": 6938,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 6951,
											"end": 6952,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 6951,
											"end": 6958,
											"name": "PUSH",
											"source": 6,
											"value": "FF"
										},
										{
											"begin": 6951,
											"end": 6958,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 6956,
											"end": 6958,
											"name": "PUSH",
											"source": 6,
											"value": "1B"
										},
										{
											"begin": 6951,
											"end": 6958,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 6951,
											"end": 6958,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 6951,
											"end": 6969,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 6951,
											"end": 6969,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 6951,
											"end": 6969,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "206"
										},
										{
											"begin": 6951,
											"end": 6969,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 6951,
											"end": 6969,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 6962,
											"end": 6963,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 6962,
											"end": 6969,
											"name": "PUSH",
											"source": 6,
											"value": "FF"
										},
										{
											"begin": 6962,
											"end": 6969,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 6967,
											"end": 6969,
											"name": "PUSH",
											"source": 6,
											"value": "1C"
										},
										{
											"begin": 6962,
											"end": 6969,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 6962,
											"end": 6969,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 6951,
											"end": 6969,
											"name": "tag",
											"source": 6,
											"value": "206"
										},
										{
											"begin": 6951,
											"end": 6969,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 6947,
											"end": 7047,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 6947,
											"end": 7047,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "207"
										},
										{
											"begin": 6947,
											"end": 7047,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7001,
											"end": 7002,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 7001,
											"end": 7002,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7005,
											"end": 7035,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 6985,
											"end": 7036,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "204"
										},
										{
											"begin": 6985,
											"end": 7036,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 6947,
											"end": 7047,
											"name": "tag",
											"source": 6,
											"value": "207"
										},
										{
											"begin": 6947,
											"end": 7047,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 7141,
											"end": 7155,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 7158,
											"end": 7182,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 7168,
											"end": 7172,
											"name": "DUP8",
											"source": 6
										},
										{
											"begin": 7174,
											"end": 7175,
											"name": "DUP8",
											"source": 6
										},
										{
											"begin": 7177,
											"end": 7178,
											"name": "DUP8",
											"source": 6
										},
										{
											"begin": 7180,
											"end": 7181,
											"name": "DUP8",
											"source": 6
										},
										{
											"begin": 7158,
											"end": 7182,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 7158,
											"end": 7182,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 7158,
											"end": 7182,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 7158,
											"end": 7182,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7158,
											"end": 7182,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 7158,
											"end": 7182,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 7158,
											"end": 7182,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7158,
											"end": 7182,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 7158,
											"end": 7182,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 7158,
											"end": 7182,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 7158,
											"end": 7182,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 7158,
											"end": 7182,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "208"
										},
										{
											"begin": 7158,
											"end": 7182,
											"name": "SWAP5",
											"source": 6
										},
										{
											"begin": 7158,
											"end": 7182,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 7158,
											"end": 7182,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 7158,
											"end": 7182,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 7158,
											"end": 7182,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7158,
											"end": 7182,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "209"
										},
										{
											"begin": 7158,
											"end": 7182,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 7158,
											"end": 7182,
											"name": "tag",
											"source": 6,
											"value": "208"
										},
										{
											"begin": 7158,
											"end": 7182,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 7158,
											"end": 7182,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 7158,
											"end": 7182,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 7158,
											"end": 7182,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 7158,
											"end": 7182,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 7158,
											"end": 7182,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7158,
											"end": 7182,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 7158,
											"end": 7182,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7158,
											"end": 7182,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 7158,
											"end": 7182,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 7158,
											"end": 7182,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 7158,
											"end": 7182,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7158,
											"end": 7182,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 7158,
											"end": 7182,
											"name": "GAS",
											"source": 6
										},
										{
											"begin": 7158,
											"end": 7182,
											"name": "STATICCALL",
											"source": 6
										},
										{
											"begin": 7158,
											"end": 7182,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 7158,
											"end": 7182,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 7158,
											"end": 7182,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 7158,
											"end": 7182,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "211"
										},
										{
											"begin": 7158,
											"end": 7182,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 7158,
											"end": 7182,
											"name": "RETURNDATASIZE",
											"source": 6
										},
										{
											"begin": 7158,
											"end": 7182,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 7158,
											"end": 7182,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 7158,
											"end": 7182,
											"name": "RETURNDATACOPY",
											"source": 6
										},
										{
											"begin": 7158,
											"end": 7182,
											"name": "RETURNDATASIZE",
											"source": 6
										},
										{
											"begin": 7158,
											"end": 7182,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 7158,
											"end": 7182,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 7158,
											"end": 7182,
											"name": "tag",
											"source": 6,
											"value": "211"
										},
										{
											"begin": 7158,
											"end": 7182,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7158,
											"end": 7182,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 7158,
											"end": 7182,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 7158,
											"end": 7182,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7158,
											"end": 7182,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 7158,
											"end": 7182,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7196,
											"end": 7216,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7196,
											"end": 7216,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 7192,
											"end": 7293,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "212"
										},
										{
											"begin": 7192,
											"end": 7293,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 7248,
											"end": 7249,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 7252,
											"end": 7281,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 7232,
											"end": 7282,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 7232,
											"end": 7282,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 7232,
											"end": 7282,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 7232,
											"end": 7282,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 7232,
											"end": 7282,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 7232,
											"end": 7282,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "204"
										},
										{
											"begin": 7232,
											"end": 7282,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 7192,
											"end": 7293,
											"name": "tag",
											"source": 6,
											"value": "212"
										},
										{
											"begin": 7192,
											"end": 7293,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 7311,
											"end": 7317,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7319,
											"end": 7339,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 7319,
											"end": 7339,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5744,
											"end": 7347,
											"name": "tag",
											"source": 6,
											"value": "204"
										},
										{
											"begin": 5744,
											"end": 7347,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5744,
											"end": 7347,
											"name": "SWAP5",
											"source": 6
										},
										{
											"begin": 5744,
											"end": 7347,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5744,
											"end": 7347,
											"name": "SWAP5",
											"source": 6
										},
										{
											"begin": 5744,
											"end": 7347,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 5744,
											"end": 7347,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5744,
											"end": 7347,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5744,
											"end": 7347,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5744,
											"end": 7347,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 4774,
											"end": 5153,
											"name": "tag",
											"source": 6,
											"value": "158"
										},
										{
											"begin": 4774,
											"end": 5153,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4884,
											"end": 4891,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 4884,
											"end": 4891,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4981,
											"end": 5056,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 4981,
											"end": 5056,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 5082,
											"end": 5085,
											"name": "PUSH",
											"source": 6,
											"value": "FF"
										},
										{
											"begin": 5078,
											"end": 5090,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 5078,
											"end": 5090,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5078,
											"end": 5090,
											"name": "SHR",
											"source": 6
										},
										{
											"begin": 5092,
											"end": 5094,
											"name": "PUSH",
											"source": 6,
											"value": "1B"
										},
										{
											"begin": 5074,
											"end": 5095,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5121,
											"end": 5146,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "214"
										},
										{
											"begin": 5132,
											"end": 5136,
											"name": "DUP8",
											"source": 6
										},
										{
											"begin": 5074,
											"end": 5095,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 5141,
											"end": 5142,
											"name": "DUP9",
											"source": 6
										},
										{
											"begin": 4981,
											"end": 5056,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 5121,
											"end": 5131,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "154"
										},
										{
											"begin": 5121,
											"end": 5146,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 5121,
											"end": 5146,
											"name": "tag",
											"source": 6,
											"value": "214"
										},
										{
											"begin": 5121,
											"end": 5146,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5114,
											"end": 5146,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 5114,
											"end": 5146,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5114,
											"end": 5146,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 5114,
											"end": 5146,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5114,
											"end": 5146,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5114,
											"end": 5146,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 4774,
											"end": 5153,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 4774,
											"end": 5153,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 4774,
											"end": 5153,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 4774,
											"end": 5153,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 4774,
											"end": 5153,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 4774,
											"end": 5153,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 4774,
											"end": 5153,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 14,
											"end": 621,
											"name": "tag",
											"source": 10,
											"value": "216"
										},
										{
											"begin": 14,
											"end": 621,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 14,
											"end": 621,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 110,
											"end": 128,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 151,
											"end": 153,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 143,
											"end": 149,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 140,
											"end": 154,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 137,
											"end": 139,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 137,
											"end": 139,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "219"
										},
										{
											"begin": 137,
											"end": 139,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 157,
											"end": 175,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "219"
										},
										{
											"begin": 157,
											"end": 175,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "220"
										},
										{
											"begin": 157,
											"end": 175,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 157,
											"end": 175,
											"name": "tag",
											"source": 10,
											"value": "219"
										},
										{
											"begin": 157,
											"end": 175,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 206,
											"end": 208,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 200,
											"end": 209,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 279,
											"end": 281,
											"name": "PUSH",
											"source": 10,
											"value": "1F"
										},
										{
											"begin": 256,
											"end": 273,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 256,
											"end": 273,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 252,
											"end": 283,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 240,
											"end": 284,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 240,
											"end": 284,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 286,
											"end": 290,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 236,
											"end": 291,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 306,
											"end": 324,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 306,
											"end": 324,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 306,
											"end": 324,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 326,
											"end": 348,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 326,
											"end": 348,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 326,
											"end": 348,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 303,
											"end": 349,
											"name": "OR",
											"source": 10
										},
										{
											"begin": 300,
											"end": 302,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 300,
											"end": 302,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "222"
										},
										{
											"begin": 300,
											"end": 302,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 352,
											"end": 370,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "222"
										},
										{
											"begin": 352,
											"end": 370,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "220"
										},
										{
											"begin": 352,
											"end": 370,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 352,
											"end": 370,
											"name": "tag",
											"source": 10,
											"value": "222"
										},
										{
											"begin": 352,
											"end": 370,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 388,
											"end": 390,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 381,
											"end": 403,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 436,
											"end": 458,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 436,
											"end": 458,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 436,
											"end": 458,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 421,
											"end": 427,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 421,
											"end": 427,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 473,
											"end": 489,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 473,
											"end": 489,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 473,
											"end": 489,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 470,
											"end": 495,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "LT",
											"source": -1
										},
										{
											"begin": 467,
											"end": 469,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 467,
											"end": 469,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "223"
										},
										{
											"begin": 467,
											"end": 469,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 508,
											"end": 509,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 505,
											"end": 506,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 498,
											"end": 510,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 467,
											"end": 469,
											"name": "tag",
											"source": 10,
											"value": "223"
										},
										{
											"begin": 467,
											"end": 469,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 558,
											"end": 564,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 553,
											"end": 556,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 546,
											"end": 550,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 538,
											"end": 544,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 534,
											"end": 551,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 521,
											"end": 565,
											"name": "CALLDATACOPY",
											"source": 10
										},
										{
											"begin": 613,
											"end": 614,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 606,
											"end": 610,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 597,
											"end": 603,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 589,
											"end": 595,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 585,
											"end": 604,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 581,
											"end": 611,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 574,
											"end": 615,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 574,
											"end": 615,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 574,
											"end": 615,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 90,
											"end": 621,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 90,
											"end": 621,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 90,
											"end": 621,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 90,
											"end": 621,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 90,
											"end": 621,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 90,
											"end": 621,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 626,
											"end": 801,
											"name": "tag",
											"source": 10,
											"value": "224"
										},
										{
											"begin": 626,
											"end": 801,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 696,
											"end": 716,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 696,
											"end": 716,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 745,
											"end": 776,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 745,
											"end": 776,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 735,
											"end": 777,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 735,
											"end": 777,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 725,
											"end": 727,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "92"
										},
										{
											"begin": 725,
											"end": 727,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 791,
											"end": 792,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 788,
											"end": 789,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 781,
											"end": 793,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 806,
											"end": 968,
											"name": "tag",
											"source": 10,
											"value": "227"
										},
										{
											"begin": 806,
											"end": 968,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 873,
											"end": 893,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 873,
											"end": 893,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 929,
											"end": 942,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 929,
											"end": 942,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 922,
											"end": 943,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 912,
											"end": 944,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 944,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 902,
											"end": 904,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "92"
										},
										{
											"begin": 902,
											"end": 904,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 958,
											"end": 959,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 955,
											"end": 956,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 948,
											"end": 960,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 973,
											"end": 1171,
											"name": "tag",
											"source": 10,
											"value": "32"
										},
										{
											"begin": 973,
											"end": 1171,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 973,
											"end": 1171,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1085,
											"end": 1087,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1073,
											"end": 1082,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1064,
											"end": 1071,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 1060,
											"end": 1083,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 1056,
											"end": 1088,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 1053,
											"end": 1055,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1053,
											"end": 1055,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "231"
										},
										{
											"begin": 1053,
											"end": 1055,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 1106,
											"end": 1112,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1098,
											"end": 1104,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1091,
											"end": 1113,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 1053,
											"end": 1055,
											"name": "tag",
											"source": 10,
											"value": "231"
										},
										{
											"begin": 1053,
											"end": 1055,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1134,
											"end": 1165,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "67"
										},
										{
											"begin": 1155,
											"end": 1164,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1134,
											"end": 1165,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "224"
										},
										{
											"begin": 1134,
											"end": 1165,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 1176,
											"end": 1444,
											"name": "tag",
											"source": 10,
											"value": "17"
										},
										{
											"begin": 1176,
											"end": 1444,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1176,
											"end": 1444,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1176,
											"end": 1444,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1302,
											"end": 1304,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 1290,
											"end": 1299,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 1281,
											"end": 1288,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 1277,
											"end": 1300,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 1273,
											"end": 1305,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 1270,
											"end": 1272,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1270,
											"end": 1272,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "234"
										},
										{
											"begin": 1270,
											"end": 1272,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 1323,
											"end": 1329,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1321,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1308,
											"end": 1330,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 1270,
											"end": 1272,
											"name": "tag",
											"source": 10,
											"value": "234"
										},
										{
											"begin": 1270,
											"end": 1272,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1351,
											"end": 1382,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "235"
										},
										{
											"begin": 1372,
											"end": 1381,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 1351,
											"end": 1382,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "224"
										},
										{
											"begin": 1351,
											"end": 1382,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 1351,
											"end": 1382,
											"name": "tag",
											"source": 10,
											"value": "235"
										},
										{
											"begin": 1351,
											"end": 1382,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1341,
											"end": 1382,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1341,
											"end": 1382,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1401,
											"end": 1438,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "236"
										},
										{
											"begin": 1434,
											"end": 1436,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1423,
											"end": 1432,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 1419,
											"end": 1437,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1401,
											"end": 1438,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "227"
										},
										{
											"begin": 1401,
											"end": 1438,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 1401,
											"end": 1438,
											"name": "tag",
											"source": 10,
											"value": "236"
										},
										{
											"begin": 1401,
											"end": 1438,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1391,
											"end": 1438,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1391,
											"end": 1438,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1260,
											"end": 1444,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 1260,
											"end": 1444,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1260,
											"end": 1444,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 1260,
											"end": 1444,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1260,
											"end": 1444,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1260,
											"end": 1444,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 1449,
											"end": 2509,
											"name": "tag",
											"source": 10,
											"value": "27"
										},
										{
											"begin": 1449,
											"end": 2509,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1449,
											"end": 2509,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1449,
											"end": 2509,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1449,
											"end": 2509,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1449,
											"end": 2509,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1449,
											"end": 2509,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1645,
											"end": 1648,
											"name": "PUSH",
											"source": 10,
											"value": "A0"
										},
										{
											"begin": 1633,
											"end": 1642,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 1624,
											"end": 1631,
											"name": "DUP9",
											"source": 10
										},
										{
											"begin": 1620,
											"end": 1643,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 1616,
											"end": 1649,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 1613,
											"end": 1615,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1613,
											"end": 1615,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "238"
										},
										{
											"begin": 1613,
											"end": 1615,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 1667,
											"end": 1673,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1659,
											"end": 1665,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1652,
											"end": 1674,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 1613,
											"end": 1615,
											"name": "tag",
											"source": 10,
											"value": "238"
										},
										{
											"begin": 1613,
											"end": 1615,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1695,
											"end": 1723,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "239"
										},
										{
											"begin": 1713,
											"end": 1722,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 1695,
											"end": 1723,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "227"
										},
										{
											"begin": 1695,
											"end": 1723,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 1695,
											"end": 1723,
											"name": "tag",
											"source": 10,
											"value": "239"
										},
										{
											"begin": 1695,
											"end": 1723,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1685,
											"end": 1723,
											"name": "SWAP5",
											"source": 10
										},
										{
											"begin": 1685,
											"end": 1723,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1770,
											"end": 1772,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1759,
											"end": 1768,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 1755,
											"end": 1773,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1742,
											"end": 1774,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 1732,
											"end": 1774,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 1732,
											"end": 1774,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1821,
											"end": 1823,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 1810,
											"end": 1819,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 1806,
											"end": 1824,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1793,
											"end": 1825,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 1783,
											"end": 1825,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 1783,
											"end": 1825,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1876,
											"end": 1878,
											"name": "PUSH",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 1865,
											"end": 1874,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 1861,
											"end": 1879,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1848,
											"end": 1880,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 1899,
											"end": 1917,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1940,
											"end": 1942,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1932,
											"end": 1938,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1929,
											"end": 1943,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 1926,
											"end": 1928,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1926,
											"end": 1928,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "240"
										},
										{
											"begin": 1926,
											"end": 1928,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 1961,
											"end": 1967,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1953,
											"end": 1959,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 1946,
											"end": 1968,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 1926,
											"end": 1928,
											"name": "tag",
											"source": 10,
											"value": "240"
										},
										{
											"begin": 1926,
											"end": 1928,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2004,
											"end": 2010,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1993,
											"end": 2002,
											"name": "DUP9",
											"source": 10
										},
										{
											"begin": 1989,
											"end": 2011,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1979,
											"end": 2011,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1979,
											"end": 2011,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2049,
											"end": 2056,
											"name": "DUP9",
											"source": 10
										},
										{
											"begin": 2042,
											"end": 2046,
											"name": "PUSH",
											"source": 10,
											"value": "1F"
										},
										{
											"begin": 2038,
											"end": 2040,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 2034,
											"end": 2047,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2030,
											"end": 2057,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 2020,
											"end": 2022,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "241"
										},
										{
											"begin": 2020,
											"end": 2022,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 2076,
											"end": 2082,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2068,
											"end": 2074,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 2061,
											"end": 2083,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 2020,
											"end": 2022,
											"name": "tag",
											"source": 10,
											"value": "241"
										},
										{
											"begin": 2020,
											"end": 2022,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2104,
											"end": 2179,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "242"
										},
										{
											"begin": 2171,
											"end": 2178,
											"name": "DUP10",
											"source": 10
										},
										{
											"begin": 2166,
											"end": 2168,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 2153,
											"end": 2169,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 2148,
											"end": 2150,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 2144,
											"end": 2146,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 2140,
											"end": 2151,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2104,
											"end": 2179,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "216"
										},
										{
											"begin": 2104,
											"end": 2179,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 2104,
											"end": 2179,
											"name": "tag",
											"source": 10,
											"value": "242"
										},
										{
											"begin": 2104,
											"end": 2179,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2094,
											"end": 2179,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 2094,
											"end": 2179,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2232,
											"end": 2235,
											"name": "PUSH",
											"source": 10,
											"value": "80"
										},
										{
											"begin": 2221,
											"end": 2230,
											"name": "DUP9",
											"source": 10
										},
										{
											"begin": 2217,
											"end": 2236,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2204,
											"end": 2237,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 2188,
											"end": 2237,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 2188,
											"end": 2237,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2262,
											"end": 2264,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 2252,
											"end": 2260,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2249,
											"end": 2265,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 2246,
											"end": 2248,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 2246,
											"end": 2248,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "243"
										},
										{
											"begin": 2246,
											"end": 2248,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 2283,
											"end": 2289,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2275,
											"end": 2281,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 2268,
											"end": 2290,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 2246,
											"end": 2248,
											"name": "tag",
											"source": 10,
											"value": "243"
										},
										{
											"begin": 2246,
											"end": 2248,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2311,
											"end": 2335,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 2311,
											"end": 2335,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2366,
											"end": 2370,
											"name": "PUSH",
											"source": 10,
											"value": "1F"
										},
										{
											"begin": 2358,
											"end": 2371,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 2358,
											"end": 2371,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2354,
											"end": 2381,
											"name": "DUP9",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SGT",
											"source": -1
										},
										{
											"begin": 2344,
											"end": 2346,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "244"
										},
										{
											"begin": 2344,
											"end": 2346,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 2400,
											"end": 2406,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 2392,
											"end": 2398,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2385,
											"end": 2407,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 2344,
											"end": 2346,
											"name": "tag",
											"source": 10,
											"value": "244"
										},
										{
											"begin": 2344,
											"end": 2346,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2428,
											"end": 2503,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "245"
										},
										{
											"begin": 2495,
											"end": 2502,
											"name": "DUP9",
											"source": 10
										},
										{
											"begin": 2490,
											"end": 2492,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2477,
											"end": 2493,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 2472,
											"end": 2474,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 2468,
											"end": 2470,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 2464,
											"end": 2475,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2428,
											"end": 2503,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "216"
										},
										{
											"begin": 2428,
											"end": 2503,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 2428,
											"end": 2503,
											"name": "tag",
											"source": 10,
											"value": "245"
										},
										{
											"begin": 2428,
											"end": 2503,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2418,
											"end": 2503,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 2418,
											"end": 2503,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2418,
											"end": 2503,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1603,
											"end": 2509,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 1603,
											"end": 2509,
											"name": "SWAP6",
											"source": 10
										},
										{
											"begin": 1603,
											"end": 2509,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1603,
											"end": 2509,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 1603,
											"end": 2509,
											"name": "SWAP6",
											"source": 10
										},
										{
											"begin": 1603,
											"end": 2509,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1603,
											"end": 2509,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 1603,
											"end": 2509,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1603,
											"end": 2509,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 2514,
											"end": 2704,
											"name": "tag",
											"source": 10,
											"value": "53"
										},
										{
											"begin": 2514,
											"end": 2704,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2514,
											"end": 2704,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 2626,
											"end": 2628,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 2614,
											"end": 2623,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2605,
											"end": 2612,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 2601,
											"end": 2624,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 2597,
											"end": 2629,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 2594,
											"end": 2596,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 2594,
											"end": 2596,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "247"
										},
										{
											"begin": 2594,
											"end": 2596,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 2647,
											"end": 2653,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 2639,
											"end": 2645,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 2632,
											"end": 2654,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 2594,
											"end": 2596,
											"name": "tag",
											"source": 10,
											"value": "247"
										},
										{
											"begin": 2594,
											"end": 2596,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2675,
											"end": 2698,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 2675,
											"end": 2698,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 2584,
											"end": 2704,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2584,
											"end": 2704,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 2709,
											"end": 3401,
											"name": "tag",
											"source": 10,
											"value": "82"
										},
										{
											"begin": 2709,
											"end": 3401,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2709,
											"end": 3401,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 2971,
											"end": 2977,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 2964,
											"end": 2978,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 2957,
											"end": 2979,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 2952,
											"end": 2955,
											"name": "PUSH",
											"source": 10,
											"value": "F8"
										},
										{
											"begin": 2948,
											"end": 2980,
											"name": "SHL",
											"source": 10
										},
										{
											"begin": 2943,
											"end": 2946,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2936,
											"end": 2981,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3010,
											"end": 3016,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 3006,
											"end": 3007,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 3001,
											"end": 3004,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 2997,
											"end": 3008,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2990,
											"end": 3017,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3047,
											"end": 3053,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 3042,
											"end": 3044,
											"name": "PUSH",
											"source": 10,
											"value": "21"
										},
										{
											"begin": 3037,
											"end": 3040,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 3033,
											"end": 3045,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3026,
											"end": 3054,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3083,
											"end": 3089,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3077,
											"end": 3090,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 3108,
											"end": 3111,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 3120,
											"end": 3258,
											"name": "tag",
											"source": 10,
											"value": "249"
										},
										{
											"begin": 3120,
											"end": 3258,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3134,
											"end": 3140,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 3131,
											"end": 3132,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 3128,
											"end": 3141,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 3120,
											"end": 3258,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 3120,
											"end": 3258,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "251"
										},
										{
											"begin": 3120,
											"end": 3258,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 3241,
											"end": 3245,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 3225,
											"end": 3239,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 3225,
											"end": 3239,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 3225,
											"end": 3239,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3221,
											"end": 3246,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 3221,
											"end": 3246,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3215,
											"end": 3247,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 3210,
											"end": 3212,
											"name": "PUSH",
											"source": 10,
											"value": "41"
										},
										{
											"begin": 3197,
											"end": 3208,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 3197,
											"end": 3208,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 3197,
											"end": 3208,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3193,
											"end": 3213,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3186,
											"end": 3248,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3149,
											"end": 3161,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3120,
											"end": 3258,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "249"
										},
										{
											"begin": 3120,
											"end": 3258,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 3120,
											"end": 3258,
											"name": "tag",
											"source": 10,
											"value": "251"
										},
										{
											"begin": 3120,
											"end": 3258,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3276,
											"end": 3282,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 3273,
											"end": 3274,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 3270,
											"end": 3283,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 3267,
											"end": 3269,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 3267,
											"end": 3269,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "252"
										},
										{
											"begin": 3267,
											"end": 3269,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 3340,
											"end": 3343,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3335,
											"end": 3337,
											"name": "PUSH",
											"source": 10,
											"value": "41"
										},
										{
											"begin": 3326,
											"end": 3332,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 3321,
											"end": 3324,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 3317,
											"end": 3333,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3313,
											"end": 3338,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3306,
											"end": 3344,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3267,
											"end": 3269,
											"name": "tag",
											"source": 10,
											"value": "252"
										},
										{
											"begin": 3267,
											"end": 3269,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3374,
											"end": 3390,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 3374,
											"end": 3390,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3374,
											"end": 3390,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 3374,
											"end": 3390,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3392,
											"end": 3394,
											"name": "PUSH",
											"source": 10,
											"value": "41"
										},
										{
											"begin": 3370,
											"end": 3395,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3370,
											"end": 3395,
											"name": "SWAP6",
											"source": 10
										},
										{
											"begin": 2926,
											"end": 3401,
											"name": "SWAP5",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2926,
											"end": 3401,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 3406,
											"end": 3786,
											"name": "tag",
											"source": 10,
											"value": "133"
										},
										{
											"begin": 3406,
											"end": 3786,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3648,
											"end": 3714,
											"name": "PUSH",
											"source": 10,
											"value": "19457468657265756D205369676E6564204D6573736167653A0A333200000000"
										},
										{
											"begin": 3636,
											"end": 3715,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 3636,
											"end": 3715,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3740,
											"end": 3742,
											"name": "PUSH",
											"source": 10,
											"value": "1C"
										},
										{
											"begin": 3731,
											"end": 3743,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 3731,
											"end": 3743,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3724,
											"end": 3752,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 3724,
											"end": 3752,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3724,
											"end": 3752,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 3724,
											"end": 3752,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3777,
											"end": 3779,
											"name": "PUSH",
											"source": 10,
											"value": "3C"
										},
										{
											"begin": 3768,
											"end": 3780,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3768,
											"end": 3780,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3626,
											"end": 3786,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 3791,
											"end": 3994,
											"name": "tag",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 3791,
											"end": 3994,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3955,
											"end": 3987,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 3955,
											"end": 3987,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3955,
											"end": 3987,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 3955,
											"end": 3987,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 3937,
											"end": 3988,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 3937,
											"end": 3988,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3925,
											"end": 3927,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 3910,
											"end": 3928,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3910,
											"end": 3928,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3892,
											"end": 3994,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 3999,
											"end": 4186,
											"name": "tag",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 3999,
											"end": 4186,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4164,
											"end": 4178,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4164,
											"end": 4178,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 4157,
											"end": 4179,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 4139,
											"end": 4180,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4139,
											"end": 4180,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4127,
											"end": 4129,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 4112,
											"end": 4130,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4112,
											"end": 4130,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4094,
											"end": 4186,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 4191,
											"end": 4589,
											"name": "tag",
											"source": 10,
											"value": "209"
										},
										{
											"begin": 4191,
											"end": 4589,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4418,
											"end": 4443,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 4418,
											"end": 4443,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 4418,
											"end": 4443,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4491,
											"end": 4495,
											"name": "PUSH",
											"source": 10,
											"value": "FF"
										},
										{
											"begin": 4479,
											"end": 4496,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 4479,
											"end": 4496,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4479,
											"end": 4496,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 4479,
											"end": 4496,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 4474,
											"end": 4476,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 4459,
											"end": 4477,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 4459,
											"end": 4477,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4452,
											"end": 4497,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4528,
											"end": 4530,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 4513,
											"end": 4531,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 4513,
											"end": 4531,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4506,
											"end": 4540,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4571,
											"end": 4573,
											"name": "PUSH",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 4556,
											"end": 4574,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4556,
											"end": 4574,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4549,
											"end": 4583,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4405,
											"end": 4408,
											"name": "PUSH",
											"source": 10,
											"value": "80"
										},
										{
											"begin": 4390,
											"end": 4409,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4390,
											"end": 4409,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4372,
											"end": 4589,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 4594,
											"end": 4942,
											"name": "tag",
											"source": 10,
											"value": "169"
										},
										{
											"begin": 4594,
											"end": 4942,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4796,
											"end": 4798,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 4778,
											"end": 4799,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 4778,
											"end": 4799,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4778,
											"end": 4799,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4835,
											"end": 4837,
											"name": "PUSH",
											"source": 10,
											"value": "18"
										},
										{
											"begin": 4815,
											"end": 4833,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4815,
											"end": 4833,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4815,
											"end": 4833,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4808,
											"end": 4838,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4874,
											"end": 4900,
											"name": "PUSH",
											"source": 10,
											"value": "45434453413A20696E76616C6964207369676E61747572650000000000000000"
										},
										{
											"begin": 4869,
											"end": 4871,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 4854,
											"end": 4872,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4854,
											"end": 4872,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4847,
											"end": 4901,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4933,
											"end": 4935,
											"name": "PUSH",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 4918,
											"end": 4936,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4918,
											"end": 4936,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4768,
											"end": 4942,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 4947,
											"end": 5284,
											"name": "tag",
											"source": 10,
											"value": "77"
										},
										{
											"begin": 4947,
											"end": 5284,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5149,
											"end": 5151,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 5131,
											"end": 5152,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 5131,
											"end": 5152,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5131,
											"end": 5152,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5188,
											"end": 5190,
											"name": "PUSH",
											"source": 10,
											"value": "D"
										},
										{
											"begin": 5168,
											"end": 5186,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5168,
											"end": 5186,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5168,
											"end": 5186,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5161,
											"end": 5191,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3A34B6B2B9BA30B6B81032B939"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "99"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5222,
											"end": 5224,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 5207,
											"end": 5225,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5207,
											"end": 5225,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5200,
											"end": 5243,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5275,
											"end": 5277,
											"name": "PUSH",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 5260,
											"end": 5278,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5260,
											"end": 5278,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5121,
											"end": 5284,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 5289,
											"end": 5644,
											"name": "tag",
											"source": 10,
											"value": "175"
										},
										{
											"begin": 5289,
											"end": 5644,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5491,
											"end": 5493,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 5473,
											"end": 5494,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 5473,
											"end": 5494,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5473,
											"end": 5494,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5530,
											"end": 5532,
											"name": "PUSH",
											"source": 10,
											"value": "1F"
										},
										{
											"begin": 5510,
											"end": 5528,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5510,
											"end": 5528,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5510,
											"end": 5528,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5503,
											"end": 5533,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5569,
											"end": 5602,
											"name": "PUSH",
											"source": 10,
											"value": "45434453413A20696E76616C6964207369676E6174757265206C656E67746800"
										},
										{
											"begin": 5564,
											"end": 5566,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 5549,
											"end": 5567,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5549,
											"end": 5567,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5542,
											"end": 5603,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5635,
											"end": 5637,
											"name": "PUSH",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 5620,
											"end": 5638,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5620,
											"end": 5638,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5463,
											"end": 5644,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 5649,
											"end": 6051,
											"name": "tag",
											"source": 10,
											"value": "127"
										},
										{
											"begin": 5649,
											"end": 6051,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5851,
											"end": 5853,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 5833,
											"end": 5854,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 5833,
											"end": 5854,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5833,
											"end": 5854,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5890,
											"end": 5892,
											"name": "PUSH",
											"source": 10,
											"value": "26"
										},
										{
											"begin": 5870,
											"end": 5888,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5870,
											"end": 5888,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5870,
											"end": 5888,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5863,
											"end": 5893,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5929,
											"end": 5963,
											"name": "PUSH",
											"source": 10,
											"value": "4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061"
										},
										{
											"begin": 5924,
											"end": 5926,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 5909,
											"end": 5927,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5909,
											"end": 5927,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5902,
											"end": 5964,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "646472657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5995,
											"end": 5997,
											"name": "PUSH",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 5980,
											"end": 5998,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5980,
											"end": 5998,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5973,
											"end": 6009,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 6041,
											"end": 6044,
											"name": "PUSH",
											"source": 10,
											"value": "80"
										},
										{
											"begin": 6026,
											"end": 6045,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 6026,
											"end": 6045,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5823,
											"end": 6051,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 6056,
											"end": 6454,
											"name": "tag",
											"source": 10,
											"value": "181"
										},
										{
											"begin": 6056,
											"end": 6454,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6258,
											"end": 6260,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 6240,
											"end": 6261,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 6240,
											"end": 6261,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 6240,
											"end": 6261,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 6297,
											"end": 6299,
											"name": "PUSH",
											"source": 10,
											"value": "22"
										},
										{
											"begin": 6277,
											"end": 6295,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 6277,
											"end": 6295,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 6277,
											"end": 6295,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 6270,
											"end": 6300,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 6336,
											"end": 6370,
											"name": "PUSH",
											"source": 10,
											"value": "45434453413A20696E76616C6964207369676E6174757265202773272076616C"
										},
										{
											"begin": 6331,
											"end": 6333,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 6316,
											"end": 6334,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 6316,
											"end": 6334,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 6309,
											"end": 6371,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "7565"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6402,
											"end": 6404,
											"name": "PUSH",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 6387,
											"end": 6405,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 6387,
											"end": 6405,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 6380,
											"end": 6412,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 6444,
											"end": 6447,
											"name": "PUSH",
											"source": 10,
											"value": "80"
										},
										{
											"begin": 6429,
											"end": 6448,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 6429,
											"end": 6448,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 6230,
											"end": 6454,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 6459,
											"end": 6869,
											"name": "tag",
											"source": 10,
											"value": "106"
										},
										{
											"begin": 6459,
											"end": 6869,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6661,
											"end": 6663,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 6643,
											"end": 6664,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 6643,
											"end": 6664,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 6643,
											"end": 6664,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 6700,
											"end": 6702,
											"name": "PUSH",
											"source": 10,
											"value": "2E"
										},
										{
											"begin": 6680,
											"end": 6698,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 6680,
											"end": 6698,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 6680,
											"end": 6698,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 6673,
											"end": 6703,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 6739,
											"end": 6773,
											"name": "PUSH",
											"source": 10,
											"value": "496E697469616C697A61626C653A20636F6E747261637420697320616C726561"
										},
										{
											"begin": 6734,
											"end": 6736,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 6719,
											"end": 6737,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 6719,
											"end": 6737,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 6712,
											"end": 6774,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "191E481A5B9A5D1A585B1A5E9959"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "92"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6805,
											"end": 6807,
											"name": "PUSH",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 6790,
											"end": 6808,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 6790,
											"end": 6808,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 6783,
											"end": 6827,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 6859,
											"end": 6862,
											"name": "PUSH",
											"source": 10,
											"value": "80"
										},
										{
											"begin": 6844,
											"end": 6863,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 6844,
											"end": 6863,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 6633,
											"end": 6869,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 6874,
											"end": 7210,
											"name": "tag",
											"source": 10,
											"value": "72"
										},
										{
											"begin": 6874,
											"end": 7210,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7076,
											"end": 7078,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 7058,
											"end": 7079,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 7058,
											"end": 7079,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 7058,
											"end": 7079,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 7115,
											"end": 7117,
											"name": "PUSH",
											"source": 10,
											"value": "C"
										},
										{
											"begin": 7095,
											"end": 7113,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7095,
											"end": 7113,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 7095,
											"end": 7113,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 7088,
											"end": 7118,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "32BC32B1BABA37B91032B939"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7149,
											"end": 7151,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 7134,
											"end": 7152,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 7134,
											"end": 7152,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 7127,
											"end": 7169,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 7201,
											"end": 7203,
											"name": "PUSH",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 7186,
											"end": 7204,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 7186,
											"end": 7204,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7048,
											"end": 7210,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 7215,
											"end": 7613,
											"name": "tag",
											"source": 10,
											"value": "187"
										},
										{
											"begin": 7215,
											"end": 7613,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7417,
											"end": 7419,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 7399,
											"end": 7420,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 7399,
											"end": 7420,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 7399,
											"end": 7420,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 7456,
											"end": 7458,
											"name": "PUSH",
											"source": 10,
											"value": "22"
										},
										{
											"begin": 7436,
											"end": 7454,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7436,
											"end": 7454,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 7436,
											"end": 7454,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 7429,
											"end": 7459,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 7495,
											"end": 7529,
											"name": "PUSH",
											"source": 10,
											"value": "45434453413A20696E76616C6964207369676E6174757265202776272076616C"
										},
										{
											"begin": 7490,
											"end": 7492,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 7475,
											"end": 7493,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 7475,
											"end": 7493,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 7468,
											"end": 7530,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "7565"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7561,
											"end": 7563,
											"name": "PUSH",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 7546,
											"end": 7564,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 7546,
											"end": 7564,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 7539,
											"end": 7571,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 7603,
											"end": 7606,
											"name": "PUSH",
											"source": 10,
											"value": "80"
										},
										{
											"begin": 7588,
											"end": 7607,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 7588,
											"end": 7607,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7389,
											"end": 7613,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 7618,
											"end": 7957,
											"name": "tag",
											"source": 10,
											"value": "80"
										},
										{
											"begin": 7618,
											"end": 7957,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7820,
											"end": 7822,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 7802,
											"end": 7823,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 7802,
											"end": 7823,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 7802,
											"end": 7823,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 7859,
											"end": 7861,
											"name": "PUSH",
											"source": 10,
											"value": "F"
										},
										{
											"begin": 7839,
											"end": 7857,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7839,
											"end": 7857,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 7839,
											"end": 7857,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 7832,
											"end": 7862,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "26B0B935B2BA103737BA1037B832B7"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "89"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7893,
											"end": 7895,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 7878,
											"end": 7896,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 7878,
											"end": 7896,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 7871,
											"end": 7916,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 7948,
											"end": 7950,
											"name": "PUSH",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 7933,
											"end": 7951,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 7933,
											"end": 7951,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7792,
											"end": 7957,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 7962,
											"end": 8318,
											"name": "tag",
											"source": 10,
											"value": "65"
										},
										{
											"begin": 7962,
											"end": 8318,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8164,
											"end": 8166,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 8146,
											"end": 8167,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 8146,
											"end": 8167,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 8146,
											"end": 8167,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 8183,
											"end": 8201,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 8183,
											"end": 8201,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 8183,
											"end": 8201,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 8176,
											"end": 8206,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 8242,
											"end": 8276,
											"name": "PUSH",
											"source": 10,
											"value": "4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572"
										},
										{
											"begin": 8237,
											"end": 8239,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 8222,
											"end": 8240,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 8222,
											"end": 8240,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 8215,
											"end": 8277,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 8309,
											"end": 8311,
											"name": "PUSH",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 8294,
											"end": 8312,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 8294,
											"end": 8312,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 8136,
											"end": 8318,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 8323,
											"end": 8500,
											"name": "tag",
											"source": 10,
											"value": "47"
										},
										{
											"begin": 8323,
											"end": 8500,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8469,
											"end": 8494,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 8469,
											"end": 8494,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 8469,
											"end": 8494,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 8457,
											"end": 8459,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 8442,
											"end": 8460,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 8442,
											"end": 8460,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 8424,
											"end": 8500,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 8505,
											"end": 8733,
											"name": "tag",
											"source": 10,
											"value": "74"
										},
										{
											"begin": 8505,
											"end": 8733,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8505,
											"end": 8733,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 8573,
											"end": 8574,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 8570,
											"end": 8571,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 8567,
											"end": 8575,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 8564,
											"end": 8566,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 8564,
											"end": 8566,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "269"
										},
										{
											"begin": 8564,
											"end": 8566,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4E487B71"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8598,
											"end": 8632,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 8598,
											"end": 8632,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 8655,
											"end": 8659,
											"name": "PUSH",
											"source": 10,
											"value": "11"
										},
										{
											"begin": 8652,
											"end": 8653,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 8645,
											"end": 8660,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 8686,
											"end": 8690,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 8605,
											"end": 8609,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 8673,
											"end": 8691,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 8564,
											"end": 8566,
											"name": "tag",
											"source": 10,
											"value": "269"
										},
										{
											"begin": 8564,
											"end": 8566,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 8718,
											"end": 8727,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 8718,
											"end": 8727,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 8554,
											"end": 8733,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 8738,
											"end": 8865,
											"name": "tag",
											"source": 10,
											"value": "220"
										},
										{
											"begin": 8738,
											"end": 8865,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8799,
											"end": 8809,
											"name": "PUSH",
											"source": 10,
											"value": "4E487B71"
										},
										{
											"begin": 8794,
											"end": 8797,
											"name": "PUSH",
											"source": 10,
											"value": "E0"
										},
										{
											"begin": 8790,
											"end": 8810,
											"name": "SHL",
											"source": 10
										},
										{
											"begin": 8787,
											"end": 8788,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 8780,
											"end": 8811,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 8830,
											"end": 8834,
											"name": "PUSH",
											"source": 10,
											"value": "41"
										},
										{
											"begin": 8827,
											"end": 8828,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 8820,
											"end": 8835,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 8854,
											"end": 8858,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 8851,
											"end": 8852,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 8844,
											"end": 8859,
											"name": "REVERT",
											"source": 10
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"executor(address)": "48c7e528",
							"getkey(bool,uint256,uint256,string,bytes)": "239b93b2",
							"initialize(address)": "c4d66de8",
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"setExecutor(address,bool)": "1e1bff3f",
							"setSigner(address)": "6c19e783",
							"setTimeLimit(uint256)": "e2889c82",
							"signer()": "238ac933",
							"timeLimit()": "c08d1fe5",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"executor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_marketState\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_price18\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_symbols\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"getkey\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_type\",\"type\":\"bool\"}],\"name\":\"setExecutor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setSigner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_val\",\"type\":\"uint256\"}],\"name\":\"setTimeLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/oracle.sol\":\"Oracle\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"keccak256\":\"0xd0fc241d70f27a08c43c0c9e5a15d2661a643d8db46c219b2322bef8a34bbdd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://272fdc13ea6d62470f1009a1adf0d28b67be2c75415e9f24eee38164dd69fb04\",\"dweb:/ipfs/QmfZDcxQEFdAi1AwMTHozZJrwFoUCEZnbcJcRhqmahuTBR\"]},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x5f13da6a5f023d6e9b3e48a3690458bfceea5872c0e3ddf1b2b528133f87a992\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4f10cded435297e67d3720adb22790ee7f8ab7f5d977a815e87f33560800819c\",\"dweb:/ipfs/QmeMx1jpSb66jrT1P184kTuh8p9FSqbYUXoVbXNdnJPqkf\"]},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0x0c34de2f75ee9ab06bf9151824be575885d0a9b460c292476a260578fb5a4e1c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2125524ea896700181f25ee543d35a980b9477eaf13fd1878ae24be5dcc3ba75\",\"dweb:/ipfs/QmXw9DTW1t1UiTZanfESSJ6jm2xVSQpsdsdKnBTYeBnwqh\"]},\"@openzeppelin/contracts/interfaces/IERC1271.sol\":{\"keccak256\":\"0x8768dc46d6a5906d62270db7fd2152ce7bb48c353d4333e2ef0b3773fa540280\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a767312e79070e878c518473945246719c5df3d2f44b4b743b8f662193113f4b\",\"dweb:/ipfs/QmdJBCKefTSK6z2bP2dExNZpHt1T5hC1QefyprXg8aFEAk\"]},\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0x9944d1038f27dcebff810d7ba16b3b8058b967173d76874fb72dd7cd84129656\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7c455cda07c5f8978c57e545ddde382552d3a55b6e3682e0f809ed07ec7defbe\",\"dweb:/ipfs/QmXkoKbxyMcMzjYdkXi5t4t3ZjBQ81pj7AaanS9jhePxyt\"]},\"@openzeppelin/contracts/utils/Strings.sol\":{\"keccak256\":\"0x5fa25f305839292fab713256214f2868e0257d29826b14282bbd7f1e34f5af38\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b3de4074848249e00e1336db857e3fa8f78b4fe11d4a887f71050c22023b2132\",\"dweb:/ipfs/QmbL6k2zFGndQPNPG7vCDivtjKam3quJSrEbRuVsNo4hBw\"]},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"keccak256\":\"0x594efd2fa154f4fbe0fa92c2356cb2a9531ef3902e35784c2bc69764d0d8886a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3784afd8f0de286adaae0c14eadb0d133a7be09f462b329f5d46b32de6f4b39c\",\"dweb:/ipfs/QmSane9wkMKGUig2S8TYRYiK2fKEXNDj9vXeFGFYfjnUYh\"]},\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\":{\"keccak256\":\"0xece6ddc1baedb5f0bb00f53c210b3944899810bfbedb910a0850b01309f545f2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ba25b7adbebc5084210a000e46583aa1c2fb6bbaa6ee5869cc32322de4c02e3f\",\"dweb:/ipfs/QmSBaEoPnEqKgcYukMuBwiPH9bkvAA5oH2dc5NYWU6T6As\"]},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"keccak256\":\"0x29c462775f5b4c76dce400f120f3530aa3f81da42c839f975dc2b64784d22434\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://063db5d664d3d5bae10d0056c9d00339265229532d06b53d5f2e91778b2e428d\",\"dweb:/ipfs/QmWM92rU59t6BcZSj4w6ikoPL32R9hyTMb9Msg5X8vvu1s\"]},\"contracts/oracle.sol\":{\"keccak256\":\"0x9c95aeaafb1cd38b3b340cedc1a5821b18f59f1f056ebe9188c9358d11484112\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://59dda459367c35955d468b3f250411e6f8a3c9c333b8a38f67490b1cde116bbd\",\"dweb:/ipfs/QmWbzDmi7qvNbAEPYKNRvo1WouPQChcRm8qpPKiX6axzuv\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 130,
								"contract": "contracts/oracle.sol:Oracle",
								"label": "_initialized",
								"offset": 0,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 133,
								"contract": "contracts/oracle.sol:Oracle",
								"label": "_initializing",
								"offset": 1,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 213,
								"contract": "contracts/oracle.sol:Oracle",
								"label": "__gap",
								"offset": 0,
								"slot": "1",
								"type": "t_array(t_uint256)50_storage"
							},
							{
								"astId": 10,
								"contract": "contracts/oracle.sol:Oracle",
								"label": "_owner",
								"offset": 0,
								"slot": "51",
								"type": "t_address"
							},
							{
								"astId": 124,
								"contract": "contracts/oracle.sol:Oracle",
								"label": "__gap",
								"offset": 0,
								"slot": "52",
								"type": "t_array(t_uint256)49_storage"
							},
							{
								"astId": 1528,
								"contract": "contracts/oracle.sol:Oracle",
								"label": "signer",
								"offset": 0,
								"slot": "101",
								"type": "t_address"
							},
							{
								"astId": 1530,
								"contract": "contracts/oracle.sol:Oracle",
								"label": "timeLimit",
								"offset": 0,
								"slot": "102",
								"type": "t_uint256"
							},
							{
								"astId": 1534,
								"contract": "contracts/oracle.sol:Oracle",
								"label": "executor",
								"offset": 0,
								"slot": "103",
								"type": "t_mapping(t_address,t_bool)"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_array(t_uint256)49_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[49]",
								"numberOfBytes": "1568"
							},
							"t_array(t_uint256)50_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[50]",
								"numberOfBytes": "1600"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_mapping(t_address,t_bool)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => bool)",
								"numberOfBytes": "32",
								"value": "t_bool"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol",
					"exportedSymbols": {
						"ContextUpgradeable": [
							214
						],
						"Initializable": [
							170
						],
						"OwnableUpgradeable": [
							125
						]
					},
					"id": 126,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "87:23:0"
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol",
							"file": "../utils/ContextUpgradeable.sol",
							"id": 2,
							"nodeType": "ImportDirective",
							"scope": 126,
							"sourceUnit": 215,
							"src": "112:41:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol",
							"file": "../proxy/utils/Initializable.sol",
							"id": 3,
							"nodeType": "ImportDirective",
							"scope": 126,
							"sourceUnit": 171,
							"src": "154:42:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 5,
										"name": "Initializable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 170,
										"src": "733:13:0"
									},
									"id": 6,
									"nodeType": "InheritanceSpecifier",
									"src": "733:13:0"
								},
								{
									"baseName": {
										"id": 7,
										"name": "ContextUpgradeable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 214,
										"src": "748:18:0"
									},
									"id": 8,
									"nodeType": "InheritanceSpecifier",
									"src": "748:18:0"
								}
							],
							"contractDependencies": [
								170,
								214
							],
							"contractKind": "contract",
							"documentation": {
								"id": 4,
								"nodeType": "StructuredDocumentation",
								"src": "198:494:0",
								"text": " @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."
							},
							"fullyImplemented": true,
							"id": 125,
							"linearizedBaseContracts": [
								125,
								214,
								170
							],
							"name": "OwnableUpgradeable",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 10,
									"mutability": "mutable",
									"name": "_owner",
									"nodeType": "VariableDeclaration",
									"scope": 125,
									"src": "773:22:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 9,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "773:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "private"
								},
								{
									"anonymous": false,
									"id": 16,
									"name": "OwnershipTransferred",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 15,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 12,
												"indexed": true,
												"mutability": "mutable",
												"name": "previousOwner",
												"nodeType": "VariableDeclaration",
												"scope": 16,
												"src": "829:29:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 11,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "829:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 14,
												"indexed": true,
												"mutability": "mutable",
												"name": "newOwner",
												"nodeType": "VariableDeclaration",
												"scope": 16,
												"src": "860:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 13,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "860:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "828:57:0"
									},
									"src": "802:84:0"
								},
								{
									"body": {
										"id": 28,
										"nodeType": "Block",
										"src": "1035:79:0",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 22,
														"name": "__Context_init_unchained",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 191,
														"src": "1045:24:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 23,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1045:26:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 24,
												"nodeType": "ExpressionStatement",
												"src": "1045:26:0"
											},
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 25,
														"name": "__Ownable_init_unchained",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 40,
														"src": "1081:24:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 26,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1081:26:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 27,
												"nodeType": "ExpressionStatement",
												"src": "1081:26:0"
											}
										]
									},
									"documentation": {
										"id": 17,
										"nodeType": "StructuredDocumentation",
										"src": "892:91:0",
										"text": " @dev Initializes the contract setting the deployer as the initial owner."
									},
									"id": 29,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 20,
											"modifierName": {
												"id": 19,
												"name": "initializer",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 169,
												"src": "1023:11:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "1023:11:0"
										}
									],
									"name": "__Ownable_init",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 18,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1011:2:0"
									},
									"returnParameters": {
										"id": 21,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1035:0:0"
									},
									"scope": 125,
									"src": "988:126:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 39,
										"nodeType": "Block",
										"src": "1177:49:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 35,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 200,
																"src": "1206:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 36,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1206:12:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 34,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 120,
														"src": "1187:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 37,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1187:32:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 38,
												"nodeType": "ExpressionStatement",
												"src": "1187:32:0"
											}
										]
									},
									"id": 40,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 32,
											"modifierName": {
												"id": 31,
												"name": "initializer",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 169,
												"src": "1165:11:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "1165:11:0"
										}
									],
									"name": "__Ownable_init_unchained",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 30,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1153:2:0"
									},
									"returnParameters": {
										"id": 33,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1177:0:0"
									},
									"scope": 125,
									"src": "1120:106:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 48,
										"nodeType": "Block",
										"src": "1357:30:0",
										"statements": [
											{
												"expression": {
													"id": 46,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 10,
													"src": "1374:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 45,
												"id": 47,
												"nodeType": "Return",
												"src": "1367:13:0"
											}
										]
									},
									"documentation": {
										"id": 41,
										"nodeType": "StructuredDocumentation",
										"src": "1232:65:0",
										"text": " @dev Returns the address of the current owner."
									},
									"functionSelector": "8da5cb5b",
									"id": 49,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "owner",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 42,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1316:2:0"
									},
									"returnParameters": {
										"id": 45,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 44,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 49,
												"src": "1348:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 43,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1348:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1347:9:0"
									},
									"scope": 125,
									"src": "1302:85:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 62,
										"nodeType": "Block",
										"src": "1496:96:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 57,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 53,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 49,
																	"src": "1514:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 54,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1514:7:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 55,
																	"name": "_msgSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 200,
																	"src": "1525:10:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 56,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1525:12:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1514:23:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
															"id": 58,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1539:34:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															},
															"value": "Ownable: caller is not the owner"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															}
														],
														"id": 52,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1506:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 59,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1506:68:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 60,
												"nodeType": "ExpressionStatement",
												"src": "1506:68:0"
											},
											{
												"id": 61,
												"nodeType": "PlaceholderStatement",
												"src": "1584:1:0"
											}
										]
									},
									"documentation": {
										"id": 50,
										"nodeType": "StructuredDocumentation",
										"src": "1393:77:0",
										"text": " @dev Throws if called by any account other than the owner."
									},
									"id": 63,
									"name": "onlyOwner",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 51,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1493:2:0"
									},
									"src": "1475:117:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 76,
										"nodeType": "Block",
										"src": "1988:47:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 72,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2025:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 71,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2017:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 70,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "2017:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 73,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2017:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 69,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 120,
														"src": "1998:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 74,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1998:30:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 75,
												"nodeType": "ExpressionStatement",
												"src": "1998:30:0"
											}
										]
									},
									"documentation": {
										"id": 64,
										"nodeType": "StructuredDocumentation",
										"src": "1598:331:0",
										"text": " @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions anymore. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby removing any functionality that is only available to the owner."
									},
									"functionSelector": "715018a6",
									"id": 77,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 67,
											"modifierName": {
												"id": 66,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 63,
												"src": "1978:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "1978:9:0"
										}
									],
									"name": "renounceOwnership",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 65,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1960:2:0"
									},
									"returnParameters": {
										"id": 68,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1988:0:0"
									},
									"scope": 125,
									"src": "1934:101:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 99,
										"nodeType": "Block",
										"src": "2254:128:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 91,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 86,
																"name": "newOwner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 80,
																"src": "2272:8:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 89,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2292:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 88,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2284:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 87,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2284:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 90,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2284:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "2272:22:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373",
															"id": 92,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2296:40:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															},
															"value": "Ownable: new owner is the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															}
														],
														"id": 85,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2264:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 93,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2264:73:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 94,
												"nodeType": "ExpressionStatement",
												"src": "2264:73:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 96,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 80,
															"src": "2366:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 95,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 120,
														"src": "2347:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 97,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2347:28:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 98,
												"nodeType": "ExpressionStatement",
												"src": "2347:28:0"
											}
										]
									},
									"documentation": {
										"id": 78,
										"nodeType": "StructuredDocumentation",
										"src": "2041:138:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."
									},
									"functionSelector": "f2fde38b",
									"id": 100,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 83,
											"modifierName": {
												"id": 82,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 63,
												"src": "2244:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "2244:9:0"
										}
									],
									"name": "transferOwnership",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 81,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 80,
												"mutability": "mutable",
												"name": "newOwner",
												"nodeType": "VariableDeclaration",
												"scope": 100,
												"src": "2211:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 79,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2211:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2210:18:0"
									},
									"returnParameters": {
										"id": 84,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2254:0:0"
									},
									"scope": 125,
									"src": "2184:198:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 119,
										"nodeType": "Block",
										"src": "2599:124:0",
										"statements": [
											{
												"assignments": [
													107
												],
												"declarations": [
													{
														"constant": false,
														"id": 107,
														"mutability": "mutable",
														"name": "oldOwner",
														"nodeType": "VariableDeclaration",
														"scope": 119,
														"src": "2609:16:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 106,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "2609:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 109,
												"initialValue": {
													"id": 108,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 10,
													"src": "2628:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2609:25:0"
											},
											{
												"expression": {
													"id": 112,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 110,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 10,
														"src": "2644:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 111,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 103,
														"src": "2653:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2644:17:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 113,
												"nodeType": "ExpressionStatement",
												"src": "2644:17:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 115,
															"name": "oldOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 107,
															"src": "2697:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 116,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 103,
															"src": "2707:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 114,
														"name": "OwnershipTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 16,
														"src": "2676:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 117,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2676:40:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 118,
												"nodeType": "EmitStatement",
												"src": "2671:45:0"
											}
										]
									},
									"documentation": {
										"id": 101,
										"nodeType": "StructuredDocumentation",
										"src": "2388:143:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."
									},
									"id": 120,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transferOwnership",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 104,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 103,
												"mutability": "mutable",
												"name": "newOwner",
												"nodeType": "VariableDeclaration",
												"scope": 120,
												"src": "2564:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 102,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2564:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2563:18:0"
									},
									"returnParameters": {
										"id": 105,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2599:0:0"
									},
									"scope": 125,
									"src": "2536:187:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 124,
									"mutability": "mutable",
									"name": "__gap",
									"nodeType": "VariableDeclaration",
									"scope": 125,
									"src": "2728:25:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_array$_t_uint256_$49_storage",
										"typeString": "uint256[49]"
									},
									"typeName": {
										"baseType": {
											"id": 121,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "2728:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"id": 123,
										"length": {
											"hexValue": "3439",
											"id": 122,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "2736:2:0",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_49_by_1",
												"typeString": "int_const 49"
											},
											"value": "49"
										},
										"nodeType": "ArrayTypeName",
										"src": "2728:11:0",
										"typeDescriptions": {
											"typeIdentifier": "t_array$_t_uint256_$49_storage_ptr",
											"typeString": "uint256[49]"
										}
									},
									"visibility": "private"
								}
							],
							"scope": 126,
							"src": "693:2063:0"
						}
					],
					"src": "87:2670:0"
				},
				"id": 0
			},
			"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol",
					"exportedSymbols": {
						"Initializable": [
							170
						]
					},
					"id": 171,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 127,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "98:23:1"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 170,
							"linearizedBaseContracts": [
								170
							],
							"name": "Initializable",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"documentation": {
										"id": 128,
										"nodeType": "StructuredDocumentation",
										"src": "161:73:1",
										"text": " @dev Indicates that the contract has been initialized."
									},
									"id": 130,
									"mutability": "mutable",
									"name": "_initialized",
									"nodeType": "VariableDeclaration",
									"scope": 170,
									"src": "239:25:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bool",
										"typeString": "bool"
									},
									"typeName": {
										"id": 129,
										"name": "bool",
										"nodeType": "ElementaryTypeName",
										"src": "239:4:1",
										"typeDescriptions": {
											"typeIdentifier": "t_bool",
											"typeString": "bool"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"documentation": {
										"id": 131,
										"nodeType": "StructuredDocumentation",
										"src": "271:91:1",
										"text": " @dev Indicates that the contract is in the process of being initialized."
									},
									"id": 133,
									"mutability": "mutable",
									"name": "_initializing",
									"nodeType": "VariableDeclaration",
									"scope": 170,
									"src": "367:26:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bool",
										"typeString": "bool"
									},
									"typeName": {
										"id": 132,
										"name": "bool",
										"nodeType": "ElementaryTypeName",
										"src": "367:4:1",
										"typeDescriptions": {
											"typeIdentifier": "t_bool",
											"typeString": "bool"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 168,
										"nodeType": "Block",
										"src": "521:348:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 140,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 137,
																"name": "_initializing",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 133,
																"src": "539:13:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"id": 139,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "UnaryOperation",
																"operator": "!",
																"prefix": true,
																"src": "556:13:1",
																"subExpression": {
																	"id": 138,
																	"name": "_initialized",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 130,
																	"src": "557:12:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "539:30:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564",
															"id": 141,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "571:48:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759",
																"typeString": "literal_string \"Initializable: contract is already initialized\""
															},
															"value": "Initializable: contract is already initialized"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759",
																"typeString": "literal_string \"Initializable: contract is already initialized\""
															}
														],
														"id": 136,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "531:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 142,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "531:89:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 143,
												"nodeType": "ExpressionStatement",
												"src": "531:89:1"
											},
											{
												"assignments": [
													145
												],
												"declarations": [
													{
														"constant": false,
														"id": 145,
														"mutability": "mutable",
														"name": "isTopLevelCall",
														"nodeType": "VariableDeclaration",
														"scope": 168,
														"src": "631:19:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 144,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "631:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 148,
												"initialValue": {
													"id": 147,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "653:14:1",
													"subExpression": {
														"id": 146,
														"name": "_initializing",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 133,
														"src": "654:13:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "631:36:1"
											},
											{
												"condition": {
													"id": 149,
													"name": "isTopLevelCall",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 145,
													"src": "681:14:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 159,
												"nodeType": "IfStatement",
												"src": "677:98:1",
												"trueBody": {
													"id": 158,
													"nodeType": "Block",
													"src": "697:78:1",
													"statements": [
														{
															"expression": {
																"id": 152,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 150,
																	"name": "_initializing",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 133,
																	"src": "711:13:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "74727565",
																	"id": 151,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "727:4:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																"src": "711:20:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 153,
															"nodeType": "ExpressionStatement",
															"src": "711:20:1"
														},
														{
															"expression": {
																"id": 156,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 154,
																	"name": "_initialized",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 130,
																	"src": "745:12:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "74727565",
																	"id": 155,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "760:4:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																"src": "745:19:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 157,
															"nodeType": "ExpressionStatement",
															"src": "745:19:1"
														}
													]
												}
											},
											{
												"id": 160,
												"nodeType": "PlaceholderStatement",
												"src": "785:1:1"
											},
											{
												"condition": {
													"id": 161,
													"name": "isTopLevelCall",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 145,
													"src": "801:14:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 167,
												"nodeType": "IfStatement",
												"src": "797:66:1",
												"trueBody": {
													"id": 166,
													"nodeType": "Block",
													"src": "817:46:1",
													"statements": [
														{
															"expression": {
																"id": 164,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 162,
																	"name": "_initializing",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 133,
																	"src": "831:13:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "66616c7365",
																	"id": 163,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "847:5:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "false"
																},
																"src": "831:21:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 165,
															"nodeType": "ExpressionStatement",
															"src": "831:21:1"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 134,
										"nodeType": "StructuredDocumentation",
										"src": "400:93:1",
										"text": " @dev Modifier to protect an initializer function from being invoked twice."
									},
									"id": 169,
									"name": "initializer",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 135,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "518:2:1"
									},
									"src": "498:371:1",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 171,
							"src": "123:748:1"
						}
					],
					"src": "98:774:1"
				},
				"id": 1
			},
			"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol",
					"exportedSymbols": {
						"ContextUpgradeable": [
							214
						],
						"Initializable": [
							170
						]
					},
					"id": 215,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 172,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "86:23:2"
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol",
							"file": "../proxy/utils/Initializable.sol",
							"id": 173,
							"nodeType": "ImportDirective",
							"scope": 215,
							"sourceUnit": 171,
							"src": "110:42:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 175,
										"name": "Initializable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 170,
										"src": "691:13:2"
									},
									"id": 176,
									"nodeType": "InheritanceSpecifier",
									"src": "691:13:2"
								}
							],
							"contractDependencies": [
								170
							],
							"contractKind": "contract",
							"documentation": {
								"id": 174,
								"nodeType": "StructuredDocumentation",
								"src": "154:496:2",
								"text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
							},
							"fullyImplemented": true,
							"id": 214,
							"linearizedBaseContracts": [
								214,
								170
							],
							"name": "ContextUpgradeable",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 184,
										"nodeType": "Block",
										"src": "758:43:2",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 181,
														"name": "__Context_init_unchained",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 191,
														"src": "768:24:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 182,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "768:26:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 183,
												"nodeType": "ExpressionStatement",
												"src": "768:26:2"
											}
										]
									},
									"id": 185,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 179,
											"modifierName": {
												"id": 178,
												"name": "initializer",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 169,
												"src": "746:11:2"
											},
											"nodeType": "ModifierInvocation",
											"src": "746:11:2"
										}
									],
									"name": "__Context_init",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 177,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "734:2:2"
									},
									"returnParameters": {
										"id": 180,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "758:0:2"
									},
									"scope": 214,
									"src": "711:90:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 190,
										"nodeType": "Block",
										"src": "864:7:2",
										"statements": []
									},
									"id": 191,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 188,
											"modifierName": {
												"id": 187,
												"name": "initializer",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 169,
												"src": "852:11:2"
											},
											"nodeType": "ModifierInvocation",
											"src": "852:11:2"
										}
									],
									"name": "__Context_init_unchained",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 186,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "840:2:2"
									},
									"returnParameters": {
										"id": 189,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "864:0:2"
									},
									"scope": 214,
									"src": "807:64:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 199,
										"nodeType": "Block",
										"src": "938:34:2",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 196,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "955:3:2",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 197,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "955:10:2",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 195,
												"id": 198,
												"nodeType": "Return",
												"src": "948:17:2"
											}
										]
									},
									"id": 200,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 192,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "895:2:2"
									},
									"returnParameters": {
										"id": 195,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 194,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 200,
												"src": "929:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 193,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "929:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "928:9:2"
									},
									"scope": 214,
									"src": "876:96:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 208,
										"nodeType": "Block",
										"src": "1045:32:2",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 205,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "1062:3:2",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 206,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "1062:8:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 204,
												"id": 207,
												"nodeType": "Return",
												"src": "1055:15:2"
											}
										]
									},
									"id": 209,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 201,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "995:2:2"
									},
									"returnParameters": {
										"id": 204,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 203,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 209,
												"src": "1029:14:2",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 202,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1029:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1028:16:2"
									},
									"scope": 214,
									"src": "978:99:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 213,
									"mutability": "mutable",
									"name": "__gap",
									"nodeType": "VariableDeclaration",
									"scope": 214,
									"src": "1082:25:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_array$_t_uint256_$50_storage",
										"typeString": "uint256[50]"
									},
									"typeName": {
										"baseType": {
											"id": 210,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1082:7:2",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"id": 212,
										"length": {
											"hexValue": "3530",
											"id": 211,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "1090:2:2",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_50_by_1",
												"typeString": "int_const 50"
											},
											"value": "50"
										},
										"nodeType": "ArrayTypeName",
										"src": "1082:11:2",
										"typeDescriptions": {
											"typeIdentifier": "t_array$_t_uint256_$50_storage_ptr",
											"typeString": "uint256[50]"
										}
									},
									"visibility": "private"
								}
							],
							"scope": 215,
							"src": "651:459:2"
						}
					],
					"src": "86:1025:2"
				},
				"id": 2
			},
			"@openzeppelin/contracts/interfaces/IERC1271.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/interfaces/IERC1271.sol",
					"exportedSymbols": {
						"IERC1271": [
							228
						]
					},
					"id": 229,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 216,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "92:23:3"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 217,
								"nodeType": "StructuredDocumentation",
								"src": "117:189:3",
								"text": " @dev Interface of the ERC1271 standard signature validation method for\n contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\n _Available since v4.1._"
							},
							"fullyImplemented": false,
							"id": 228,
							"linearizedBaseContracts": [
								228
							],
							"name": "IERC1271",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 218,
										"nodeType": "StructuredDocumentation",
										"src": "332:220:3",
										"text": " @dev Should return whether the signature provided is valid for the provided data\n @param hash      Hash of the data to be signed\n @param signature Signature byte array associated with _data"
									},
									"functionSelector": "1626ba7e",
									"id": 227,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isValidSignature",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 223,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 220,
												"mutability": "mutable",
												"name": "hash",
												"nodeType": "VariableDeclaration",
												"scope": 227,
												"src": "583:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 219,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "583:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 222,
												"mutability": "mutable",
												"name": "signature",
												"nodeType": "VariableDeclaration",
												"scope": 227,
												"src": "597:22:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 221,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "597:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "582:38:3"
									},
									"returnParameters": {
										"id": 226,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 225,
												"mutability": "mutable",
												"name": "magicValue",
												"nodeType": "VariableDeclaration",
												"scope": 227,
												"src": "644:17:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 224,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "644:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "643:19:3"
									},
									"scope": 228,
									"src": "557:106:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 229,
							"src": "307:358:3"
						}
					],
					"src": "92:574:3"
				},
				"id": 3
			},
			"@openzeppelin/contracts/utils/Address.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Address.sol",
					"exportedSymbols": {
						"Address": [
							525
						]
					},
					"id": 526,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 230,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "86:23:4"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 231,
								"nodeType": "StructuredDocumentation",
								"src": "111:67:4",
								"text": " @dev Collection of functions related to the address type"
							},
							"fullyImplemented": true,
							"id": 525,
							"linearizedBaseContracts": [
								525
							],
							"name": "Address",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 247,
										"nodeType": "Block",
										"src": "837:311:4",
										"statements": [
											{
												"assignments": [
													240
												],
												"declarations": [
													{
														"constant": false,
														"id": 240,
														"mutability": "mutable",
														"name": "size",
														"nodeType": "VariableDeclaration",
														"scope": 247,
														"src": "1034:12:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 239,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1034:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 241,
												"nodeType": "VariableDeclarationStatement",
												"src": "1034:12:4"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "1065:52:4",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1079:28:4",
															"value": {
																"arguments": [
																	{
																		"name": "account",
																		"nodeType": "YulIdentifier",
																		"src": "1099:7:4"
																	}
																],
																"functionName": {
																	"name": "extcodesize",
																	"nodeType": "YulIdentifier",
																	"src": "1087:11:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "1087:20:4"
															},
															"variableNames": [
																{
																	"name": "size",
																	"nodeType": "YulIdentifier",
																	"src": "1079:4:4"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 234,
														"isOffset": false,
														"isSlot": false,
														"src": "1099:7:4",
														"valueSize": 1
													},
													{
														"declaration": 240,
														"isOffset": false,
														"isSlot": false,
														"src": "1079:4:4",
														"valueSize": 1
													}
												],
												"id": 242,
												"nodeType": "InlineAssembly",
												"src": "1056:61:4"
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 245,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 243,
														"name": "size",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 240,
														"src": "1133:4:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 244,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1140:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1133:8:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 238,
												"id": 246,
												"nodeType": "Return",
												"src": "1126:15:4"
											}
										]
									},
									"documentation": {
										"id": 232,
										"nodeType": "StructuredDocumentation",
										"src": "201:565:4",
										"text": " @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n ===="
									},
									"id": 248,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "isContract",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 235,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 234,
												"mutability": "mutable",
												"name": "account",
												"nodeType": "VariableDeclaration",
												"scope": 248,
												"src": "791:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 233,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "791:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "790:17:4"
									},
									"returnParameters": {
										"id": 238,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 237,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 248,
												"src": "831:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 236,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "831:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "830:6:4"
									},
									"scope": 525,
									"src": "771:377:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 281,
										"nodeType": "Block",
										"src": "2136:241:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 263,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 259,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "2162:4:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_Address_$525",
																				"typeString": "library Address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_Address_$525",
																				"typeString": "library Address"
																			}
																		],
																		"id": 258,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2154:7:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 257,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "2154:7:4",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 260,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2154:13:4",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 261,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "2154:21:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 262,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 253,
																"src": "2179:6:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2154:31:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e6365",
															"id": 264,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2187:31:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															},
															"value": "Address: insufficient balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															}
														],
														"id": 256,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2146:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 265,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2146:73:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 266,
												"nodeType": "ExpressionStatement",
												"src": "2146:73:4"
											},
											{
												"assignments": [
													268,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 268,
														"mutability": "mutable",
														"name": "success",
														"nodeType": "VariableDeclaration",
														"scope": 281,
														"src": "2231:12:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 267,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "2231:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													null
												],
												"id": 275,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "",
															"id": 273,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2279:2:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																	"typeString": "literal_string \"\""
																}
															],
															"expression": {
																"id": 269,
																"name": "recipient",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 251,
																"src": "2249:9:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"id": 270,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "2249:14:4",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 272,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 271,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 253,
																"src": "2271:6:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "2249:29:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 274,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2249:33:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2230:52:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 277,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 268,
															"src": "2300:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564",
															"id": 278,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2309:60:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															},
															"value": "Address: unable to send value, recipient may have reverted"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															}
														],
														"id": 276,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2292:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 279,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2292:78:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 280,
												"nodeType": "ExpressionStatement",
												"src": "2292:78:4"
											}
										]
									},
									"documentation": {
										"id": 249,
										"nodeType": "StructuredDocumentation",
										"src": "1154:906:4",
										"text": " @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."
									},
									"id": 282,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sendValue",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 254,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 251,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 282,
												"src": "2084:25:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 250,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2084:15:4",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 253,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 282,
												"src": "2111:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 252,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2111:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2083:43:4"
									},
									"returnParameters": {
										"id": 255,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2136:0:4"
									},
									"scope": 525,
									"src": "2065:312:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 298,
										"nodeType": "Block",
										"src": "3208:84:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 293,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 285,
															"src": "3238:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 294,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 287,
															"src": "3246:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564",
															"id": 295,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3252:32:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															},
															"value": "Address: low-level call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															}
														],
														"id": 292,
														"name": "functionCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															299,
															319
														],
														"referencedDeclaration": 319,
														"src": "3225:12:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
														}
													},
													"id": 296,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3225:60:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 291,
												"id": 297,
												"nodeType": "Return",
												"src": "3218:67:4"
											}
										]
									},
									"documentation": {
										"id": 283,
										"nodeType": "StructuredDocumentation",
										"src": "2383:731:4",
										"text": " @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"
									},
									"id": 299,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 288,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 285,
												"mutability": "mutable",
												"name": "target",
												"nodeType": "VariableDeclaration",
												"scope": 299,
												"src": "3141:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 284,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3141:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 287,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 299,
												"src": "3157:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 286,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3157:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3140:35:4"
									},
									"returnParameters": {
										"id": 291,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 290,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 299,
												"src": "3194:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 289,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3194:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3193:14:4"
									},
									"scope": 525,
									"src": "3119:173:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 318,
										"nodeType": "Block",
										"src": "3661:76:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 312,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 302,
															"src": "3700:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 313,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 304,
															"src": "3708:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "30",
															"id": 314,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3714:1:4",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"id": 315,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 306,
															"src": "3717:12:4",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 311,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															339,
															389
														],
														"referencedDeclaration": 389,
														"src": "3678:21:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 316,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3678:52:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 310,
												"id": 317,
												"nodeType": "Return",
												"src": "3671:59:4"
											}
										]
									},
									"documentation": {
										"id": 300,
										"nodeType": "StructuredDocumentation",
										"src": "3298:211:4",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 319,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 307,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 302,
												"mutability": "mutable",
												"name": "target",
												"nodeType": "VariableDeclaration",
												"scope": 319,
												"src": "3545:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 301,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3545:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 304,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 319,
												"src": "3569:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 303,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3569:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 306,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"scope": 319,
												"src": "3596:26:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 305,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3596:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3535:93:4"
									},
									"returnParameters": {
										"id": 310,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 309,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 319,
												"src": "3647:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 308,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3647:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3646:14:4"
									},
									"scope": 525,
									"src": "3514:223:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 338,
										"nodeType": "Block",
										"src": "4242:111:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 332,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 322,
															"src": "4281:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 333,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 324,
															"src": "4289:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 334,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 326,
															"src": "4295:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564",
															"id": 335,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4302:43:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															},
															"value": "Address: low-level call with value failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															}
														],
														"id": 331,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															339,
															389
														],
														"referencedDeclaration": 389,
														"src": "4259:21:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 336,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4259:87:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 330,
												"id": 337,
												"nodeType": "Return",
												"src": "4252:94:4"
											}
										]
									},
									"documentation": {
										"id": 320,
										"nodeType": "StructuredDocumentation",
										"src": "3743:351:4",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"
									},
									"id": 339,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 327,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 322,
												"mutability": "mutable",
												"name": "target",
												"nodeType": "VariableDeclaration",
												"scope": 339,
												"src": "4139:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 321,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4139:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 324,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 339,
												"src": "4163:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 323,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4163:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 326,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 339,
												"src": "4190:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 325,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4190:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4129:80:4"
									},
									"returnParameters": {
										"id": 330,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 329,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 339,
												"src": "4228:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 328,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4228:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4227:14:4"
									},
									"scope": 525,
									"src": "4099:254:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 388,
										"nodeType": "Block",
										"src": "4780:320:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 360,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 356,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "4806:4:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_Address_$525",
																				"typeString": "library Address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_Address_$525",
																				"typeString": "library Address"
																			}
																		],
																		"id": 355,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "4798:7:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 354,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "4798:7:4",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 357,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "4798:13:4",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 358,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "4798:21:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 359,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 346,
																"src": "4823:5:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4798:30:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c",
															"id": 361,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4830:40:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															},
															"value": "Address: insufficient balance for call"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															}
														],
														"id": 353,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4790:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 362,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4790:81:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 363,
												"nodeType": "ExpressionStatement",
												"src": "4790:81:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 366,
																	"name": "target",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 342,
																	"src": "4900:6:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 365,
																"name": "isContract",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 248,
																"src": "4889:10:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																	"typeString": "function (address) view returns (bool)"
																}
															},
															"id": 367,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4889:18:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374",
															"id": 368,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4909:31:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																"typeString": "literal_string \"Address: call to non-contract\""
															},
															"value": "Address: call to non-contract"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																"typeString": "literal_string \"Address: call to non-contract\""
															}
														],
														"id": 364,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4881:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 369,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4881:60:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 370,
												"nodeType": "ExpressionStatement",
												"src": "4881:60:4"
											},
											{
												"assignments": [
													372,
													374
												],
												"declarations": [
													{
														"constant": false,
														"id": 372,
														"mutability": "mutable",
														"name": "success",
														"nodeType": "VariableDeclaration",
														"scope": 388,
														"src": "4953:12:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 371,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "4953:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 374,
														"mutability": "mutable",
														"name": "returndata",
														"nodeType": "VariableDeclaration",
														"scope": 388,
														"src": "4967:23:4",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 373,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "4967:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 381,
												"initialValue": {
													"arguments": [
														{
															"id": 379,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 344,
															"src": "5020:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"expression": {
																"id": 375,
																"name": "target",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 342,
																"src": "4994:6:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 376,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "4994:11:4",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 378,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 377,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 346,
																"src": "5013:5:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "4994:25:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 380,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4994:31:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4952:73:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 383,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 372,
															"src": "5059:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 384,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 374,
															"src": "5068:10:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 385,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 348,
															"src": "5080:12:4",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 382,
														"name": "verifyCallResult",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 524,
														"src": "5042:16:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (bool,bytes memory,string memory) pure returns (bytes memory)"
														}
													},
													"id": 386,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5042:51:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 352,
												"id": 387,
												"nodeType": "Return",
												"src": "5035:58:4"
											}
										]
									},
									"documentation": {
										"id": 340,
										"nodeType": "StructuredDocumentation",
										"src": "4359:237:4",
										"text": " @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 389,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 349,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 342,
												"mutability": "mutable",
												"name": "target",
												"nodeType": "VariableDeclaration",
												"scope": 389,
												"src": "4641:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 341,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4641:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 344,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 389,
												"src": "4665:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 343,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4665:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 346,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 389,
												"src": "4692:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 345,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4692:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 348,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"scope": 389,
												"src": "4715:26:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 347,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "4715:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4631:116:4"
									},
									"returnParameters": {
										"id": 352,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 351,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 389,
												"src": "4766:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 350,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4766:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4765:14:4"
									},
									"scope": 525,
									"src": "4601:499:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 405,
										"nodeType": "Block",
										"src": "5377:97:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 400,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 392,
															"src": "5413:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 401,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 394,
															"src": "5421:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564",
															"id": 402,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5427:39:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															},
															"value": "Address: low-level static call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															}
														],
														"id": 399,
														"name": "functionStaticCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															406,
															441
														],
														"referencedDeclaration": 441,
														"src": "5394:18:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 403,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5394:73:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 398,
												"id": 404,
												"nodeType": "Return",
												"src": "5387:80:4"
											}
										]
									},
									"documentation": {
										"id": 390,
										"nodeType": "StructuredDocumentation",
										"src": "5106:166:4",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 406,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 395,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 392,
												"mutability": "mutable",
												"name": "target",
												"nodeType": "VariableDeclaration",
												"scope": 406,
												"src": "5305:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 391,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5305:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 394,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 406,
												"src": "5321:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 393,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5321:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5304:35:4"
									},
									"returnParameters": {
										"id": 398,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 397,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 406,
												"src": "5363:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 396,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5363:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5362:14:4"
									},
									"scope": 525,
									"src": "5277:197:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 440,
										"nodeType": "Block",
										"src": "5816:228:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 420,
																	"name": "target",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 409,
																	"src": "5845:6:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 419,
																"name": "isContract",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 248,
																"src": "5834:10:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																	"typeString": "function (address) view returns (bool)"
																}
															},
															"id": 421,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5834:18:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a207374617469632063616c6c20746f206e6f6e2d636f6e7472616374",
															"id": 422,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5854:38:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c79cc78e4f16ce3933a42b84c73868f93bb4a59c031a0acf576679de98c608a9",
																"typeString": "literal_string \"Address: static call to non-contract\""
															},
															"value": "Address: static call to non-contract"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_c79cc78e4f16ce3933a42b84c73868f93bb4a59c031a0acf576679de98c608a9",
																"typeString": "literal_string \"Address: static call to non-contract\""
															}
														],
														"id": 418,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5826:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 423,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5826:67:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 424,
												"nodeType": "ExpressionStatement",
												"src": "5826:67:4"
											},
											{
												"assignments": [
													426,
													428
												],
												"declarations": [
													{
														"constant": false,
														"id": 426,
														"mutability": "mutable",
														"name": "success",
														"nodeType": "VariableDeclaration",
														"scope": 440,
														"src": "5905:12:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 425,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "5905:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 428,
														"mutability": "mutable",
														"name": "returndata",
														"nodeType": "VariableDeclaration",
														"scope": 440,
														"src": "5919:23:4",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 427,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "5919:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 433,
												"initialValue": {
													"arguments": [
														{
															"id": 431,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 411,
															"src": "5964:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 429,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 409,
															"src": "5946:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 430,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "staticcall",
														"nodeType": "MemberAccess",
														"src": "5946:17:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) view returns (bool,bytes memory)"
														}
													},
													"id": 432,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5946:23:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5904:65:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 435,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 426,
															"src": "6003:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 436,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 428,
															"src": "6012:10:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 437,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 413,
															"src": "6024:12:4",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 434,
														"name": "verifyCallResult",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 524,
														"src": "5986:16:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (bool,bytes memory,string memory) pure returns (bytes memory)"
														}
													},
													"id": 438,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5986:51:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 417,
												"id": 439,
												"nodeType": "Return",
												"src": "5979:58:4"
											}
										]
									},
									"documentation": {
										"id": 407,
										"nodeType": "StructuredDocumentation",
										"src": "5480:173:4",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 441,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 414,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 409,
												"mutability": "mutable",
												"name": "target",
												"nodeType": "VariableDeclaration",
												"scope": 441,
												"src": "5695:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 408,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5695:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 411,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 441,
												"src": "5719:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 410,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5719:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 413,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"scope": 441,
												"src": "5746:26:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 412,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5746:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5685:93:4"
									},
									"returnParameters": {
										"id": 417,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 416,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 441,
												"src": "5802:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 415,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5802:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5801:14:4"
									},
									"scope": 525,
									"src": "5658:386:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 457,
										"nodeType": "Block",
										"src": "6320:101:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 452,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 444,
															"src": "6358:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 453,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 446,
															"src": "6366:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564",
															"id": 454,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6372:41:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398",
																"typeString": "literal_string \"Address: low-level delegate call failed\""
															},
															"value": "Address: low-level delegate call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398",
																"typeString": "literal_string \"Address: low-level delegate call failed\""
															}
														],
														"id": 451,
														"name": "functionDelegateCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															458,
															493
														],
														"referencedDeclaration": 493,
														"src": "6337:20:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
														}
													},
													"id": 455,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6337:77:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 450,
												"id": 456,
												"nodeType": "Return",
												"src": "6330:84:4"
											}
										]
									},
									"documentation": {
										"id": 442,
										"nodeType": "StructuredDocumentation",
										"src": "6050:168:4",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"
									},
									"id": 458,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionDelegateCall",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 447,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 444,
												"mutability": "mutable",
												"name": "target",
												"nodeType": "VariableDeclaration",
												"scope": 458,
												"src": "6253:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 443,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6253:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 446,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 458,
												"src": "6269:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 445,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6269:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6252:35:4"
									},
									"returnParameters": {
										"id": 450,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 449,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 458,
												"src": "6306:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 448,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6306:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6305:14:4"
									},
									"scope": 525,
									"src": "6223:198:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 492,
										"nodeType": "Block",
										"src": "6762:232:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 472,
																	"name": "target",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 461,
																	"src": "6791:6:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 471,
																"name": "isContract",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 248,
																"src": "6780:10:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																	"typeString": "function (address) view returns (bool)"
																}
															},
															"id": 473,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6780:18:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6e7472616374",
															"id": 474,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6800:40:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520",
																"typeString": "literal_string \"Address: delegate call to non-contract\""
															},
															"value": "Address: delegate call to non-contract"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520",
																"typeString": "literal_string \"Address: delegate call to non-contract\""
															}
														],
														"id": 470,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "6772:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 475,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6772:69:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 476,
												"nodeType": "ExpressionStatement",
												"src": "6772:69:4"
											},
											{
												"assignments": [
													478,
													480
												],
												"declarations": [
													{
														"constant": false,
														"id": 478,
														"mutability": "mutable",
														"name": "success",
														"nodeType": "VariableDeclaration",
														"scope": 492,
														"src": "6853:12:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 477,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "6853:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 480,
														"mutability": "mutable",
														"name": "returndata",
														"nodeType": "VariableDeclaration",
														"scope": 492,
														"src": "6867:23:4",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 479,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "6867:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 485,
												"initialValue": {
													"arguments": [
														{
															"id": 483,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 463,
															"src": "6914:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 481,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 461,
															"src": "6894:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 482,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "delegatecall",
														"nodeType": "MemberAccess",
														"src": "6894:19:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) returns (bool,bytes memory)"
														}
													},
													"id": 484,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6894:25:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6852:67:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 487,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 478,
															"src": "6953:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 488,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 480,
															"src": "6962:10:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 489,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 465,
															"src": "6974:12:4",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 486,
														"name": "verifyCallResult",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 524,
														"src": "6936:16:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (bool,bytes memory,string memory) pure returns (bytes memory)"
														}
													},
													"id": 490,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6936:51:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 469,
												"id": 491,
												"nodeType": "Return",
												"src": "6929:58:4"
											}
										]
									},
									"documentation": {
										"id": 459,
										"nodeType": "StructuredDocumentation",
										"src": "6427:175:4",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"
									},
									"id": 493,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionDelegateCall",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 466,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 461,
												"mutability": "mutable",
												"name": "target",
												"nodeType": "VariableDeclaration",
												"scope": 493,
												"src": "6646:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 460,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6646:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 463,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 493,
												"src": "6670:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 462,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6670:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 465,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"scope": 493,
												"src": "6697:26:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 464,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6697:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6636:93:4"
									},
									"returnParameters": {
										"id": 469,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 468,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 493,
												"src": "6748:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 467,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6748:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6747:14:4"
									},
									"scope": 525,
									"src": "6607:387:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 523,
										"nodeType": "Block",
										"src": "7374:532:4",
										"statements": [
											{
												"condition": {
													"id": 505,
													"name": "success",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 496,
													"src": "7388:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 521,
													"nodeType": "Block",
													"src": "7445:455:4",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 512,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 509,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 498,
																		"src": "7529:10:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 510,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "length",
																	"nodeType": "MemberAccess",
																	"src": "7529:17:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 511,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7549:1:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "7529:21:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"falseBody": {
																"id": 519,
																"nodeType": "Block",
																"src": "7837:53:4",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"id": 516,
																					"name": "errorMessage",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 500,
																					"src": "7862:12:4",
																					"typeDescriptions": {
																						"typeIdentifier": "t_string_memory_ptr",
																						"typeString": "string memory"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_string_memory_ptr",
																						"typeString": "string memory"
																					}
																				],
																				"id": 515,
																				"name": "revert",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [
																					4294967277,
																					4294967277
																				],
																				"referencedDeclaration": 4294967277,
																				"src": "7855:6:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																					"typeString": "function (string memory) pure"
																				}
																			},
																			"id": 517,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "7855:20:4",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 518,
																		"nodeType": "ExpressionStatement",
																		"src": "7855:20:4"
																	}
																]
															},
															"id": 520,
															"nodeType": "IfStatement",
															"src": "7525:365:4",
															"trueBody": {
																"id": 514,
																"nodeType": "Block",
																"src": "7552:279:4",
																"statements": [
																	{
																		"AST": {
																			"nodeType": "YulBlock",
																			"src": "7672:145:4",
																			"statements": [
																				{
																					"nodeType": "YulVariableDeclaration",
																					"src": "7694:40:4",
																					"value": {
																						"arguments": [
																							{
																								"name": "returndata",
																								"nodeType": "YulIdentifier",
																								"src": "7723:10:4"
																							}
																						],
																						"functionName": {
																							"name": "mload",
																							"nodeType": "YulIdentifier",
																							"src": "7717:5:4"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "7717:17:4"
																					},
																					"variables": [
																						{
																							"name": "returndata_size",
																							"nodeType": "YulTypedName",
																							"src": "7698:15:4",
																							"type": ""
																						}
																					]
																				},
																				{
																					"expression": {
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "7766:2:4",
																										"type": "",
																										"value": "32"
																									},
																									{
																										"name": "returndata",
																										"nodeType": "YulIdentifier",
																										"src": "7770:10:4"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "7762:3:4"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "7762:19:4"
																							},
																							{
																								"name": "returndata_size",
																								"nodeType": "YulIdentifier",
																								"src": "7783:15:4"
																							}
																						],
																						"functionName": {
																							"name": "revert",
																							"nodeType": "YulIdentifier",
																							"src": "7755:6:4"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "7755:44:4"
																					},
																					"nodeType": "YulExpressionStatement",
																					"src": "7755:44:4"
																				}
																			]
																		},
																		"evmVersion": "istanbul",
																		"externalReferences": [
																			{
																				"declaration": 498,
																				"isOffset": false,
																				"isSlot": false,
																				"src": "7723:10:4",
																				"valueSize": 1
																			},
																			{
																				"declaration": 498,
																				"isOffset": false,
																				"isSlot": false,
																				"src": "7770:10:4",
																				"valueSize": 1
																			}
																		],
																		"id": 513,
																		"nodeType": "InlineAssembly",
																		"src": "7663:154:4"
																	}
																]
															}
														}
													]
												},
												"id": 522,
												"nodeType": "IfStatement",
												"src": "7384:516:4",
												"trueBody": {
													"id": 508,
													"nodeType": "Block",
													"src": "7397:42:4",
													"statements": [
														{
															"expression": {
																"id": 506,
																"name": "returndata",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 498,
																"src": "7418:10:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"functionReturnParameters": 504,
															"id": 507,
															"nodeType": "Return",
															"src": "7411:17:4"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 494,
										"nodeType": "StructuredDocumentation",
										"src": "7000:209:4",
										"text": " @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason using the provided one.\n _Available since v4.3._"
									},
									"id": 524,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verifyCallResult",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 501,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 496,
												"mutability": "mutable",
												"name": "success",
												"nodeType": "VariableDeclaration",
												"scope": 524,
												"src": "7249:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 495,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "7249:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 498,
												"mutability": "mutable",
												"name": "returndata",
												"nodeType": "VariableDeclaration",
												"scope": 524,
												"src": "7271:23:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 497,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7271:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 500,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"scope": 524,
												"src": "7304:26:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 499,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "7304:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7239:97:4"
									},
									"returnParameters": {
										"id": 504,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 503,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 524,
												"src": "7360:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 502,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7360:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7359:14:4"
									},
									"scope": 525,
									"src": "7214:692:4",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 526,
							"src": "179:7729:4"
						}
					],
					"src": "86:7823:4"
				},
				"id": 4
			},
			"@openzeppelin/contracts/utils/Strings.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Strings.sol",
					"exportedSymbols": {
						"Strings": [
							728
						]
					},
					"id": 729,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 527,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "86:23:5"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 528,
								"nodeType": "StructuredDocumentation",
								"src": "111:34:5",
								"text": " @dev String operations."
							},
							"fullyImplemented": true,
							"id": 728,
							"linearizedBaseContracts": [
								728
							],
							"name": "Strings",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 531,
									"mutability": "constant",
									"name": "_HEX_SYMBOLS",
									"nodeType": "VariableDeclaration",
									"scope": 728,
									"src": "168:58:5",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes16",
										"typeString": "bytes16"
									},
									"typeName": {
										"id": 529,
										"name": "bytes16",
										"nodeType": "ElementaryTypeName",
										"src": "168:7:5",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes16",
											"typeString": "bytes16"
										}
									},
									"value": {
										"hexValue": "30313233343536373839616263646566",
										"id": 530,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "string",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "208:18:5",
										"typeDescriptions": {
											"typeIdentifier": "t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f",
											"typeString": "literal_string \"0123456789abcdef\""
										},
										"value": "0123456789abcdef"
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 609,
										"nodeType": "Block",
										"src": "399:632:5",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 541,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 539,
														"name": "value",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 534,
														"src": "601:5:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 540,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "610:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "601:10:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 545,
												"nodeType": "IfStatement",
												"src": "597:51:5",
												"trueBody": {
													"id": 544,
													"nodeType": "Block",
													"src": "613:35:5",
													"statements": [
														{
															"expression": {
																"hexValue": "30",
																"id": 542,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "string",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "634:3:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d",
																	"typeString": "literal_string \"0\""
																},
																"value": "0"
															},
															"functionReturnParameters": 538,
															"id": 543,
															"nodeType": "Return",
															"src": "627:10:5"
														}
													]
												}
											},
											{
												"assignments": [
													547
												],
												"declarations": [
													{
														"constant": false,
														"id": 547,
														"mutability": "mutable",
														"name": "temp",
														"nodeType": "VariableDeclaration",
														"scope": 609,
														"src": "657:12:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 546,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "657:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 549,
												"initialValue": {
													"id": 548,
													"name": "value",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 534,
													"src": "672:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "657:20:5"
											},
											{
												"assignments": [
													551
												],
												"declarations": [
													{
														"constant": false,
														"id": 551,
														"mutability": "mutable",
														"name": "digits",
														"nodeType": "VariableDeclaration",
														"scope": 609,
														"src": "687:14:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 550,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "687:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 552,
												"nodeType": "VariableDeclarationStatement",
												"src": "687:14:5"
											},
											{
												"body": {
													"id": 563,
													"nodeType": "Block",
													"src": "729:57:5",
													"statements": [
														{
															"expression": {
																"id": 557,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "UnaryOperation",
																"operator": "++",
																"prefix": false,
																"src": "743:8:5",
																"subExpression": {
																	"id": 556,
																	"name": "digits",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 551,
																	"src": "743:6:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 558,
															"nodeType": "ExpressionStatement",
															"src": "743:8:5"
														},
														{
															"expression": {
																"id": 561,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 559,
																	"name": "temp",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 547,
																	"src": "765:4:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "/=",
																"rightHandSide": {
																	"hexValue": "3130",
																	"id": 560,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "773:2:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"src": "765:10:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 562,
															"nodeType": "ExpressionStatement",
															"src": "765:10:5"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 555,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 553,
														"name": "temp",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 547,
														"src": "718:4:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 554,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "726:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "718:9:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 564,
												"nodeType": "WhileStatement",
												"src": "711:75:5"
											},
											{
												"assignments": [
													566
												],
												"declarations": [
													{
														"constant": false,
														"id": 566,
														"mutability": "mutable",
														"name": "buffer",
														"nodeType": "VariableDeclaration",
														"scope": 609,
														"src": "795:19:5",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 565,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "795:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 571,
												"initialValue": {
													"arguments": [
														{
															"id": 569,
															"name": "digits",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 551,
															"src": "827:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 568,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "NewExpression",
														"src": "817:9:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (uint256) pure returns (bytes memory)"
														},
														"typeName": {
															"id": 567,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "821:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														}
													},
													"id": 570,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "817:17:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "795:39:5"
											},
											{
												"body": {
													"id": 602,
													"nodeType": "Block",
													"src": "863:131:5",
													"statements": [
														{
															"expression": {
																"id": 577,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 575,
																	"name": "digits",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 551,
																	"src": "877:6:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "-=",
																"rightHandSide": {
																	"hexValue": "31",
																	"id": 576,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "887:1:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "877:11:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 578,
															"nodeType": "ExpressionStatement",
															"src": "877:11:5"
														},
														{
															"expression": {
																"id": 596,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"id": 579,
																		"name": "buffer",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 566,
																		"src": "902:6:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 581,
																	"indexExpression": {
																		"id": 580,
																		"name": "digits",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 551,
																		"src": "909:6:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "902:14:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 593,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"hexValue": "3438",
																						"id": 586,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "932:2:5",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_48_by_1",
																							"typeString": "int_const 48"
																						},
																						"value": "48"
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "+",
																					"rightExpression": {
																						"arguments": [
																							{
																								"commonType": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								},
																								"id": 591,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"leftExpression": {
																									"id": 589,
																									"name": "value",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 534,
																									"src": "945:5:5",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"nodeType": "BinaryOperation",
																								"operator": "%",
																								"rightExpression": {
																									"hexValue": "3130",
																									"id": 590,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"kind": "number",
																									"lValueRequested": false,
																									"nodeType": "Literal",
																									"src": "953:2:5",
																									"typeDescriptions": {
																										"typeIdentifier": "t_rational_10_by_1",
																										"typeString": "int_const 10"
																									},
																									"value": "10"
																								},
																								"src": "945:10:5",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							}
																						],
																						"expression": {
																							"argumentTypes": [
																								{
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							],
																							"id": 588,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"lValueRequested": false,
																							"nodeType": "ElementaryTypeNameExpression",
																							"src": "937:7:5",
																							"typeDescriptions": {
																								"typeIdentifier": "t_type$_t_uint256_$",
																								"typeString": "type(uint256)"
																							},
																							"typeName": {
																								"id": 587,
																								"name": "uint256",
																								"nodeType": "ElementaryTypeName",
																								"src": "937:7:5",
																								"typeDescriptions": {}
																							}
																						},
																						"id": 592,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"kind": "typeConversion",
																						"lValueRequested": false,
																						"names": [],
																						"nodeType": "FunctionCall",
																						"src": "937:19:5",
																						"tryCall": false,
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "932:24:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"id": 585,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "926:5:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_uint8_$",
																					"typeString": "type(uint8)"
																				},
																				"typeName": {
																					"id": 584,
																					"name": "uint8",
																					"nodeType": "ElementaryTypeName",
																					"src": "926:5:5",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 594,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "926:31:5",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint8",
																				"typeString": "uint8"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint8",
																				"typeString": "uint8"
																			}
																		],
																		"id": 583,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "919:6:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_bytes1_$",
																			"typeString": "type(bytes1)"
																		},
																		"typeName": {
																			"id": 582,
																			"name": "bytes1",
																			"nodeType": "ElementaryTypeName",
																			"src": "919:6:5",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 595,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "919:39:5",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	}
																},
																"src": "902:56:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes1",
																	"typeString": "bytes1"
																}
															},
															"id": 597,
															"nodeType": "ExpressionStatement",
															"src": "902:56:5"
														},
														{
															"expression": {
																"id": 600,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 598,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 534,
																	"src": "972:5:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "/=",
																"rightHandSide": {
																	"hexValue": "3130",
																	"id": 599,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "981:2:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"src": "972:11:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 601,
															"nodeType": "ExpressionStatement",
															"src": "972:11:5"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 574,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 572,
														"name": "value",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 534,
														"src": "851:5:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 573,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "860:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "851:10:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 603,
												"nodeType": "WhileStatement",
												"src": "844:150:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 606,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 566,
															"src": "1017:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 605,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "1010:6:5",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_string_storage_ptr_$",
															"typeString": "type(string storage pointer)"
														},
														"typeName": {
															"id": 604,
															"name": "string",
															"nodeType": "ElementaryTypeName",
															"src": "1010:6:5",
															"typeDescriptions": {}
														}
													},
													"id": 607,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1010:14:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 538,
												"id": 608,
												"nodeType": "Return",
												"src": "1003:21:5"
											}
										]
									},
									"documentation": {
										"id": 532,
										"nodeType": "StructuredDocumentation",
										"src": "233:90:5",
										"text": " @dev Converts a `uint256` to its ASCII `string` decimal representation."
									},
									"id": 610,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toString",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 535,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 534,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 610,
												"src": "346:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 533,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "346:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "345:15:5"
									},
									"returnParameters": {
										"id": 538,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 537,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 610,
												"src": "384:13:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 536,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "384:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "383:15:5"
									},
									"scope": 728,
									"src": "328:703:5",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 650,
										"nodeType": "Block",
										"src": "1210:255:5",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 620,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 618,
														"name": "value",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 613,
														"src": "1224:5:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 619,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1233:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1224:10:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 624,
												"nodeType": "IfStatement",
												"src": "1220:54:5",
												"trueBody": {
													"id": 623,
													"nodeType": "Block",
													"src": "1236:38:5",
													"statements": [
														{
															"expression": {
																"hexValue": "30783030",
																"id": 621,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "string",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1257:6:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_stringliteral_27489e20a0060b723a1748bdff5e44570ee9fae64141728105692eac6031e8a4",
																	"typeString": "literal_string \"0x00\""
																},
																"value": "0x00"
															},
															"functionReturnParameters": 617,
															"id": 622,
															"nodeType": "Return",
															"src": "1250:13:5"
														}
													]
												}
											},
											{
												"assignments": [
													626
												],
												"declarations": [
													{
														"constant": false,
														"id": 626,
														"mutability": "mutable",
														"name": "temp",
														"nodeType": "VariableDeclaration",
														"scope": 650,
														"src": "1283:12:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 625,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1283:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 628,
												"initialValue": {
													"id": 627,
													"name": "value",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 613,
													"src": "1298:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1283:20:5"
											},
											{
												"assignments": [
													630
												],
												"declarations": [
													{
														"constant": false,
														"id": 630,
														"mutability": "mutable",
														"name": "length",
														"nodeType": "VariableDeclaration",
														"scope": 650,
														"src": "1313:14:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 629,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1313:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 632,
												"initialValue": {
													"hexValue": "30",
													"id": 631,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "1330:1:5",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1313:18:5"
											},
											{
												"body": {
													"id": 643,
													"nodeType": "Block",
													"src": "1359:57:5",
													"statements": [
														{
															"expression": {
																"id": 637,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "UnaryOperation",
																"operator": "++",
																"prefix": false,
																"src": "1373:8:5",
																"subExpression": {
																	"id": 636,
																	"name": "length",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 630,
																	"src": "1373:6:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 638,
															"nodeType": "ExpressionStatement",
															"src": "1373:8:5"
														},
														{
															"expression": {
																"id": 641,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 639,
																	"name": "temp",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 626,
																	"src": "1395:4:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": ">>=",
																"rightHandSide": {
																	"hexValue": "38",
																	"id": 640,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1404:1:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_8_by_1",
																		"typeString": "int_const 8"
																	},
																	"value": "8"
																},
																"src": "1395:10:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 642,
															"nodeType": "ExpressionStatement",
															"src": "1395:10:5"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 635,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 633,
														"name": "temp",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 626,
														"src": "1348:4:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 634,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1356:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1348:9:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 644,
												"nodeType": "WhileStatement",
												"src": "1341:75:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 646,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 613,
															"src": "1444:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 647,
															"name": "length",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 630,
															"src": "1451:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 645,
														"name": "toHexString",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															651,
															727
														],
														"referencedDeclaration": 727,
														"src": "1432:11:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$",
															"typeString": "function (uint256,uint256) pure returns (string memory)"
														}
													},
													"id": 648,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1432:26:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 617,
												"id": 649,
												"nodeType": "Return",
												"src": "1425:33:5"
											}
										]
									},
									"documentation": {
										"id": 611,
										"nodeType": "StructuredDocumentation",
										"src": "1037:94:5",
										"text": " @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."
									},
									"id": 651,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toHexString",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 614,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 613,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 651,
												"src": "1157:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 612,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1157:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1156:15:5"
									},
									"returnParameters": {
										"id": 617,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 616,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 651,
												"src": "1195:13:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 615,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1195:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1194:15:5"
									},
									"scope": 728,
									"src": "1136:329:5",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 726,
										"nodeType": "Block",
										"src": "1678:351:5",
										"statements": [
											{
												"assignments": [
													662
												],
												"declarations": [
													{
														"constant": false,
														"id": 662,
														"mutability": "mutable",
														"name": "buffer",
														"nodeType": "VariableDeclaration",
														"scope": 726,
														"src": "1688:19:5",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 661,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "1688:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 671,
												"initialValue": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 669,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 667,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 665,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1720:1:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 666,
																	"name": "length",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 656,
																	"src": "1724:6:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "1720:10:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"hexValue": "32",
																"id": 668,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1733:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_2_by_1",
																	"typeString": "int_const 2"
																},
																"value": "2"
															},
															"src": "1720:14:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 664,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "NewExpression",
														"src": "1710:9:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (uint256) pure returns (bytes memory)"
														},
														"typeName": {
															"id": 663,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "1714:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														}
													},
													"id": 670,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1710:25:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1688:47:5"
											},
											{
												"expression": {
													"id": 676,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 672,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 662,
															"src": "1745:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 674,
														"indexExpression": {
															"hexValue": "30",
															"id": 673,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1752:1:5",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "1745:9:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes1",
															"typeString": "bytes1"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "30",
														"id": 675,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "string",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1757:3:5",
														"typeDescriptions": {
															"typeIdentifier": "t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d",
															"typeString": "literal_string \"0\""
														},
														"value": "0"
													},
													"src": "1745:15:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes1",
														"typeString": "bytes1"
													}
												},
												"id": 677,
												"nodeType": "ExpressionStatement",
												"src": "1745:15:5"
											},
											{
												"expression": {
													"id": 682,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 678,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 662,
															"src": "1770:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 680,
														"indexExpression": {
															"hexValue": "31",
															"id": 679,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1777:1:5",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "1770:9:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes1",
															"typeString": "bytes1"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "78",
														"id": 681,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "string",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1782:3:5",
														"typeDescriptions": {
															"typeIdentifier": "t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83",
															"typeString": "literal_string \"x\""
														},
														"value": "x"
													},
													"src": "1770:15:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes1",
														"typeString": "bytes1"
													}
												},
												"id": 683,
												"nodeType": "ExpressionStatement",
												"src": "1770:15:5"
											},
											{
												"body": {
													"id": 712,
													"nodeType": "Block",
													"src": "1840:87:5",
													"statements": [
														{
															"expression": {
																"id": 706,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"id": 698,
																		"name": "buffer",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 662,
																		"src": "1854:6:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 700,
																	"indexExpression": {
																		"id": 699,
																		"name": "i",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 685,
																		"src": "1861:1:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "1854:9:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"baseExpression": {
																		"id": 701,
																		"name": "_HEX_SYMBOLS",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 531,
																		"src": "1866:12:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes16",
																			"typeString": "bytes16"
																		}
																	},
																	"id": 705,
																	"indexExpression": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 704,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 702,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 654,
																			"src": "1879:5:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "&",
																		"rightExpression": {
																			"hexValue": "307866",
																			"id": 703,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1887:3:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_15_by_1",
																				"typeString": "int_const 15"
																			},
																			"value": "0xf"
																		},
																		"src": "1879:11:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "1866:25:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	}
																},
																"src": "1854:37:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes1",
																	"typeString": "bytes1"
																}
															},
															"id": 707,
															"nodeType": "ExpressionStatement",
															"src": "1854:37:5"
														},
														{
															"expression": {
																"id": 710,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 708,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 654,
																	"src": "1905:5:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": ">>=",
																"rightHandSide": {
																	"hexValue": "34",
																	"id": 709,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1915:1:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_4_by_1",
																		"typeString": "int_const 4"
																	},
																	"value": "4"
																},
																"src": "1905:11:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 711,
															"nodeType": "ExpressionStatement",
															"src": "1905:11:5"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 694,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 692,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 685,
														"src": "1828:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "31",
														"id": 693,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1832:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "1828:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 713,
												"initializationExpression": {
													"assignments": [
														685
													],
													"declarations": [
														{
															"constant": false,
															"id": 685,
															"mutability": "mutable",
															"name": "i",
															"nodeType": "VariableDeclaration",
															"scope": 713,
															"src": "1800:9:5",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 684,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "1800:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 691,
													"initialValue": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 690,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 688,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"hexValue": "32",
																"id": 686,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1812:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_2_by_1",
																	"typeString": "int_const 2"
																},
																"value": "2"
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 687,
																"name": "length",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 656,
																"src": "1816:6:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1812:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "+",
														"rightExpression": {
															"hexValue": "31",
															"id": 689,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1825:1:5",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"src": "1812:14:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "1800:26:5"
												},
												"loopExpression": {
													"expression": {
														"id": 696,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "--",
														"prefix": true,
														"src": "1835:3:5",
														"subExpression": {
															"id": 695,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 685,
															"src": "1837:1:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 697,
													"nodeType": "ExpressionStatement",
													"src": "1835:3:5"
												},
												"nodeType": "ForStatement",
												"src": "1795:132:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 717,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 715,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 654,
																"src": "1944:5:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 716,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1953:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "1944:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "537472696e67733a20686578206c656e67746820696e73756666696369656e74",
															"id": 718,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1956:34:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2",
																"typeString": "literal_string \"Strings: hex length insufficient\""
															},
															"value": "Strings: hex length insufficient"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2",
																"typeString": "literal_string \"Strings: hex length insufficient\""
															}
														],
														"id": 714,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1936:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 719,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1936:55:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 720,
												"nodeType": "ExpressionStatement",
												"src": "1936:55:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 723,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 662,
															"src": "2015:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 722,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "2008:6:5",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_string_storage_ptr_$",
															"typeString": "type(string storage pointer)"
														},
														"typeName": {
															"id": 721,
															"name": "string",
															"nodeType": "ElementaryTypeName",
															"src": "2008:6:5",
															"typeDescriptions": {}
														}
													},
													"id": 724,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2008:14:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 660,
												"id": 725,
												"nodeType": "Return",
												"src": "2001:21:5"
											}
										]
									},
									"documentation": {
										"id": 652,
										"nodeType": "StructuredDocumentation",
										"src": "1471:112:5",
										"text": " @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."
									},
									"id": 727,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toHexString",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 657,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 654,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 727,
												"src": "1609:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 653,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1609:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 656,
												"mutability": "mutable",
												"name": "length",
												"nodeType": "VariableDeclaration",
												"scope": 727,
												"src": "1624:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 655,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1624:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1608:31:5"
									},
									"returnParameters": {
										"id": 660,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 659,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 727,
												"src": "1663:13:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 658,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1663:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1662:15:5"
									},
									"scope": 728,
									"src": "1588:441:5",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 729,
							"src": "146:1885:5"
						}
					],
					"src": "86:1946:5"
				},
				"id": 5
			},
			"@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol",
					"exportedSymbols": {
						"ECDSA": [
							1118
						],
						"Strings": [
							728
						]
					},
					"id": 1119,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 730,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "97:23:6"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Strings.sol",
							"file": "../Strings.sol",
							"id": 731,
							"nodeType": "ImportDirective",
							"scope": 1119,
							"sourceUnit": 729,
							"src": "122:24:6",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 732,
								"nodeType": "StructuredDocumentation",
								"src": "148:205:6",
								"text": " @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n These functions can be used to verify that a message was signed by the holder\n of the private keys of a given address."
							},
							"fullyImplemented": true,
							"id": 1118,
							"linearizedBaseContracts": [
								1118
							],
							"name": "ECDSA",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "ECDSA.RecoverError",
									"id": 738,
									"members": [
										{
											"id": 733,
											"name": "NoError",
											"nodeType": "EnumValue",
											"src": "402:7:6"
										},
										{
											"id": 734,
											"name": "InvalidSignature",
											"nodeType": "EnumValue",
											"src": "419:16:6"
										},
										{
											"id": 735,
											"name": "InvalidSignatureLength",
											"nodeType": "EnumValue",
											"src": "445:22:6"
										},
										{
											"id": 736,
											"name": "InvalidSignatureS",
											"nodeType": "EnumValue",
											"src": "477:17:6"
										},
										{
											"id": 737,
											"name": "InvalidSignatureV",
											"nodeType": "EnumValue",
											"src": "504:17:6"
										}
									],
									"name": "RecoverError",
									"nodeType": "EnumDefinition",
									"src": "374:153:6"
								},
								{
									"body": {
										"id": 791,
										"nodeType": "Block",
										"src": "587:577:6",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_enum$_RecoverError_$738",
														"typeString": "enum ECDSA.RecoverError"
													},
													"id": 747,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 744,
														"name": "error",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 741,
														"src": "601:5:6",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_RecoverError_$738",
															"typeString": "enum ECDSA.RecoverError"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"expression": {
															"id": 745,
															"name": "RecoverError",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 738,
															"src": "610:12:6",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_enum$_RecoverError_$738_$",
																"typeString": "type(enum ECDSA.RecoverError)"
															}
														},
														"id": 746,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberName": "NoError",
														"nodeType": "MemberAccess",
														"src": "610:20:6",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_RecoverError_$738",
															"typeString": "enum ECDSA.RecoverError"
														}
													},
													"src": "601:29:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_enum$_RecoverError_$738",
															"typeString": "enum ECDSA.RecoverError"
														},
														"id": 753,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 750,
															"name": "error",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 741,
															"src": "697:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$738",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"expression": {
																"id": 751,
																"name": "RecoverError",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 738,
																"src": "706:12:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_enum$_RecoverError_$738_$",
																	"typeString": "type(enum ECDSA.RecoverError)"
																}
															},
															"id": 752,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberName": "InvalidSignature",
															"nodeType": "MemberAccess",
															"src": "706:29:6",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$738",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														"src": "697:38:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseBody": {
														"condition": {
															"commonType": {
																"typeIdentifier": "t_enum$_RecoverError_$738",
																"typeString": "enum ECDSA.RecoverError"
															},
															"id": 762,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 759,
																"name": "error",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 741,
																"src": "806:5:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_enum$_RecoverError_$738",
																	"typeString": "enum ECDSA.RecoverError"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"expression": {
																	"id": 760,
																	"name": "RecoverError",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 738,
																	"src": "815:12:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_enum$_RecoverError_$738_$",
																		"typeString": "type(enum ECDSA.RecoverError)"
																	}
																},
																"id": 761,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "InvalidSignatureLength",
																"nodeType": "MemberAccess",
																"src": "815:35:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_enum$_RecoverError_$738",
																	"typeString": "enum ECDSA.RecoverError"
																}
															},
															"src": "806:44:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"falseBody": {
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_enum$_RecoverError_$738",
																	"typeString": "enum ECDSA.RecoverError"
																},
																"id": 771,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 768,
																	"name": "error",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 741,
																	"src": "928:5:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_enum$_RecoverError_$738",
																		"typeString": "enum ECDSA.RecoverError"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"expression": {
																		"id": 769,
																		"name": "RecoverError",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 738,
																		"src": "937:12:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_enum$_RecoverError_$738_$",
																			"typeString": "type(enum ECDSA.RecoverError)"
																		}
																	},
																	"id": 770,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberName": "InvalidSignatureS",
																	"nodeType": "MemberAccess",
																	"src": "937:30:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_enum$_RecoverError_$738",
																		"typeString": "enum ECDSA.RecoverError"
																	}
																},
																"src": "928:39:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"falseBody": {
																"condition": {
																	"commonType": {
																		"typeIdentifier": "t_enum$_RecoverError_$738",
																		"typeString": "enum ECDSA.RecoverError"
																	},
																	"id": 780,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 777,
																		"name": "error",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 741,
																		"src": "1048:5:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_enum$_RecoverError_$738",
																			"typeString": "enum ECDSA.RecoverError"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "==",
																	"rightExpression": {
																		"expression": {
																			"id": 778,
																			"name": "RecoverError",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 738,
																			"src": "1057:12:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_enum$_RecoverError_$738_$",
																				"typeString": "type(enum ECDSA.RecoverError)"
																			}
																		},
																		"id": 779,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberName": "InvalidSignatureV",
																		"nodeType": "MemberAccess",
																		"src": "1057:30:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_enum$_RecoverError_$738",
																			"typeString": "enum ECDSA.RecoverError"
																		}
																	},
																	"src": "1048:39:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"id": 786,
																"nodeType": "IfStatement",
																"src": "1044:114:6",
																"trueBody": {
																	"id": 785,
																	"nodeType": "Block",
																	"src": "1089:69:6",
																	"statements": [
																		{
																			"expression": {
																				"arguments": [
																					{
																						"hexValue": "45434453413a20696e76616c6964207369676e6174757265202776272076616c7565",
																						"id": 782,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "string",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "1110:36:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_stringliteral_8522ee1b53216f595394db8e80a64d9e7d9bd512c0811c18debe9f40858597e4",
																							"typeString": "literal_string \"ECDSA: invalid signature 'v' value\""
																						},
																						"value": "ECDSA: invalid signature 'v' value"
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_stringliteral_8522ee1b53216f595394db8e80a64d9e7d9bd512c0811c18debe9f40858597e4",
																							"typeString": "literal_string \"ECDSA: invalid signature 'v' value\""
																						}
																					],
																					"id": 781,
																					"name": "revert",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [
																						4294967277,
																						4294967277
																					],
																					"referencedDeclaration": 4294967277,
																					"src": "1103:6:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																						"typeString": "function (string memory) pure"
																					}
																				},
																				"id": 783,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "1103:44:6",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_tuple$__$",
																					"typeString": "tuple()"
																				}
																			},
																			"id": 784,
																			"nodeType": "ExpressionStatement",
																			"src": "1103:44:6"
																		}
																	]
																}
															},
															"id": 787,
															"nodeType": "IfStatement",
															"src": "924:234:6",
															"trueBody": {
																"id": 776,
																"nodeType": "Block",
																"src": "969:69:6",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"hexValue": "45434453413a20696e76616c6964207369676e6174757265202773272076616c7565",
																					"id": 773,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "string",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "990:36:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd",
																						"typeString": "literal_string \"ECDSA: invalid signature 's' value\""
																					},
																					"value": "ECDSA: invalid signature 's' value"
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd",
																						"typeString": "literal_string \"ECDSA: invalid signature 's' value\""
																					}
																				],
																				"id": 772,
																				"name": "revert",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [
																					4294967277,
																					4294967277
																				],
																				"referencedDeclaration": 4294967277,
																				"src": "983:6:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																					"typeString": "function (string memory) pure"
																				}
																			},
																			"id": 774,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "983:44:6",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 775,
																		"nodeType": "ExpressionStatement",
																		"src": "983:44:6"
																	}
																]
															}
														},
														"id": 788,
														"nodeType": "IfStatement",
														"src": "802:356:6",
														"trueBody": {
															"id": 767,
															"nodeType": "Block",
															"src": "852:66:6",
															"statements": [
																{
																	"expression": {
																		"arguments": [
																			{
																				"hexValue": "45434453413a20696e76616c6964207369676e6174757265206c656e677468",
																				"id": 764,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "string",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "873:33:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77",
																					"typeString": "literal_string \"ECDSA: invalid signature length\""
																				},
																				"value": "ECDSA: invalid signature length"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77",
																					"typeString": "literal_string \"ECDSA: invalid signature length\""
																				}
																			],
																			"id": 763,
																			"name": "revert",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [
																				4294967277,
																				4294967277
																			],
																			"referencedDeclaration": 4294967277,
																			"src": "866:6:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																				"typeString": "function (string memory) pure"
																			}
																		},
																		"id": 765,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "866:41:6",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_tuple$__$",
																			"typeString": "tuple()"
																		}
																	},
																	"id": 766,
																	"nodeType": "ExpressionStatement",
																	"src": "866:41:6"
																}
															]
														}
													},
													"id": 789,
													"nodeType": "IfStatement",
													"src": "693:465:6",
													"trueBody": {
														"id": 758,
														"nodeType": "Block",
														"src": "737:59:6",
														"statements": [
															{
																"expression": {
																	"arguments": [
																		{
																			"hexValue": "45434453413a20696e76616c6964207369676e6174757265",
																			"id": 755,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "string",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "758:26:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be",
																				"typeString": "literal_string \"ECDSA: invalid signature\""
																			},
																			"value": "ECDSA: invalid signature"
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be",
																				"typeString": "literal_string \"ECDSA: invalid signature\""
																			}
																		],
																		"id": 754,
																		"name": "revert",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [
																			4294967277,
																			4294967277
																		],
																		"referencedDeclaration": 4294967277,
																		"src": "751:6:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																			"typeString": "function (string memory) pure"
																		}
																	},
																	"id": 756,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "751:34:6",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_tuple$__$",
																		"typeString": "tuple()"
																	}
																},
																"id": 757,
																"nodeType": "ExpressionStatement",
																"src": "751:34:6"
															}
														]
													}
												},
												"id": 790,
												"nodeType": "IfStatement",
												"src": "597:561:6",
												"trueBody": {
													"id": 749,
													"nodeType": "Block",
													"src": "632:55:6",
													"statements": [
														{
															"functionReturnParameters": 743,
															"id": 748,
															"nodeType": "Return",
															"src": "646:7:6"
														}
													]
												}
											}
										]
									},
									"id": 792,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_throwError",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 742,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 741,
												"mutability": "mutable",
												"name": "error",
												"nodeType": "VariableDeclaration",
												"scope": 792,
												"src": "554:18:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_RecoverError_$738",
													"typeString": "enum ECDSA.RecoverError"
												},
												"typeName": {
													"id": 740,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 739,
														"name": "RecoverError",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 738,
														"src": "554:12:6"
													},
													"referencedDeclaration": 738,
													"src": "554:12:6",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_RecoverError_$738",
														"typeString": "enum ECDSA.RecoverError"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "553:20:6"
									},
									"returnParameters": {
										"id": 743,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "587:0:6"
									},
									"scope": 1118,
									"src": "533:631:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 856,
										"nodeType": "Block",
										"src": "2332:1175:6",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 808,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 805,
															"name": "signature",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 797,
															"src": "2539:9:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 806,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "2539:16:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "3635",
														"id": 807,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2559:2:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_65_by_1",
															"typeString": "int_const 65"
														},
														"value": "65"
													},
													"src": "2539:22:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 830,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"id": 827,
																"name": "signature",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 797,
																"src": "3021:9:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"id": 828,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "length",
															"nodeType": "MemberAccess",
															"src": "3021:16:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"hexValue": "3634",
															"id": 829,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3041:2:6",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_64_by_1",
																"typeString": "int_const 64"
															},
															"value": "64"
														},
														"src": "3021:22:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseBody": {
														"id": 853,
														"nodeType": "Block",
														"src": "3420:81:6",
														"statements": [
															{
																"expression": {
																	"components": [
																		{
																			"arguments": [
																				{
																					"hexValue": "30",
																					"id": 847,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "3450:1:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_0_by_1",
																						"typeString": "int_const 0"
																					},
																					"value": "0"
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_rational_0_by_1",
																						"typeString": "int_const 0"
																					}
																				],
																				"id": 846,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "3442:7:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_address_$",
																					"typeString": "type(address)"
																				},
																				"typeName": {
																					"id": 845,
																					"name": "address",
																					"nodeType": "ElementaryTypeName",
																					"src": "3442:7:6",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 848,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "3442:10:6",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"expression": {
																				"id": 849,
																				"name": "RecoverError",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 738,
																				"src": "3454:12:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_enum$_RecoverError_$738_$",
																					"typeString": "type(enum ECDSA.RecoverError)"
																				}
																			},
																			"id": 850,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"memberName": "InvalidSignatureLength",
																			"nodeType": "MemberAccess",
																			"src": "3454:35:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_enum$_RecoverError_$738",
																				"typeString": "enum ECDSA.RecoverError"
																			}
																		}
																	],
																	"id": 851,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "3441:49:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$738_$",
																		"typeString": "tuple(address,enum ECDSA.RecoverError)"
																	}
																},
																"functionReturnParameters": 804,
																"id": 852,
																"nodeType": "Return",
																"src": "3434:56:6"
															}
														]
													},
													"id": 854,
													"nodeType": "IfStatement",
													"src": "3017:484:6",
													"trueBody": {
														"id": 844,
														"nodeType": "Block",
														"src": "3045:369:6",
														"statements": [
															{
																"assignments": [
																	832
																],
																"declarations": [
																	{
																		"constant": false,
																		"id": 832,
																		"mutability": "mutable",
																		"name": "r",
																		"nodeType": "VariableDeclaration",
																		"scope": 844,
																		"src": "3059:9:6",
																		"stateVariable": false,
																		"storageLocation": "default",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		},
																		"typeName": {
																			"id": 831,
																			"name": "bytes32",
																			"nodeType": "ElementaryTypeName",
																			"src": "3059:7:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		},
																		"visibility": "internal"
																	}
																],
																"id": 833,
																"nodeType": "VariableDeclarationStatement",
																"src": "3059:9:6"
															},
															{
																"assignments": [
																	835
																],
																"declarations": [
																	{
																		"constant": false,
																		"id": 835,
																		"mutability": "mutable",
																		"name": "vs",
																		"nodeType": "VariableDeclaration",
																		"scope": 844,
																		"src": "3082:10:6",
																		"stateVariable": false,
																		"storageLocation": "default",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		},
																		"typeName": {
																			"id": 834,
																			"name": "bytes32",
																			"nodeType": "ElementaryTypeName",
																			"src": "3082:7:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		},
																		"visibility": "internal"
																	}
																],
																"id": 836,
																"nodeType": "VariableDeclarationStatement",
																"src": "3082:10:6"
															},
															{
																"AST": {
																	"nodeType": "YulBlock",
																	"src": "3246:114:6",
																	"statements": [
																		{
																			"nodeType": "YulAssignment",
																			"src": "3264:32:6",
																			"value": {
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "signature",
																								"nodeType": "YulIdentifier",
																								"src": "3279:9:6"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "3290:4:6",
																								"type": "",
																								"value": "0x20"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "3275:3:6"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "3275:20:6"
																					}
																				],
																				"functionName": {
																					"name": "mload",
																					"nodeType": "YulIdentifier",
																					"src": "3269:5:6"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3269:27:6"
																			},
																			"variableNames": [
																				{
																					"name": "r",
																					"nodeType": "YulIdentifier",
																					"src": "3264:1:6"
																				}
																			]
																		},
																		{
																			"nodeType": "YulAssignment",
																			"src": "3313:33:6",
																			"value": {
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "signature",
																								"nodeType": "YulIdentifier",
																								"src": "3329:9:6"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "3340:4:6",
																								"type": "",
																								"value": "0x40"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "3325:3:6"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "3325:20:6"
																					}
																				],
																				"functionName": {
																					"name": "mload",
																					"nodeType": "YulIdentifier",
																					"src": "3319:5:6"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3319:27:6"
																			},
																			"variableNames": [
																				{
																					"name": "vs",
																					"nodeType": "YulIdentifier",
																					"src": "3313:2:6"
																				}
																			]
																		}
																	]
																},
																"evmVersion": "istanbul",
																"externalReferences": [
																	{
																		"declaration": 832,
																		"isOffset": false,
																		"isSlot": false,
																		"src": "3264:1:6",
																		"valueSize": 1
																	},
																	{
																		"declaration": 797,
																		"isOffset": false,
																		"isSlot": false,
																		"src": "3279:9:6",
																		"valueSize": 1
																	},
																	{
																		"declaration": 797,
																		"isOffset": false,
																		"isSlot": false,
																		"src": "3329:9:6",
																		"valueSize": 1
																	},
																	{
																		"declaration": 835,
																		"isOffset": false,
																		"isSlot": false,
																		"src": "3313:2:6",
																		"valueSize": 1
																	}
																],
																"id": 837,
																"nodeType": "InlineAssembly",
																"src": "3237:123:6"
															},
															{
																"expression": {
																	"arguments": [
																		{
																			"id": 839,
																			"name": "hash",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 795,
																			"src": "3391:4:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		},
																		{
																			"id": 840,
																			"name": "r",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 832,
																			"src": "3397:1:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		},
																		{
																			"id": 841,
																			"name": "vs",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 835,
																			"src": "3400:2:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			},
																			{
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			},
																			{
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		],
																		"id": 838,
																		"name": "tryRecover",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [
																			857,
																			914,
																			1025
																		],
																		"referencedDeclaration": 914,
																		"src": "3380:10:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$738_$",
																			"typeString": "function (bytes32,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError)"
																		}
																	},
																	"id": 842,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "3380:23:6",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$738_$",
																		"typeString": "tuple(address,enum ECDSA.RecoverError)"
																	}
																},
																"functionReturnParameters": 804,
																"id": 843,
																"nodeType": "Return",
																"src": "3373:30:6"
															}
														]
													}
												},
												"id": 855,
												"nodeType": "IfStatement",
												"src": "2535:966:6",
												"trueBody": {
													"id": 826,
													"nodeType": "Block",
													"src": "2563:448:6",
													"statements": [
														{
															"assignments": [
																810
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 810,
																	"mutability": "mutable",
																	"name": "r",
																	"nodeType": "VariableDeclaration",
																	"scope": 826,
																	"src": "2577:9:6",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	"typeName": {
																		"id": 809,
																		"name": "bytes32",
																		"nodeType": "ElementaryTypeName",
																		"src": "2577:7:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 811,
															"nodeType": "VariableDeclarationStatement",
															"src": "2577:9:6"
														},
														{
															"assignments": [
																813
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 813,
																	"mutability": "mutable",
																	"name": "s",
																	"nodeType": "VariableDeclaration",
																	"scope": 826,
																	"src": "2600:9:6",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	"typeName": {
																		"id": 812,
																		"name": "bytes32",
																		"nodeType": "ElementaryTypeName",
																		"src": "2600:7:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 814,
															"nodeType": "VariableDeclarationStatement",
															"src": "2600:9:6"
														},
														{
															"assignments": [
																816
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 816,
																	"mutability": "mutable",
																	"name": "v",
																	"nodeType": "VariableDeclaration",
																	"scope": 826,
																	"src": "2623:7:6",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	},
																	"typeName": {
																		"id": 815,
																		"name": "uint8",
																		"nodeType": "ElementaryTypeName",
																		"src": "2623:5:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 817,
															"nodeType": "VariableDeclarationStatement",
															"src": "2623:7:6"
														},
														{
															"AST": {
																"nodeType": "YulBlock",
																"src": "2784:171:6",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "2802:32:6",
																		"value": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "signature",
																							"nodeType": "YulIdentifier",
																							"src": "2817:9:6"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "2828:4:6",
																							"type": "",
																							"value": "0x20"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "2813:3:6"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "2813:20:6"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nodeType": "YulIdentifier",
																				"src": "2807:5:6"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2807:27:6"
																		},
																		"variableNames": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "2802:1:6"
																			}
																		]
																	},
																	{
																		"nodeType": "YulAssignment",
																		"src": "2851:32:6",
																		"value": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "signature",
																							"nodeType": "YulIdentifier",
																							"src": "2866:9:6"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "2877:4:6",
																							"type": "",
																							"value": "0x40"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "2862:3:6"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "2862:20:6"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nodeType": "YulIdentifier",
																				"src": "2856:5:6"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2856:27:6"
																		},
																		"variableNames": [
																			{
																				"name": "s",
																				"nodeType": "YulIdentifier",
																				"src": "2851:1:6"
																			}
																		]
																	},
																	{
																		"nodeType": "YulAssignment",
																		"src": "2900:41:6",
																		"value": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2910:1:6",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "signature",
																									"nodeType": "YulIdentifier",
																									"src": "2923:9:6"
																								},
																								{
																									"kind": "number",
																									"nodeType": "YulLiteral",
																									"src": "2934:4:6",
																									"type": "",
																									"value": "0x60"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "2919:3:6"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "2919:20:6"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "2913:5:6"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "2913:27:6"
																				}
																			],
																			"functionName": {
																				"name": "byte",
																				"nodeType": "YulIdentifier",
																				"src": "2905:4:6"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2905:36:6"
																		},
																		"variableNames": [
																			{
																				"name": "v",
																				"nodeType": "YulIdentifier",
																				"src": "2900:1:6"
																			}
																		]
																	}
																]
															},
															"evmVersion": "istanbul",
															"externalReferences": [
																{
																	"declaration": 810,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "2802:1:6",
																	"valueSize": 1
																},
																{
																	"declaration": 813,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "2851:1:6",
																	"valueSize": 1
																},
																{
																	"declaration": 797,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "2817:9:6",
																	"valueSize": 1
																},
																{
																	"declaration": 797,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "2866:9:6",
																	"valueSize": 1
																},
																{
																	"declaration": 797,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "2923:9:6",
																	"valueSize": 1
																},
																{
																	"declaration": 816,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "2900:1:6",
																	"valueSize": 1
																}
															],
															"id": 818,
															"nodeType": "InlineAssembly",
															"src": "2775:180:6"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"id": 820,
																		"name": "hash",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 795,
																		"src": "2986:4:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	{
																		"id": 821,
																		"name": "v",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 816,
																		"src": "2992:1:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	},
																	{
																		"id": 822,
																		"name": "r",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 810,
																		"src": "2995:1:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	{
																		"id": 823,
																		"name": "s",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 813,
																		"src": "2998:1:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		},
																		{
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		},
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		},
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	],
																	"id": 819,
																	"name": "tryRecover",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		857,
																		914,
																		1025
																	],
																	"referencedDeclaration": 1025,
																	"src": "2975:10:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$738_$",
																		"typeString": "function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError)"
																	}
																},
																"id": 824,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2975:25:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$738_$",
																	"typeString": "tuple(address,enum ECDSA.RecoverError)"
																}
															},
															"functionReturnParameters": 804,
															"id": 825,
															"nodeType": "Return",
															"src": "2968:32:6"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 793,
										"nodeType": "StructuredDocumentation",
										"src": "1170:1053:6",
										"text": " @dev Returns the address that signed a hashed message (`hash`) with\n `signature` or error string. This address can then be used for verification purposes.\n The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {toEthSignedMessageHash} on it.\n Documentation for signature generation:\n - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n _Available since v4.3._"
									},
									"id": 857,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryRecover",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 798,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 795,
												"mutability": "mutable",
												"name": "hash",
												"nodeType": "VariableDeclaration",
												"scope": 857,
												"src": "2248:12:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 794,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2248:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 797,
												"mutability": "mutable",
												"name": "signature",
												"nodeType": "VariableDeclaration",
												"scope": 857,
												"src": "2262:22:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 796,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2262:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2247:38:6"
									},
									"returnParameters": {
										"id": 804,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 800,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 857,
												"src": "2309:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 799,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2309:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 803,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 857,
												"src": "2318:12:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_RecoverError_$738",
													"typeString": "enum ECDSA.RecoverError"
												},
												"typeName": {
													"id": 802,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 801,
														"name": "RecoverError",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 738,
														"src": "2318:12:6"
													},
													"referencedDeclaration": 738,
													"src": "2318:12:6",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_RecoverError_$738",
														"typeString": "enum ECDSA.RecoverError"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2308:23:6"
									},
									"scope": 1118,
									"src": "2228:1279:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 883,
										"nodeType": "Block",
										"src": "4380:140:6",
										"statements": [
											{
												"assignments": [
													868,
													871
												],
												"declarations": [
													{
														"constant": false,
														"id": 868,
														"mutability": "mutable",
														"name": "recovered",
														"nodeType": "VariableDeclaration",
														"scope": 883,
														"src": "4391:17:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 867,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "4391:7:6",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 871,
														"mutability": "mutable",
														"name": "error",
														"nodeType": "VariableDeclaration",
														"scope": 883,
														"src": "4410:18:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_RecoverError_$738",
															"typeString": "enum ECDSA.RecoverError"
														},
														"typeName": {
															"id": 870,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 869,
																"name": "RecoverError",
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 738,
																"src": "4410:12:6"
															},
															"referencedDeclaration": 738,
															"src": "4410:12:6",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$738",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 876,
												"initialValue": {
													"arguments": [
														{
															"id": 873,
															"name": "hash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 860,
															"src": "4443:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 874,
															"name": "signature",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 862,
															"src": "4449:9:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 872,
														"name": "tryRecover",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															857,
															914,
															1025
														],
														"referencedDeclaration": 857,
														"src": "4432:10:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_address_$_t_enum$_RecoverError_$738_$",
															"typeString": "function (bytes32,bytes memory) pure returns (address,enum ECDSA.RecoverError)"
														}
													},
													"id": 875,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4432:27:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$738_$",
														"typeString": "tuple(address,enum ECDSA.RecoverError)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4390:69:6"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 878,
															"name": "error",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 871,
															"src": "4481:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$738",
																"typeString": "enum ECDSA.RecoverError"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_enum$_RecoverError_$738",
																"typeString": "enum ECDSA.RecoverError"
															}
														],
														"id": 877,
														"name": "_throwError",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 792,
														"src": "4469:11:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_enum$_RecoverError_$738_$returns$__$",
															"typeString": "function (enum ECDSA.RecoverError) pure"
														}
													},
													"id": 879,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4469:18:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 880,
												"nodeType": "ExpressionStatement",
												"src": "4469:18:6"
											},
											{
												"expression": {
													"id": 881,
													"name": "recovered",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 868,
													"src": "4504:9:6",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 866,
												"id": 882,
												"nodeType": "Return",
												"src": "4497:16:6"
											}
										]
									},
									"documentation": {
										"id": 858,
										"nodeType": "StructuredDocumentation",
										"src": "3513:775:6",
										"text": " @dev Returns the address that signed a hashed message (`hash`) with\n `signature`. This address can then be used for verification purposes.\n The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {toEthSignedMessageHash} on it."
									},
									"id": 884,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "recover",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 863,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 860,
												"mutability": "mutable",
												"name": "hash",
												"nodeType": "VariableDeclaration",
												"scope": 884,
												"src": "4310:12:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 859,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4310:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 862,
												"mutability": "mutable",
												"name": "signature",
												"nodeType": "VariableDeclaration",
												"scope": 884,
												"src": "4324:22:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 861,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4324:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4309:38:6"
									},
									"returnParameters": {
										"id": 866,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 865,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 884,
												"src": "4371:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 864,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4371:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4370:9:6"
									},
									"scope": 1118,
									"src": "4293:227:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 913,
										"nodeType": "Block",
										"src": "4907:246:6",
										"statements": [
											{
												"assignments": [
													900
												],
												"declarations": [
													{
														"constant": false,
														"id": 900,
														"mutability": "mutable",
														"name": "s",
														"nodeType": "VariableDeclaration",
														"scope": 913,
														"src": "4917:9:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 899,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "4917:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 901,
												"nodeType": "VariableDeclarationStatement",
												"src": "4917:9:6"
											},
											{
												"assignments": [
													903
												],
												"declarations": [
													{
														"constant": false,
														"id": 903,
														"mutability": "mutable",
														"name": "v",
														"nodeType": "VariableDeclaration",
														"scope": 913,
														"src": "4936:7:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														},
														"typeName": {
															"id": 902,
															"name": "uint8",
															"nodeType": "ElementaryTypeName",
															"src": "4936:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 904,
												"nodeType": "VariableDeclarationStatement",
												"src": "4936:7:6"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "4962:143:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4976:80:6",
															"value": {
																"arguments": [
																	{
																		"name": "vs",
																		"nodeType": "YulIdentifier",
																		"src": "4985:2:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4989:66:6",
																		"type": "",
																		"value": "0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "4981:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "4981:75:6"
															},
															"variableNames": [
																{
																	"name": "s",
																	"nodeType": "YulIdentifier",
																	"src": "4976:1:6"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5069:26:6",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5082:3:6",
																				"type": "",
																				"value": "255"
																			},
																			{
																				"name": "vs",
																				"nodeType": "YulIdentifier",
																				"src": "5087:2:6"
																			}
																		],
																		"functionName": {
																			"name": "shr",
																			"nodeType": "YulIdentifier",
																			"src": "5078:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5078:12:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5092:2:6",
																		"type": "",
																		"value": "27"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5074:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "5074:21:6"
															},
															"variableNames": [
																{
																	"name": "v",
																	"nodeType": "YulIdentifier",
																	"src": "5069:1:6"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 900,
														"isOffset": false,
														"isSlot": false,
														"src": "4976:1:6",
														"valueSize": 1
													},
													{
														"declaration": 903,
														"isOffset": false,
														"isSlot": false,
														"src": "5069:1:6",
														"valueSize": 1
													},
													{
														"declaration": 891,
														"isOffset": false,
														"isSlot": false,
														"src": "4985:2:6",
														"valueSize": 1
													},
													{
														"declaration": 891,
														"isOffset": false,
														"isSlot": false,
														"src": "5087:2:6",
														"valueSize": 1
													}
												],
												"id": 905,
												"nodeType": "InlineAssembly",
												"src": "4953:152:6"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 907,
															"name": "hash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 887,
															"src": "5132:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 908,
															"name": "v",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 903,
															"src": "5138:1:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														{
															"id": 909,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 889,
															"src": "5141:1:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 910,
															"name": "s",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 900,
															"src": "5144:1:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 906,
														"name": "tryRecover",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															857,
															914,
															1025
														],
														"referencedDeclaration": 1025,
														"src": "5121:10:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$738_$",
															"typeString": "function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError)"
														}
													},
													"id": 911,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5121:25:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$738_$",
														"typeString": "tuple(address,enum ECDSA.RecoverError)"
													}
												},
												"functionReturnParameters": 898,
												"id": 912,
												"nodeType": "Return",
												"src": "5114:32:6"
											}
										]
									},
									"documentation": {
										"id": 885,
										"nodeType": "StructuredDocumentation",
										"src": "4526:243:6",
										"text": " @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n _Available since v4.3._"
									},
									"id": 914,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryRecover",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 892,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 887,
												"mutability": "mutable",
												"name": "hash",
												"nodeType": "VariableDeclaration",
												"scope": 914,
												"src": "4803:12:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 886,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4803:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 889,
												"mutability": "mutable",
												"name": "r",
												"nodeType": "VariableDeclaration",
												"scope": 914,
												"src": "4825:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 888,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4825:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 891,
												"mutability": "mutable",
												"name": "vs",
												"nodeType": "VariableDeclaration",
												"scope": 914,
												"src": "4844:10:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 890,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4844:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4793:67:6"
									},
									"returnParameters": {
										"id": 898,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 894,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 914,
												"src": "4884:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 893,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4884:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 897,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 914,
												"src": "4893:12:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_RecoverError_$738",
													"typeString": "enum ECDSA.RecoverError"
												},
												"typeName": {
													"id": 896,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 895,
														"name": "RecoverError",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 738,
														"src": "4893:12:6"
													},
													"referencedDeclaration": 738,
													"src": "4893:12:6",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_RecoverError_$738",
														"typeString": "enum ECDSA.RecoverError"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4883:23:6"
									},
									"scope": 1118,
									"src": "4774:379:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 943,
										"nodeType": "Block",
										"src": "5434:136:6",
										"statements": [
											{
												"assignments": [
													927,
													930
												],
												"declarations": [
													{
														"constant": false,
														"id": 927,
														"mutability": "mutable",
														"name": "recovered",
														"nodeType": "VariableDeclaration",
														"scope": 943,
														"src": "5445:17:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 926,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "5445:7:6",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 930,
														"mutability": "mutable",
														"name": "error",
														"nodeType": "VariableDeclaration",
														"scope": 943,
														"src": "5464:18:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_RecoverError_$738",
															"typeString": "enum ECDSA.RecoverError"
														},
														"typeName": {
															"id": 929,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 928,
																"name": "RecoverError",
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 738,
																"src": "5464:12:6"
															},
															"referencedDeclaration": 738,
															"src": "5464:12:6",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$738",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 936,
												"initialValue": {
													"arguments": [
														{
															"id": 932,
															"name": "hash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 917,
															"src": "5497:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 933,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 919,
															"src": "5503:1:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 934,
															"name": "vs",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 921,
															"src": "5506:2:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 931,
														"name": "tryRecover",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															857,
															914,
															1025
														],
														"referencedDeclaration": 914,
														"src": "5486:10:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$738_$",
															"typeString": "function (bytes32,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError)"
														}
													},
													"id": 935,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5486:23:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$738_$",
														"typeString": "tuple(address,enum ECDSA.RecoverError)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5444:65:6"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 938,
															"name": "error",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 930,
															"src": "5531:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$738",
																"typeString": "enum ECDSA.RecoverError"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_enum$_RecoverError_$738",
																"typeString": "enum ECDSA.RecoverError"
															}
														],
														"id": 937,
														"name": "_throwError",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 792,
														"src": "5519:11:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_enum$_RecoverError_$738_$returns$__$",
															"typeString": "function (enum ECDSA.RecoverError) pure"
														}
													},
													"id": 939,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5519:18:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 940,
												"nodeType": "ExpressionStatement",
												"src": "5519:18:6"
											},
											{
												"expression": {
													"id": 941,
													"name": "recovered",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 927,
													"src": "5554:9:6",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 925,
												"id": 942,
												"nodeType": "Return",
												"src": "5547:16:6"
											}
										]
									},
									"documentation": {
										"id": 915,
										"nodeType": "StructuredDocumentation",
										"src": "5159:154:6",
										"text": " @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n _Available since v4.2._"
									},
									"id": 944,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "recover",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 922,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 917,
												"mutability": "mutable",
												"name": "hash",
												"nodeType": "VariableDeclaration",
												"scope": 944,
												"src": "5344:12:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 916,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5344:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 919,
												"mutability": "mutable",
												"name": "r",
												"nodeType": "VariableDeclaration",
												"scope": 944,
												"src": "5366:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 918,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5366:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 921,
												"mutability": "mutable",
												"name": "vs",
												"nodeType": "VariableDeclaration",
												"scope": 944,
												"src": "5385:10:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 920,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5385:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5334:67:6"
									},
									"returnParameters": {
										"id": 925,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 924,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 944,
												"src": "5425:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 923,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5425:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5424:9:6"
									},
									"scope": 1118,
									"src": "5318:252:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1024,
										"nodeType": "Block",
										"src": "5893:1454:6",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 966,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 963,
																"name": "s",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 953,
																"src": "6789:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															],
															"id": 962,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "6781:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint256_$",
																"typeString": "type(uint256)"
															},
															"typeName": {
																"id": 961,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "6781:7:6",
																"typeDescriptions": {}
															}
														},
														"id": 964,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6781:10:6",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "307837464646464646464646464646464646464646464646464646464646464646463544353736453733353741343530314444464539324634363638314232304130",
														"id": 965,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "6794:66:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_57896044618658097711785492504343953926418782139537452191302581570759080747168_by_1",
															"typeString": "int_const 5789...(69 digits omitted)...7168"
														},
														"value": "0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0"
													},
													"src": "6781:79:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 976,
												"nodeType": "IfStatement",
												"src": "6777:161:6",
												"trueBody": {
													"id": 975,
													"nodeType": "Block",
													"src": "6862:76:6",
													"statements": [
														{
															"expression": {
																"components": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 969,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "6892:1:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 968,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "6884:7:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 967,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "6884:7:6",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 970,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "6884:10:6",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"expression": {
																			"id": 971,
																			"name": "RecoverError",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 738,
																			"src": "6896:12:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_enum$_RecoverError_$738_$",
																				"typeString": "type(enum ECDSA.RecoverError)"
																			}
																		},
																		"id": 972,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberName": "InvalidSignatureS",
																		"nodeType": "MemberAccess",
																		"src": "6896:30:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_enum$_RecoverError_$738",
																			"typeString": "enum ECDSA.RecoverError"
																		}
																	}
																],
																"id": 973,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "6883:44:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$738_$",
																	"typeString": "tuple(address,enum ECDSA.RecoverError)"
																}
															},
															"functionReturnParameters": 960,
															"id": 974,
															"nodeType": "Return",
															"src": "6876:51:6"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 983,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														},
														"id": 979,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 977,
															"name": "v",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 949,
															"src": "6951:1:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "!=",
														"rightExpression": {
															"hexValue": "3237",
															"id": 978,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6956:2:6",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_27_by_1",
																"typeString": "int_const 27"
															},
															"value": "27"
														},
														"src": "6951:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														},
														"id": 982,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 980,
															"name": "v",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 949,
															"src": "6962:1:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "!=",
														"rightExpression": {
															"hexValue": "3238",
															"id": 981,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6967:2:6",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_28_by_1",
																"typeString": "int_const 28"
															},
															"value": "28"
														},
														"src": "6962:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "6951:18:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 993,
												"nodeType": "IfStatement",
												"src": "6947:100:6",
												"trueBody": {
													"id": 992,
													"nodeType": "Block",
													"src": "6971:76:6",
													"statements": [
														{
															"expression": {
																"components": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 986,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "7001:1:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 985,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "6993:7:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 984,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "6993:7:6",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 987,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "6993:10:6",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"expression": {
																			"id": 988,
																			"name": "RecoverError",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 738,
																			"src": "7005:12:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_enum$_RecoverError_$738_$",
																				"typeString": "type(enum ECDSA.RecoverError)"
																			}
																		},
																		"id": 989,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberName": "InvalidSignatureV",
																		"nodeType": "MemberAccess",
																		"src": "7005:30:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_enum$_RecoverError_$738",
																			"typeString": "enum ECDSA.RecoverError"
																		}
																	}
																],
																"id": 990,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "6992:44:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$738_$",
																	"typeString": "tuple(address,enum ECDSA.RecoverError)"
																}
															},
															"functionReturnParameters": 960,
															"id": 991,
															"nodeType": "Return",
															"src": "6985:51:6"
														}
													]
												}
											},
											{
												"assignments": [
													995
												],
												"declarations": [
													{
														"constant": false,
														"id": 995,
														"mutability": "mutable",
														"name": "signer",
														"nodeType": "VariableDeclaration",
														"scope": 1024,
														"src": "7141:14:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 994,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "7141:7:6",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1002,
												"initialValue": {
													"arguments": [
														{
															"id": 997,
															"name": "hash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 947,
															"src": "7168:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 998,
															"name": "v",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 949,
															"src": "7174:1:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														{
															"id": 999,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 951,
															"src": "7177:1:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 1000,
															"name": "s",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 953,
															"src": "7180:1:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 996,
														"name": "ecrecover",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967290,
														"src": "7158:9:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_ecrecover_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$",
															"typeString": "function (bytes32,uint8,bytes32,bytes32) pure returns (address)"
														}
													},
													"id": 1001,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7158:24:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7141:41:6"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 1008,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1003,
														"name": "signer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 995,
														"src": "7196:6:6",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 1006,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "7214:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 1005,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "7206:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 1004,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "7206:7:6",
																"typeDescriptions": {}
															}
														},
														"id": 1007,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "7206:10:6",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "7196:20:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1018,
												"nodeType": "IfStatement",
												"src": "7192:101:6",
												"trueBody": {
													"id": 1017,
													"nodeType": "Block",
													"src": "7218:75:6",
													"statements": [
														{
															"expression": {
																"components": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 1011,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "7248:1:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 1010,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "7240:7:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 1009,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "7240:7:6",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 1012,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "7240:10:6",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"expression": {
																			"id": 1013,
																			"name": "RecoverError",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 738,
																			"src": "7252:12:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_enum$_RecoverError_$738_$",
																				"typeString": "type(enum ECDSA.RecoverError)"
																			}
																		},
																		"id": 1014,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberName": "InvalidSignature",
																		"nodeType": "MemberAccess",
																		"src": "7252:29:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_enum$_RecoverError_$738",
																			"typeString": "enum ECDSA.RecoverError"
																		}
																	}
																],
																"id": 1015,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "7239:43:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$738_$",
																	"typeString": "tuple(address,enum ECDSA.RecoverError)"
																}
															},
															"functionReturnParameters": 960,
															"id": 1016,
															"nodeType": "Return",
															"src": "7232:50:6"
														}
													]
												}
											},
											{
												"expression": {
													"components": [
														{
															"id": 1019,
															"name": "signer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 995,
															"src": "7311:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"expression": {
																"id": 1020,
																"name": "RecoverError",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 738,
																"src": "7319:12:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_enum$_RecoverError_$738_$",
																	"typeString": "type(enum ECDSA.RecoverError)"
																}
															},
															"id": 1021,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberName": "NoError",
															"nodeType": "MemberAccess",
															"src": "7319:20:6",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$738",
																"typeString": "enum ECDSA.RecoverError"
															}
														}
													],
													"id": 1022,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "7310:30:6",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$738_$",
														"typeString": "tuple(address,enum ECDSA.RecoverError)"
													}
												},
												"functionReturnParameters": 960,
												"id": 1023,
												"nodeType": "Return",
												"src": "7303:37:6"
											}
										]
									},
									"documentation": {
										"id": 945,
										"nodeType": "StructuredDocumentation",
										"src": "5576:163:6",
										"text": " @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n `r` and `s` signature fields separately.\n _Available since v4.3._"
									},
									"id": 1025,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryRecover",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 954,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 947,
												"mutability": "mutable",
												"name": "hash",
												"nodeType": "VariableDeclaration",
												"scope": 1025,
												"src": "5773:12:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 946,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5773:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 949,
												"mutability": "mutable",
												"name": "v",
												"nodeType": "VariableDeclaration",
												"scope": 1025,
												"src": "5795:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 948,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "5795:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 951,
												"mutability": "mutable",
												"name": "r",
												"nodeType": "VariableDeclaration",
												"scope": 1025,
												"src": "5812:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 950,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5812:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 953,
												"mutability": "mutable",
												"name": "s",
												"nodeType": "VariableDeclaration",
												"scope": 1025,
												"src": "5831:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 952,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5831:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5763:83:6"
									},
									"returnParameters": {
										"id": 960,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 956,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1025,
												"src": "5870:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 955,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5870:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 959,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1025,
												"src": "5879:12:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_RecoverError_$738",
													"typeString": "enum ECDSA.RecoverError"
												},
												"typeName": {
													"id": 958,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 957,
														"name": "RecoverError",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 738,
														"src": "5879:12:6"
													},
													"referencedDeclaration": 738,
													"src": "5879:12:6",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_RecoverError_$738",
														"typeString": "enum ECDSA.RecoverError"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5869:23:6"
									},
									"scope": 1118,
									"src": "5744:1603:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1057,
										"nodeType": "Block",
										"src": "7612:138:6",
										"statements": [
											{
												"assignments": [
													1040,
													1043
												],
												"declarations": [
													{
														"constant": false,
														"id": 1040,
														"mutability": "mutable",
														"name": "recovered",
														"nodeType": "VariableDeclaration",
														"scope": 1057,
														"src": "7623:17:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1039,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "7623:7:6",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1043,
														"mutability": "mutable",
														"name": "error",
														"nodeType": "VariableDeclaration",
														"scope": 1057,
														"src": "7642:18:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_RecoverError_$738",
															"typeString": "enum ECDSA.RecoverError"
														},
														"typeName": {
															"id": 1042,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1041,
																"name": "RecoverError",
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 738,
																"src": "7642:12:6"
															},
															"referencedDeclaration": 738,
															"src": "7642:12:6",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$738",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1050,
												"initialValue": {
													"arguments": [
														{
															"id": 1045,
															"name": "hash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1028,
															"src": "7675:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 1046,
															"name": "v",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1030,
															"src": "7681:1:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														{
															"id": 1047,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1032,
															"src": "7684:1:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 1048,
															"name": "s",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1034,
															"src": "7687:1:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 1044,
														"name": "tryRecover",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															857,
															914,
															1025
														],
														"referencedDeclaration": 1025,
														"src": "7664:10:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$738_$",
															"typeString": "function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError)"
														}
													},
													"id": 1049,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7664:25:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$738_$",
														"typeString": "tuple(address,enum ECDSA.RecoverError)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7622:67:6"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1052,
															"name": "error",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1043,
															"src": "7711:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$738",
																"typeString": "enum ECDSA.RecoverError"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_enum$_RecoverError_$738",
																"typeString": "enum ECDSA.RecoverError"
															}
														],
														"id": 1051,
														"name": "_throwError",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 792,
														"src": "7699:11:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_enum$_RecoverError_$738_$returns$__$",
															"typeString": "function (enum ECDSA.RecoverError) pure"
														}
													},
													"id": 1053,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7699:18:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1054,
												"nodeType": "ExpressionStatement",
												"src": "7699:18:6"
											},
											{
												"expression": {
													"id": 1055,
													"name": "recovered",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1040,
													"src": "7734:9:6",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 1038,
												"id": 1056,
												"nodeType": "Return",
												"src": "7727:16:6"
											}
										]
									},
									"documentation": {
										"id": 1026,
										"nodeType": "StructuredDocumentation",
										"src": "7353:122:6",
										"text": " @dev Overload of {ECDSA-recover} that receives the `v`,\n `r` and `s` signature fields separately."
									},
									"id": 1058,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "recover",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1035,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1028,
												"mutability": "mutable",
												"name": "hash",
												"nodeType": "VariableDeclaration",
												"scope": 1058,
												"src": "7506:12:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1027,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "7506:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1030,
												"mutability": "mutable",
												"name": "v",
												"nodeType": "VariableDeclaration",
												"scope": 1058,
												"src": "7528:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1029,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "7528:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1032,
												"mutability": "mutable",
												"name": "r",
												"nodeType": "VariableDeclaration",
												"scope": 1058,
												"src": "7545:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1031,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "7545:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1034,
												"mutability": "mutable",
												"name": "s",
												"nodeType": "VariableDeclaration",
												"scope": 1058,
												"src": "7564:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1033,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "7564:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7496:83:6"
									},
									"returnParameters": {
										"id": 1038,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1037,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1058,
												"src": "7603:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1036,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7603:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7602:9:6"
									},
									"scope": 1118,
									"src": "7480:270:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1074,
										"nodeType": "Block",
										"src": "8118:187:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "19457468657265756d205369676e6564204d6573736167653a0a3332",
																	"id": 1069,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "string",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8256:34:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_stringliteral_178a2411ab6fbc1ba11064408972259c558d0e82fd48b0aba3ad81d14f065e73",
																		"typeString": "literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a3332\""
																	},
																	"value": "\u0019Ethereum Signed Message:\n32"
																},
																{
																	"id": 1070,
																	"name": "hash",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1061,
																	"src": "8292:4:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_stringliteral_178a2411ab6fbc1ba11064408972259c558d0e82fd48b0aba3ad81d14f065e73",
																		"typeString": "literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a3332\""
																	},
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																],
																"expression": {
																	"id": 1067,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "8239:3:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 1068,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodePacked",
																"nodeType": "MemberAccess",
																"src": "8239:16:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 1071,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8239:58:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 1066,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967288,
														"src": "8229:9:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 1072,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8229:69:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 1065,
												"id": 1073,
												"nodeType": "Return",
												"src": "8222:76:6"
											}
										]
									},
									"documentation": {
										"id": 1059,
										"nodeType": "StructuredDocumentation",
										"src": "7756:279:6",
										"text": " @dev Returns an Ethereum Signed Message, created from a `hash`. This\n produces hash corresponding to the one signed with the\n https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n JSON-RPC method as part of EIP-191.\n See {recover}."
									},
									"id": 1075,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toEthSignedMessageHash",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1062,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1061,
												"mutability": "mutable",
												"name": "hash",
												"nodeType": "VariableDeclaration",
												"scope": 1075,
												"src": "8072:12:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1060,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "8072:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8071:14:6"
									},
									"returnParameters": {
										"id": 1065,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1064,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1075,
												"src": "8109:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1063,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "8109:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8108:9:6"
									},
									"scope": 1118,
									"src": "8040:265:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1096,
										"nodeType": "Block",
										"src": "8670:116:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "19457468657265756d205369676e6564204d6573736167653a0a",
																	"id": 1086,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "string",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8714:32:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4",
																		"typeString": "literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a\""
																	},
																	"value": "\u0019Ethereum Signed Message:\n"
																},
																{
																	"arguments": [
																		{
																			"expression": {
																				"id": 1089,
																				"name": "s",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1078,
																				"src": "8765:1:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			},
																			"id": 1090,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "length",
																			"nodeType": "MemberAccess",
																			"src": "8765:8:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"expression": {
																			"id": 1087,
																			"name": "Strings",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 728,
																			"src": "8748:7:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_Strings_$728_$",
																				"typeString": "type(library Strings)"
																			}
																		},
																		"id": 1088,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "toString",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 610,
																		"src": "8748:16:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$",
																			"typeString": "function (uint256) pure returns (string memory)"
																		}
																	},
																	"id": 1091,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "8748:26:6",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																},
																{
																	"id": 1092,
																	"name": "s",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1078,
																	"src": "8776:1:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4",
																		"typeString": "literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a\""
																	},
																	{
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	},
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"expression": {
																	"id": 1084,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "8697:3:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 1085,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodePacked",
																"nodeType": "MemberAccess",
																"src": "8697:16:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 1093,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8697:81:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 1083,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967288,
														"src": "8687:9:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 1094,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8687:92:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 1082,
												"id": 1095,
												"nodeType": "Return",
												"src": "8680:99:6"
											}
										]
									},
									"documentation": {
										"id": 1076,
										"nodeType": "StructuredDocumentation",
										"src": "8311:274:6",
										"text": " @dev Returns an Ethereum Signed Message, created from `s`. This\n produces hash corresponding to the one signed with the\n https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n JSON-RPC method as part of EIP-191.\n See {recover}."
									},
									"id": 1097,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toEthSignedMessageHash",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1079,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1078,
												"mutability": "mutable",
												"name": "s",
												"nodeType": "VariableDeclaration",
												"scope": 1097,
												"src": "8622:14:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1077,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "8622:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8621:16:6"
									},
									"returnParameters": {
										"id": 1082,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1081,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1097,
												"src": "8661:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1080,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "8661:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8660:9:6"
									},
									"scope": 1118,
									"src": "8590:196:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1116,
										"nodeType": "Block",
										"src": "9227:92:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "1901",
																	"id": 1110,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "string",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9271:10:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541",
																		"typeString": "literal_string hex\"1901\""
																	},
																	"value": "\u0019\u0001"
																},
																{
																	"id": 1111,
																	"name": "domainSeparator",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1100,
																	"src": "9283:15:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																{
																	"id": 1112,
																	"name": "structHash",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1102,
																	"src": "9300:10:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541",
																		"typeString": "literal_string hex\"1901\""
																	},
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																],
																"expression": {
																	"id": 1108,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "9254:3:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 1109,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodePacked",
																"nodeType": "MemberAccess",
																"src": "9254:16:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 1113,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9254:57:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 1107,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967288,
														"src": "9244:9:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 1114,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9244:68:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 1106,
												"id": 1115,
												"nodeType": "Return",
												"src": "9237:75:6"
											}
										]
									},
									"documentation": {
										"id": 1098,
										"nodeType": "StructuredDocumentation",
										"src": "8792:328:6",
										"text": " @dev Returns an Ethereum Signed Typed Data, created from a\n `domainSeparator` and a `structHash`. This produces hash corresponding\n to the one signed with the\n https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n JSON-RPC method as part of EIP-712.\n See {recover}."
									},
									"id": 1117,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toTypedDataHash",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1103,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1100,
												"mutability": "mutable",
												"name": "domainSeparator",
												"nodeType": "VariableDeclaration",
												"scope": 1117,
												"src": "9150:23:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1099,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "9150:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1102,
												"mutability": "mutable",
												"name": "structHash",
												"nodeType": "VariableDeclaration",
												"scope": 1117,
												"src": "9175:18:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1101,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "9175:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9149:45:6"
									},
									"returnParameters": {
										"id": 1106,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1105,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1117,
												"src": "9218:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1104,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "9218:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9217:9:6"
									},
									"scope": 1118,
									"src": "9125:194:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1119,
							"src": "354:8967:6"
						}
					],
					"src": "97:9225:6"
				},
				"id": 6
			},
			"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol",
					"exportedSymbols": {
						"Address": [
							525
						],
						"ECDSA": [
							1118
						],
						"IERC1271": [
							228
						],
						"SignatureChecker": [
							1197
						],
						"Strings": [
							728
						]
					},
					"id": 1198,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1120,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "108:23:7"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol",
							"file": "./ECDSA.sol",
							"id": 1121,
							"nodeType": "ImportDirective",
							"scope": 1198,
							"sourceUnit": 1119,
							"src": "133:21:7",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Address.sol",
							"file": "../Address.sol",
							"id": 1122,
							"nodeType": "ImportDirective",
							"scope": 1198,
							"sourceUnit": 526,
							"src": "155:24:7",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/interfaces/IERC1271.sol",
							"file": "../../interfaces/IERC1271.sol",
							"id": 1123,
							"nodeType": "ImportDirective",
							"scope": 1198,
							"sourceUnit": 229,
							"src": "180:39:7",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1124,
								"nodeType": "StructuredDocumentation",
								"src": "221:538:7",
								"text": " @dev Signature verification helper: Provide a single mechanism to verify both private-key (EOA) ECDSA signature and\n ERC1271 contract signatures. Using this instead of ECDSA.recover in your contract will make them compatible with\n smart contract wallets such as Argent and Gnosis.\n Note: unlike ECDSA signatures, contract signature's are revocable, and the outcome of this function can thus change\n through time. It could return true at block N and false at block N+1 (or the opposite).\n _Available since v4.1._"
							},
							"fullyImplemented": true,
							"id": 1197,
							"linearizedBaseContracts": [
								1197
							],
							"name": "SignatureChecker",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 1195,
										"nodeType": "Block",
										"src": "933:491:7",
										"statements": [
											{
												"assignments": [
													1136,
													1139
												],
												"declarations": [
													{
														"constant": false,
														"id": 1136,
														"mutability": "mutable",
														"name": "recovered",
														"nodeType": "VariableDeclaration",
														"scope": 1195,
														"src": "944:17:7",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1135,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "944:7:7",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1139,
														"mutability": "mutable",
														"name": "error",
														"nodeType": "VariableDeclaration",
														"scope": 1195,
														"src": "963:24:7",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_RecoverError_$738",
															"typeString": "enum ECDSA.RecoverError"
														},
														"typeName": {
															"id": 1138,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1137,
																"name": "ECDSA.RecoverError",
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 738,
																"src": "963:18:7"
															},
															"referencedDeclaration": 738,
															"src": "963:18:7",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$738",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1145,
												"initialValue": {
													"arguments": [
														{
															"id": 1142,
															"name": "hash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1128,
															"src": "1008:4:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 1143,
															"name": "signature",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1130,
															"src": "1014:9:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 1140,
															"name": "ECDSA",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1118,
															"src": "991:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_ECDSA_$1118_$",
																"typeString": "type(library ECDSA)"
															}
														},
														"id": 1141,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "tryRecover",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 857,
														"src": "991:16:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_address_$_t_enum$_RecoverError_$738_$",
															"typeString": "function (bytes32,bytes memory) pure returns (address,enum ECDSA.RecoverError)"
														}
													},
													"id": 1144,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "991:33:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$738_$",
														"typeString": "tuple(address,enum ECDSA.RecoverError)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "943:81:7"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 1154,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_enum$_RecoverError_$738",
															"typeString": "enum ECDSA.RecoverError"
														},
														"id": 1150,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1146,
															"name": "error",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1139,
															"src": "1038:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$738",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"expression": {
																"expression": {
																	"id": 1147,
																	"name": "ECDSA",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1118,
																	"src": "1047:5:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_ECDSA_$1118_$",
																		"typeString": "type(library ECDSA)"
																	}
																},
																"id": 1148,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "RecoverError",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 738,
																"src": "1047:18:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_enum$_RecoverError_$738_$",
																	"typeString": "type(enum ECDSA.RecoverError)"
																}
															},
															"id": 1149,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberName": "NoError",
															"nodeType": "MemberAccess",
															"src": "1047:26:7",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$738",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														"src": "1038:35:7",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"id": 1153,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1151,
															"name": "recovered",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1136,
															"src": "1077:9:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"id": 1152,
															"name": "signer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1126,
															"src": "1090:6:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"src": "1077:19:7",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "1038:58:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1158,
												"nodeType": "IfStatement",
												"src": "1034:100:7",
												"trueBody": {
													"id": 1157,
													"nodeType": "Block",
													"src": "1098:36:7",
													"statements": [
														{
															"expression": {
																"hexValue": "74727565",
																"id": 1155,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1119:4:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "true"
															},
															"functionReturnParameters": 1134,
															"id": 1156,
															"nodeType": "Return",
															"src": "1112:11:7"
														}
													]
												}
											},
											{
												"assignments": [
													1160,
													1162
												],
												"declarations": [
													{
														"constant": false,
														"id": 1160,
														"mutability": "mutable",
														"name": "success",
														"nodeType": "VariableDeclaration",
														"scope": 1195,
														"src": "1145:12:7",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 1159,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "1145:4:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1162,
														"mutability": "mutable",
														"name": "result",
														"nodeType": "VariableDeclaration",
														"scope": 1195,
														"src": "1159:19:7",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 1161,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "1159:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1174,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 1167,
																			"name": "IERC1271",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 228,
																			"src": "1236:8:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC1271_$228_$",
																				"typeString": "type(contract IERC1271)"
																			}
																		},
																		"id": 1168,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberName": "isValidSignature",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 227,
																		"src": "1236:25:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_declaration_view$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_bytes4_$",
																			"typeString": "function IERC1271.isValidSignature(bytes32,bytes memory) view returns (bytes4)"
																		}
																	},
																	"id": 1169,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "1236:34:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 1170,
																	"name": "hash",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1128,
																	"src": "1272:4:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																{
																	"id": 1171,
																	"name": "signature",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1130,
																	"src": "1278:9:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"expression": {
																	"id": 1165,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "1213:3:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 1166,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "1213:22:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 1172,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1213:75:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 1163,
															"name": "signer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1126,
															"src": "1182:6:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 1164,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "staticcall",
														"nodeType": "MemberAccess",
														"src": "1182:17:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) view returns (bool,bytes memory)"
														}
													},
													"id": 1173,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1182:116:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1144:154:7"
											},
											{
												"expression": {
													"components": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 1192,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"id": 1180,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1175,
																	"name": "success",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1160,
																	"src": "1316:7:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "&&",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1179,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"expression": {
																			"id": 1176,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1162,
																			"src": "1327:6:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes_memory_ptr",
																				"typeString": "bytes memory"
																			}
																		},
																		"id": 1177,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "length",
																		"nodeType": "MemberAccess",
																		"src": "1327:13:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "==",
																	"rightExpression": {
																		"hexValue": "3332",
																		"id": 1178,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1344:2:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_32_by_1",
																			"typeString": "int_const 32"
																		},
																		"value": "32"
																	},
																	"src": "1327:19:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"src": "1316:30:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&&",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_bytes4",
																	"typeString": "bytes4"
																},
																"id": 1191,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [
																		{
																			"id": 1183,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1162,
																			"src": "1361:6:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes_memory_ptr",
																				"typeString": "bytes memory"
																			}
																		},
																		{
																			"components": [
																				{
																					"id": 1185,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "ElementaryTypeNameExpression",
																					"src": "1370:6:7",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_bytes4_$",
																						"typeString": "type(bytes4)"
																					},
																					"typeName": {
																						"id": 1184,
																						"name": "bytes4",
																						"nodeType": "ElementaryTypeName",
																						"src": "1370:6:7",
																						"typeDescriptions": {}
																					}
																				}
																			],
																			"id": 1186,
																			"isConstant": false,
																			"isInlineArray": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "TupleExpression",
																			"src": "1369:8:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_bytes4_$",
																				"typeString": "type(bytes4)"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_bytes_memory_ptr",
																				"typeString": "bytes memory"
																			},
																			{
																				"typeIdentifier": "t_type$_t_bytes4_$",
																				"typeString": "type(bytes4)"
																			}
																		],
																		"expression": {
																			"id": 1181,
																			"name": "abi",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967295,
																			"src": "1350:3:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_abi",
																				"typeString": "abi"
																			}
																		},
																		"id": 1182,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberName": "decode",
																		"nodeType": "MemberAccess",
																		"src": "1350:10:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
																			"typeString": "function () pure"
																		}
																	},
																	"id": 1187,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "1350:28:7",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"expression": {
																		"expression": {
																			"id": 1188,
																			"name": "IERC1271",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 228,
																			"src": "1382:8:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC1271_$228_$",
																				"typeString": "type(contract IERC1271)"
																			}
																		},
																		"id": 1189,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberName": "isValidSignature",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 227,
																		"src": "1382:25:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_declaration_view$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_bytes4_$",
																			"typeString": "function IERC1271.isValidSignature(bytes32,bytes memory) view returns (bytes4)"
																		}
																	},
																	"id": 1190,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "1382:34:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																"src": "1350:66:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "1316:100:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"id": 1193,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "1315:102:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1134,
												"id": 1194,
												"nodeType": "Return",
												"src": "1308:109:7"
											}
										]
									},
									"id": 1196,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "isValidSignatureNow",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1131,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1126,
												"mutability": "mutable",
												"name": "signer",
												"nodeType": "VariableDeclaration",
												"scope": 1196,
												"src": "829:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1125,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "829:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1128,
												"mutability": "mutable",
												"name": "hash",
												"nodeType": "VariableDeclaration",
												"scope": 1196,
												"src": "853:12:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1127,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "853:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1130,
												"mutability": "mutable",
												"name": "signature",
												"nodeType": "VariableDeclaration",
												"scope": 1196,
												"src": "875:22:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1129,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "875:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "819:84:7"
									},
									"returnParameters": {
										"id": 1134,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1133,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1196,
												"src": "927:4:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1132,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "927:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "926:6:7"
									},
									"scope": 1197,
									"src": "791:633:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1198,
							"src": "760:666:7"
						}
					],
					"src": "108:1319:7"
				},
				"id": 7
			},
			"@openzeppelin/contracts/utils/math/SafeMath.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/math/SafeMath.sol",
					"exportedSymbols": {
						"SafeMath": [
							1509
						]
					},
					"id": 1510,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1199,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "92:23:8"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1200,
								"nodeType": "StructuredDocumentation",
								"src": "270:196:8",
								"text": " @dev Wrappers over Solidity's arithmetic operations.\n NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n now has built in overflow checking."
							},
							"fullyImplemented": true,
							"id": 1509,
							"linearizedBaseContracts": [
								1509
							],
							"name": "SafeMath",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 1231,
										"nodeType": "Block",
										"src": "702:140:8",
										"statements": [
											{
												"id": 1230,
												"nodeType": "UncheckedBlock",
												"src": "712:124:8",
												"statements": [
													{
														"assignments": [
															1213
														],
														"declarations": [
															{
																"constant": false,
																"id": 1213,
																"mutability": "mutable",
																"name": "c",
																"nodeType": "VariableDeclaration",
																"scope": 1230,
																"src": "736:9:8",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 1212,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "736:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1217,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1216,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1214,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1203,
																"src": "748:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"id": 1215,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1205,
																"src": "752:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "748:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "736:17:8"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1220,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1218,
																"name": "c",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1213,
																"src": "771:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"id": 1219,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1203,
																"src": "775:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "771:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1225,
														"nodeType": "IfStatement",
														"src": "767:28:8",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 1221,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "786:5:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 1222,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "793:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 1223,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "785:10:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 1211,
															"id": 1224,
															"nodeType": "Return",
															"src": "778:17:8"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 1226,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "817:4:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"id": 1227,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1213,
																	"src": "823:1:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 1228,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "816:9:8",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 1211,
														"id": 1229,
														"nodeType": "Return",
														"src": "809:16:8"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1201,
										"nodeType": "StructuredDocumentation",
										"src": "490:131:8",
										"text": " @dev Returns the addition of two unsigned integers, with an overflow flag.\n _Available since v3.4._"
									},
									"id": 1232,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryAdd",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1206,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1203,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 1232,
												"src": "642:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1202,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "642:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1205,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 1232,
												"src": "653:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1204,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "653:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "641:22:8"
									},
									"returnParameters": {
										"id": 1211,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1208,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1232,
												"src": "687:4:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1207,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "687:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1210,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1232,
												"src": "693:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1209,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "693:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "686:15:8"
									},
									"scope": 1509,
									"src": "626:216:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1259,
										"nodeType": "Block",
										"src": "1064:113:8",
										"statements": [
											{
												"id": 1258,
												"nodeType": "UncheckedBlock",
												"src": "1074:97:8",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1246,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1244,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1237,
																"src": "1102:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"id": 1245,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1235,
																"src": "1106:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1102:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1251,
														"nodeType": "IfStatement",
														"src": "1098:28:8",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 1247,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1117:5:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 1248,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1124:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 1249,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1116:10:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 1243,
															"id": 1250,
															"nodeType": "Return",
															"src": "1109:17:8"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 1252,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1148:4:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1255,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1253,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1235,
																		"src": "1154:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "-",
																	"rightExpression": {
																		"id": 1254,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1237,
																		"src": "1158:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "1154:5:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 1256,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "1147:13:8",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 1243,
														"id": 1257,
														"nodeType": "Return",
														"src": "1140:20:8"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1233,
										"nodeType": "StructuredDocumentation",
										"src": "848:135:8",
										"text": " @dev Returns the substraction of two unsigned integers, with an overflow flag.\n _Available since v3.4._"
									},
									"id": 1260,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "trySub",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1238,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1235,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 1260,
												"src": "1004:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1234,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1004:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1237,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 1260,
												"src": "1015:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1236,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1015:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1003:22:8"
									},
									"returnParameters": {
										"id": 1243,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1240,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1260,
												"src": "1049:4:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1239,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1049:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1242,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1260,
												"src": "1055:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1241,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1055:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1048:15:8"
									},
									"scope": 1509,
									"src": "988:189:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1301,
										"nodeType": "Block",
										"src": "1401:417:8",
										"statements": [
											{
												"id": 1300,
												"nodeType": "UncheckedBlock",
												"src": "1411:401:8",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1274,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1272,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1263,
																"src": "1669:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 1273,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1674:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "1669:6:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1279,
														"nodeType": "IfStatement",
														"src": "1665:28:8",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "74727565",
																		"id": 1275,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1685:4:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "true"
																	},
																	{
																		"hexValue": "30",
																		"id": 1276,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1691:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 1277,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1684:9:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 1271,
															"id": 1278,
															"nodeType": "Return",
															"src": "1677:16:8"
														}
													},
													{
														"assignments": [
															1281
														],
														"declarations": [
															{
																"constant": false,
																"id": 1281,
																"mutability": "mutable",
																"name": "c",
																"nodeType": "VariableDeclaration",
																"scope": 1300,
																"src": "1707:9:8",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 1280,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "1707:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1285,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1284,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1282,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1263,
																"src": "1719:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 1283,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1265,
																"src": "1723:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1719:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "1707:17:8"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1290,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1288,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1286,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1281,
																	"src": "1742:1:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"id": 1287,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1263,
																	"src": "1746:1:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "1742:5:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"id": 1289,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1265,
																"src": "1751:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1742:10:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1295,
														"nodeType": "IfStatement",
														"src": "1738:33:8",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 1291,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1762:5:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 1292,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1769:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 1293,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1761:10:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 1271,
															"id": 1294,
															"nodeType": "Return",
															"src": "1754:17:8"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 1296,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1793:4:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"id": 1297,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1281,
																	"src": "1799:1:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 1298,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "1792:9:8",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 1271,
														"id": 1299,
														"nodeType": "Return",
														"src": "1785:16:8"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1261,
										"nodeType": "StructuredDocumentation",
										"src": "1183:137:8",
										"text": " @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n _Available since v3.4._"
									},
									"id": 1302,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryMul",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1266,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1263,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 1302,
												"src": "1341:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1262,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1341:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1265,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 1302,
												"src": "1352:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1264,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1352:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1340:22:8"
									},
									"returnParameters": {
										"id": 1271,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1268,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1302,
												"src": "1386:4:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1267,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1386:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1270,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1302,
												"src": "1392:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1269,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1392:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1385:15:8"
									},
									"scope": 1509,
									"src": "1325:493:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1329,
										"nodeType": "Block",
										"src": "2043:114:8",
										"statements": [
											{
												"id": 1328,
												"nodeType": "UncheckedBlock",
												"src": "2053:98:8",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1316,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1314,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1307,
																"src": "2081:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 1315,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2086:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "2081:6:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1321,
														"nodeType": "IfStatement",
														"src": "2077:29:8",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 1317,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2097:5:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 1318,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2104:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 1319,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2096:10:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 1313,
															"id": 1320,
															"nodeType": "Return",
															"src": "2089:17:8"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 1322,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2128:4:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1325,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1323,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1305,
																		"src": "2134:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "/",
																	"rightExpression": {
																		"id": 1324,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1307,
																		"src": "2138:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2134:5:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 1326,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "2127:13:8",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 1313,
														"id": 1327,
														"nodeType": "Return",
														"src": "2120:20:8"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1303,
										"nodeType": "StructuredDocumentation",
										"src": "1824:138:8",
										"text": " @dev Returns the division of two unsigned integers, with a division by zero flag.\n _Available since v3.4._"
									},
									"id": 1330,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryDiv",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1308,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1305,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 1330,
												"src": "1983:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1304,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1983:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1307,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 1330,
												"src": "1994:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1306,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1994:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1982:22:8"
									},
									"returnParameters": {
										"id": 1313,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1310,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1330,
												"src": "2028:4:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1309,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2028:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1312,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1330,
												"src": "2034:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1311,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2034:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2027:15:8"
									},
									"scope": 1509,
									"src": "1967:190:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1357,
										"nodeType": "Block",
										"src": "2392:114:8",
										"statements": [
											{
												"id": 1356,
												"nodeType": "UncheckedBlock",
												"src": "2402:98:8",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1344,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1342,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1335,
																"src": "2430:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 1343,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2435:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "2430:6:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1349,
														"nodeType": "IfStatement",
														"src": "2426:29:8",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 1345,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2446:5:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 1346,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2453:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 1347,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2445:10:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 1341,
															"id": 1348,
															"nodeType": "Return",
															"src": "2438:17:8"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 1350,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2477:4:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1353,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1351,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1333,
																		"src": "2483:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "%",
																	"rightExpression": {
																		"id": 1352,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1335,
																		"src": "2487:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2483:5:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 1354,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "2476:13:8",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 1341,
														"id": 1355,
														"nodeType": "Return",
														"src": "2469:20:8"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1331,
										"nodeType": "StructuredDocumentation",
										"src": "2163:148:8",
										"text": " @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n _Available since v3.4._"
									},
									"id": 1358,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryMod",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1336,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1333,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 1358,
												"src": "2332:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1332,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2332:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1335,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 1358,
												"src": "2343:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1334,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2343:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2331:22:8"
									},
									"returnParameters": {
										"id": 1341,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1338,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1358,
												"src": "2377:4:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1337,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2377:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1340,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1358,
												"src": "2383:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1339,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2383:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2376:15:8"
									},
									"scope": 1509,
									"src": "2316:190:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1372,
										"nodeType": "Block",
										"src": "2808:29:8",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1370,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1368,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1361,
														"src": "2825:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"id": 1369,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1363,
														"src": "2829:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2825:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1367,
												"id": 1371,
												"nodeType": "Return",
												"src": "2818:12:8"
											}
										]
									},
									"documentation": {
										"id": 1359,
										"nodeType": "StructuredDocumentation",
										"src": "2512:224:8",
										"text": " @dev Returns the addition of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `+` operator.\n Requirements:\n - Addition cannot overflow."
									},
									"id": 1373,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "add",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1364,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1361,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 1373,
												"src": "2754:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1360,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2754:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1363,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 1373,
												"src": "2765:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1362,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2765:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2753:22:8"
									},
									"returnParameters": {
										"id": 1367,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1366,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1373,
												"src": "2799:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1365,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2799:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2798:9:8"
									},
									"scope": 1509,
									"src": "2741:96:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1387,
										"nodeType": "Block",
										"src": "3175:29:8",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1385,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1383,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1376,
														"src": "3192:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "-",
													"rightExpression": {
														"id": 1384,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1378,
														"src": "3196:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3192:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1382,
												"id": 1386,
												"nodeType": "Return",
												"src": "3185:12:8"
											}
										]
									},
									"documentation": {
										"id": 1374,
										"nodeType": "StructuredDocumentation",
										"src": "2843:260:8",
										"text": " @dev Returns the subtraction of two unsigned integers, reverting on\n overflow (when the result is negative).\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."
									},
									"id": 1388,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sub",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1379,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1376,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 1388,
												"src": "3121:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1375,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3121:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1378,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 1388,
												"src": "3132:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1377,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3132:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3120:22:8"
									},
									"returnParameters": {
										"id": 1382,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1381,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1388,
												"src": "3166:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1380,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3166:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3165:9:8"
									},
									"scope": 1509,
									"src": "3108:96:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1402,
										"nodeType": "Block",
										"src": "3518:29:8",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1400,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1398,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1391,
														"src": "3535:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "*",
													"rightExpression": {
														"id": 1399,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1393,
														"src": "3539:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3535:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1397,
												"id": 1401,
												"nodeType": "Return",
												"src": "3528:12:8"
											}
										]
									},
									"documentation": {
										"id": 1389,
										"nodeType": "StructuredDocumentation",
										"src": "3210:236:8",
										"text": " @dev Returns the multiplication of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `*` operator.\n Requirements:\n - Multiplication cannot overflow."
									},
									"id": 1403,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mul",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1394,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1391,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 1403,
												"src": "3464:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1390,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3464:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1393,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 1403,
												"src": "3475:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1392,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3475:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3463:22:8"
									},
									"returnParameters": {
										"id": 1397,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1396,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1403,
												"src": "3509:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1395,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3509:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3508:9:8"
									},
									"scope": 1509,
									"src": "3451:96:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1417,
										"nodeType": "Block",
										"src": "3903:29:8",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1415,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1413,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1406,
														"src": "3920:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"id": 1414,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1408,
														"src": "3924:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3920:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1412,
												"id": 1416,
												"nodeType": "Return",
												"src": "3913:12:8"
											}
										]
									},
									"documentation": {
										"id": 1404,
										"nodeType": "StructuredDocumentation",
										"src": "3553:278:8",
										"text": " @dev Returns the integer division of two unsigned integers, reverting on\n division by zero. The result is rounded towards zero.\n Counterpart to Solidity's `/` operator.\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 1418,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "div",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1409,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1406,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 1418,
												"src": "3849:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1405,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3849:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1408,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 1418,
												"src": "3860:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1407,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3860:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3848:22:8"
									},
									"returnParameters": {
										"id": 1412,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1411,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1418,
												"src": "3894:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1410,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3894:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3893:9:8"
									},
									"scope": 1509,
									"src": "3836:96:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1432,
										"nodeType": "Block",
										"src": "4452:29:8",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1430,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1428,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1421,
														"src": "4469:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "%",
													"rightExpression": {
														"id": 1429,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1423,
														"src": "4473:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4469:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1427,
												"id": 1431,
												"nodeType": "Return",
												"src": "4462:12:8"
											}
										]
									},
									"documentation": {
										"id": 1419,
										"nodeType": "StructuredDocumentation",
										"src": "3938:442:8",
										"text": " @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n reverting when dividing by zero.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 1433,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mod",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1424,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1421,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 1433,
												"src": "4398:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1420,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4398:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1423,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 1433,
												"src": "4409:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1422,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4409:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4397:22:8"
									},
									"returnParameters": {
										"id": 1427,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1426,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1433,
												"src": "4443:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1425,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4443:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4442:9:8"
									},
									"scope": 1509,
									"src": "4385:96:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1457,
										"nodeType": "Block",
										"src": "5070:106:8",
										"statements": [
											{
												"id": 1456,
												"nodeType": "UncheckedBlock",
												"src": "5080:90:8",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1448,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1446,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1438,
																		"src": "5112:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "<=",
																	"rightExpression": {
																		"id": 1447,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1436,
																		"src": "5117:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "5112:6:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																{
																	"id": 1449,
																	"name": "errorMessage",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1440,
																	"src": "5120:12:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	{
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																],
																"id": 1445,
																"name": "require",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	4294967278,
																	4294967278
																],
																"referencedDeclaration": 4294967278,
																"src": "5104:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																	"typeString": "function (bool,string memory) pure"
																}
															},
															"id": 1450,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5104:29:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 1451,
														"nodeType": "ExpressionStatement",
														"src": "5104:29:8"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1454,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1452,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1436,
																"src": "5154:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "-",
															"rightExpression": {
																"id": 1453,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1438,
																"src": "5158:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5154:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 1444,
														"id": 1455,
														"nodeType": "Return",
														"src": "5147:12:8"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1434,
										"nodeType": "StructuredDocumentation",
										"src": "4487:453:8",
										"text": " @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n overflow (when the result is negative).\n CAUTION: This function is deprecated because it requires allocating memory for the error\n message unnecessarily. For custom revert reasons use {trySub}.\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."
									},
									"id": 1458,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sub",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1441,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1436,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 1458,
												"src": "4967:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1435,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4967:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1438,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 1458,
												"src": "4986:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1437,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4986:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1440,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"scope": 1458,
												"src": "5005:26:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1439,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5005:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4957:80:8"
									},
									"returnParameters": {
										"id": 1444,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1443,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1458,
												"src": "5061:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1442,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5061:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5060:9:8"
									},
									"scope": 1509,
									"src": "4945:231:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1482,
										"nodeType": "Block",
										"src": "5785:105:8",
										"statements": [
											{
												"id": 1481,
												"nodeType": "UncheckedBlock",
												"src": "5795:89:8",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1473,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1471,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1463,
																		"src": "5827:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": ">",
																	"rightExpression": {
																		"hexValue": "30",
																		"id": 1472,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "5831:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"src": "5827:5:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																{
																	"id": 1474,
																	"name": "errorMessage",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1465,
																	"src": "5834:12:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	{
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																],
																"id": 1470,
																"name": "require",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	4294967278,
																	4294967278
																],
																"referencedDeclaration": 4294967278,
																"src": "5819:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																	"typeString": "function (bool,string memory) pure"
																}
															},
															"id": 1475,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5819:28:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 1476,
														"nodeType": "ExpressionStatement",
														"src": "5819:28:8"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1479,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1477,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1461,
																"src": "5868:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "/",
															"rightExpression": {
																"id": 1478,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1463,
																"src": "5872:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5868:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 1469,
														"id": 1480,
														"nodeType": "Return",
														"src": "5861:12:8"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1459,
										"nodeType": "StructuredDocumentation",
										"src": "5182:473:8",
										"text": " @dev Returns the integer division of two unsigned integers, reverting with custom message on\n division by zero. The result is rounded towards zero.\n Counterpart to Solidity's `/` operator. Note: this function uses a\n `revert` opcode (which leaves remaining gas untouched) while Solidity\n uses an invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 1483,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "div",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1466,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1461,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 1483,
												"src": "5682:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1460,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5682:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1463,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 1483,
												"src": "5701:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1462,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5701:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1465,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"scope": 1483,
												"src": "5720:26:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1464,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5720:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5672:80:8"
									},
									"returnParameters": {
										"id": 1469,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1468,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1483,
												"src": "5776:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1467,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5776:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5775:9:8"
									},
									"scope": 1509,
									"src": "5660:230:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1507,
										"nodeType": "Block",
										"src": "6661:105:8",
										"statements": [
											{
												"id": 1506,
												"nodeType": "UncheckedBlock",
												"src": "6671:89:8",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1498,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1496,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1488,
																		"src": "6703:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": ">",
																	"rightExpression": {
																		"hexValue": "30",
																		"id": 1497,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "6707:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"src": "6703:5:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																{
																	"id": 1499,
																	"name": "errorMessage",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1490,
																	"src": "6710:12:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	{
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																],
																"id": 1495,
																"name": "require",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	4294967278,
																	4294967278
																],
																"referencedDeclaration": 4294967278,
																"src": "6695:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																	"typeString": "function (bool,string memory) pure"
																}
															},
															"id": 1500,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6695:28:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 1501,
														"nodeType": "ExpressionStatement",
														"src": "6695:28:8"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1504,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1502,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1486,
																"src": "6744:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "%",
															"rightExpression": {
																"id": 1503,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1488,
																"src": "6748:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "6744:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 1494,
														"id": 1505,
														"nodeType": "Return",
														"src": "6737:12:8"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1484,
										"nodeType": "StructuredDocumentation",
										"src": "5896:635:8",
										"text": " @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n reverting with custom message when dividing by zero.\n CAUTION: This function is deprecated because it requires allocating memory for the error\n message unnecessarily. For custom revert reasons use {tryMod}.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 1508,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mod",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1491,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1486,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 1508,
												"src": "6558:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1485,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6558:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1488,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 1508,
												"src": "6577:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1487,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6577:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1490,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"scope": 1508,
												"src": "6596:26:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1489,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6596:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6548:80:8"
									},
									"returnParameters": {
										"id": 1494,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1493,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1508,
												"src": "6652:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1492,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6652:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6651:9:8"
									},
									"scope": 1509,
									"src": "6536:230:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1510,
							"src": "467:6301:8"
						}
					],
					"src": "92:6677:8"
				},
				"id": 8
			},
			"contracts/oracle.sol": {
				"ast": {
					"absolutePath": "contracts/oracle.sol",
					"exportedSymbols": {
						"Address": [
							525
						],
						"ContextUpgradeable": [
							214
						],
						"ECDSA": [
							1118
						],
						"IERC1271": [
							228
						],
						"Initializable": [
							170
						],
						"Oracle": [
							1705
						],
						"OwnableUpgradeable": [
							125
						],
						"SafeMath": [
							1509
						],
						"SignatureChecker": [
							1197
						],
						"Strings": [
							728
						]
					},
					"id": 1706,
					"license": "AGPL-3.0-only",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1511,
							"literals": [
								"solidity",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "107:22:9"
						},
						{
							"id": 1512,
							"literals": [
								"experimental",
								"ABIEncoderV2"
							],
							"nodeType": "PragmaDirective",
							"src": "130:33:9"
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol",
							"file": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol",
							"id": 1513,
							"nodeType": "ImportDirective",
							"scope": 1706,
							"sourceUnit": 126,
							"src": "164:75:9",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/math/SafeMath.sol",
							"file": "@openzeppelin/contracts/utils/math/SafeMath.sol",
							"id": 1514,
							"nodeType": "ImportDirective",
							"scope": 1706,
							"sourceUnit": 1510,
							"src": "240:57:9",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol",
							"file": "@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol",
							"id": 1515,
							"nodeType": "ImportDirective",
							"scope": 1706,
							"sourceUnit": 1198,
							"src": "298:73:9",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol",
							"file": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol",
							"id": 1516,
							"nodeType": "ImportDirective",
							"scope": 1706,
							"sourceUnit": 1119,
							"src": "372:62:9",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1517,
										"name": "Initializable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 170,
										"src": "455:13:9"
									},
									"id": 1518,
									"nodeType": "InheritanceSpecifier",
									"src": "455:13:9"
								},
								{
									"baseName": {
										"id": 1519,
										"name": "OwnableUpgradeable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 125,
										"src": "470:18:9"
									},
									"id": 1520,
									"nodeType": "InheritanceSpecifier",
									"src": "470:18:9"
								}
							],
							"contractDependencies": [
								125,
								170,
								214
							],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 1705,
							"linearizedBaseContracts": [
								1705,
								125,
								214,
								170
							],
							"name": "Oracle",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"id": 1523,
									"libraryName": {
										"id": 1521,
										"name": "SafeMath",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1509,
										"src": "501:8:9"
									},
									"nodeType": "UsingForDirective",
									"src": "495:27:9",
									"typeName": {
										"id": 1522,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "514:7:9",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									}
								},
								{
									"id": 1526,
									"libraryName": {
										"id": 1524,
										"name": "ECDSA",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1118,
										"src": "533:5:9"
									},
									"nodeType": "UsingForDirective",
									"src": "527:24:9",
									"typeName": {
										"id": 1525,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "543:7:9",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									}
								},
								{
									"constant": false,
									"functionSelector": "238ac933",
									"id": 1528,
									"mutability": "mutable",
									"name": "signer",
									"nodeType": "VariableDeclaration",
									"scope": 1705,
									"src": "557:21:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 1527,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "557:7:9",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "c08d1fe5",
									"id": 1530,
									"mutability": "mutable",
									"name": "timeLimit",
									"nodeType": "VariableDeclaration",
									"scope": 1705,
									"src": "584:24:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1529,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "584:7:9",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "48c7e528",
									"id": 1534,
									"mutability": "mutable",
									"name": "executor",
									"nodeType": "VariableDeclaration",
									"scope": 1705,
									"src": "629:40:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
										"typeString": "mapping(address => bool)"
									},
									"typeName": {
										"id": 1533,
										"keyType": {
											"id": 1531,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "637:7:9",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "629:24:9",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
											"typeString": "mapping(address => bool)"
										},
										"valueType": {
											"id": 1532,
											"name": "bool",
											"nodeType": "ElementaryTypeName",
											"src": "648:4:9",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											}
										}
									},
									"visibility": "public"
								},
								{
									"body": {
										"id": 1557,
										"nodeType": "Block",
										"src": "898:120:9",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1541,
														"name": "__Ownable_init",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 29,
														"src": "908:14:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 1542,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "908:16:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1543,
												"nodeType": "ExpressionStatement",
												"src": "908:16:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1545,
															"name": "_signer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1536,
															"src": "947:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"hexValue": "74727565",
															"id": 1546,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "956:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 1544,
														"name": "_setExecutor",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1593,
														"src": "934:12:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bool_$returns$_t_bool_$",
															"typeString": "function (address,bool) returns (bool)"
														}
													},
													"id": 1547,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "934:27:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1548,
												"nodeType": "ExpressionStatement",
												"src": "934:27:9"
											},
											{
												"expression": {
													"id": 1551,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1549,
														"name": "signer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1528,
														"src": "971:6:9",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1550,
														"name": "_signer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1536,
														"src": "980:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "971:16:9",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 1552,
												"nodeType": "ExpressionStatement",
												"src": "971:16:9"
											},
											{
												"expression": {
													"id": 1555,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1553,
														"name": "timeLimit",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1530,
														"src": "997:9:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "3630",
														"id": 1554,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1009:2:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_60_by_1",
															"typeString": "int_const 60"
														},
														"value": "60"
													},
													"src": "997:14:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1556,
												"nodeType": "ExpressionStatement",
												"src": "997:14:9"
											}
										]
									},
									"functionSelector": "c4d66de8",
									"id": 1558,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1539,
											"modifierName": {
												"id": 1538,
												"name": "initializer",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 169,
												"src": "886:11:9"
											},
											"nodeType": "ModifierInvocation",
											"src": "886:11:9"
										}
									],
									"name": "initialize",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1537,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1536,
												"mutability": "mutable",
												"name": "_signer",
												"nodeType": "VariableDeclaration",
												"scope": 1558,
												"src": "860:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1535,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "860:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "859:17:9"
									},
									"returnParameters": {
										"id": 1540,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "898:0:9"
									},
									"scope": 1705,
									"src": "840:178:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1574,
										"nodeType": "Block",
										"src": "1137:53:9",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1570,
															"name": "_address",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1560,
															"src": "1167:8:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1571,
															"name": "_type",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1562,
															"src": "1177:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 1569,
														"name": "_setExecutor",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1593,
														"src": "1154:12:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bool_$returns$_t_bool_$",
															"typeString": "function (address,bool) returns (bool)"
														}
													},
													"id": 1572,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1154:29:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1568,
												"id": 1573,
												"nodeType": "Return",
												"src": "1147:36:9"
											}
										]
									},
									"functionSelector": "1e1bff3f",
									"id": 1575,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1565,
											"modifierName": {
												"id": 1564,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 63,
												"src": "1100:9:9"
											},
											"nodeType": "ModifierInvocation",
											"src": "1100:9:9"
										}
									],
									"name": "setExecutor",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1563,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1560,
												"mutability": "mutable",
												"name": "_address",
												"nodeType": "VariableDeclaration",
												"scope": 1575,
												"src": "1045:16:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1559,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1045:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1562,
												"mutability": "mutable",
												"name": "_type",
												"nodeType": "VariableDeclaration",
												"scope": 1575,
												"src": "1063:10:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1561,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1063:4:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1044:30:9"
									},
									"returnParameters": {
										"id": 1568,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1567,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1575,
												"src": "1127:4:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1566,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1127:4:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1126:6:9"
									},
									"scope": 1705,
									"src": "1024:166:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1592,
										"nodeType": "Block",
										"src": "1292:64:9",
										"statements": [
											{
												"expression": {
													"id": 1588,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1584,
															"name": "executor",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1534,
															"src": "1302:8:9",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																"typeString": "mapping(address => bool)"
															}
														},
														"id": 1586,
														"indexExpression": {
															"id": 1585,
															"name": "_address",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1577,
															"src": "1311:8:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "1302:18:9",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1587,
														"name": "_type",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1579,
														"src": "1323:5:9",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "1302:26:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1589,
												"nodeType": "ExpressionStatement",
												"src": "1302:26:9"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 1590,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "1345:4:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 1583,
												"id": 1591,
												"nodeType": "Return",
												"src": "1338:11:9"
											}
										]
									},
									"id": 1593,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_setExecutor",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1580,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1577,
												"mutability": "mutable",
												"name": "_address",
												"nodeType": "VariableDeclaration",
												"scope": 1593,
												"src": "1218:16:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1576,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1218:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1579,
												"mutability": "mutable",
												"name": "_type",
												"nodeType": "VariableDeclaration",
												"scope": 1593,
												"src": "1236:10:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1578,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1236:4:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1217:30:9"
									},
									"returnParameters": {
										"id": 1583,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1582,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1593,
												"src": "1282:4:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1581,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1282:4:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1281:6:9"
									},
									"scope": 1705,
									"src": "1196:160:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1604,
										"nodeType": "Block",
										"src": "1386:97:9",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"baseExpression": {
																"id": 1596,
																"name": "executor",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1534,
																"src": "1404:8:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																	"typeString": "mapping(address => bool)"
																}
															},
															"id": 1599,
															"indexExpression": {
																"expression": {
																	"id": 1597,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "1413:3:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 1598,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "1413:10:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "1404:20:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "6578656375746f723a2063616c6c6572206973206e6f7420746865206578656375746f72",
															"id": 1600,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1426:38:9",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_444a2fbd424141324bc9bde922e283fec3f00f9313c8ee58792c14af3d450e7a",
																"typeString": "literal_string \"executor: caller is not the executor\""
															},
															"value": "executor: caller is not the executor"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_444a2fbd424141324bc9bde922e283fec3f00f9313c8ee58792c14af3d450e7a",
																"typeString": "literal_string \"executor: caller is not the executor\""
															}
														],
														"id": 1595,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1396:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1601,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1396:69:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1602,
												"nodeType": "ExpressionStatement",
												"src": "1396:69:9"
											},
											{
												"id": 1603,
												"nodeType": "PlaceholderStatement",
												"src": "1475:1:9"
											}
										]
									},
									"id": 1605,
									"name": "onlyExecutor",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 1594,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1383:2:9"
									},
									"src": "1362:121:9",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1620,
										"nodeType": "Block",
										"src": "1559:54:9",
										"statements": [
											{
												"expression": {
													"id": 1616,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1614,
														"name": "timeLimit",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1530,
														"src": "1569:9:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1615,
														"name": "_val",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1607,
														"src": "1581:4:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1569:16:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1617,
												"nodeType": "ExpressionStatement",
												"src": "1569:16:9"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 1618,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "1602:4:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 1613,
												"id": 1619,
												"nodeType": "Return",
												"src": "1595:11:9"
											}
										]
									},
									"functionSelector": "e2889c82",
									"id": 1621,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1610,
											"modifierName": {
												"id": 1609,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 63,
												"src": "1534:9:9"
											},
											"nodeType": "ModifierInvocation",
											"src": "1534:9:9"
										}
									],
									"name": "setTimeLimit",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1608,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1607,
												"mutability": "mutable",
												"name": "_val",
												"nodeType": "VariableDeclaration",
												"scope": 1621,
												"src": "1511:12:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1606,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1511:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1510:14:9"
									},
									"returnParameters": {
										"id": 1613,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1612,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1621,
												"src": "1553:4:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1611,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1553:4:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1552:6:9"
									},
									"scope": 1705,
									"src": "1489:124:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1636,
										"nodeType": "Block",
										"src": "1690:55:9",
										"statements": [
											{
												"expression": {
													"id": 1632,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1630,
														"name": "signer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1528,
														"src": "1700:6:9",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1631,
														"name": "_address",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1623,
														"src": "1709:8:9",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1700:17:9",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 1633,
												"nodeType": "ExpressionStatement",
												"src": "1700:17:9"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 1634,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "1734:4:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 1629,
												"id": 1635,
												"nodeType": "Return",
												"src": "1727:11:9"
											}
										]
									},
									"functionSelector": "6c19e783",
									"id": 1637,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1626,
											"modifierName": {
												"id": 1625,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 63,
												"src": "1665:9:9"
											},
											"nodeType": "ModifierInvocation",
											"src": "1665:9:9"
										}
									],
									"name": "setSigner",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1624,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1623,
												"mutability": "mutable",
												"name": "_address",
												"nodeType": "VariableDeclaration",
												"scope": 1637,
												"src": "1638:16:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1622,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1638:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1637:18:9"
									},
									"returnParameters": {
										"id": 1629,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1628,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1637,
												"src": "1684:4:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1627,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1684:4:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1683:6:9"
									},
									"scope": 1705,
									"src": "1619:126:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1703,
										"nodeType": "Block",
										"src": "1946:467:9",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"baseExpression": {
																"id": 1653,
																"name": "executor",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1534,
																"src": "1964:8:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																	"typeString": "mapping(address => bool)"
																}
															},
															"id": 1656,
															"indexExpression": {
																"expression": {
																	"id": 1654,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "1973:3:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 1655,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "1973:10:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "1964:20:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "6578656375746f7220657272",
															"id": 1657,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1986:14:9",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_7e80b57c31606f27bf3b71c12c012706f9d1d32402fcaa4edfe4bd032f9396bc",
																"typeString": "literal_string \"executor err\""
															},
															"value": "executor err"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_7e80b57c31606f27bf3b71c12c012706f9d1d32402fcaa4edfe4bd032f9396bc",
																"typeString": "literal_string \"executor err\""
															}
														],
														"id": 1652,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1956:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1658,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1956:45:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1659,
												"nodeType": "ExpressionStatement",
												"src": "1956:45:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1666,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1664,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 1661,
																		"name": "block",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967292,
																		"src": "2019:5:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_block",
																			"typeString": "block"
																		}
																	},
																	"id": 1662,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "timestamp",
																	"nodeType": "MemberAccess",
																	"src": "2019:15:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"id": 1663,
																	"name": "timeLimit",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1530,
																	"src": "2037:9:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "2019:27:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"id": 1665,
																"name": "_timestamp",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1643,
																"src": "2049:10:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2019:40:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "74696d657374616d7020657272",
															"id": 1667,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2061:15:9",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_072ebc86744005b13d5fd6240155e429628bfb1ee414c3c974c70f073ea6c132",
																"typeString": "literal_string \"timestamp err\""
															},
															"value": "timestamp err"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_072ebc86744005b13d5fd6240155e429628bfb1ee414c3c974c70f073ea6c132",
																"typeString": "literal_string \"timestamp err\""
															}
														],
														"id": 1660,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2011:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1668,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2011:66:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1669,
												"nodeType": "ExpressionStatement",
												"src": "2011:66:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1671,
															"name": "_marketState",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1639,
															"src": "2095:12:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4d61726b6574206e6f74206f70656e",
															"id": 1672,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2109:17:9",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_87a1aed8d26bb35b9266926ed414e36459129c09fe39ed45cfeb7d91a17c321d",
																"typeString": "literal_string \"Market not open\""
															},
															"value": "Market not open"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_87a1aed8d26bb35b9266926ed414e36459129c09fe39ed45cfeb7d91a17c321d",
																"typeString": "literal_string \"Market not open\""
															}
														],
														"id": 1670,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2087:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1673,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2087:40:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1674,
												"nodeType": "ExpressionStatement",
												"src": "2087:40:9"
											},
											{
												"assignments": [
													1676
												],
												"declarations": [
													{
														"constant": false,
														"id": 1676,
														"mutability": "mutable",
														"name": "hash",
														"nodeType": "VariableDeclaration",
														"scope": 1703,
														"src": "2137:12:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 1675,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "2137:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1686,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 1680,
																	"name": "_marketState",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1639,
																	"src": "2192:12:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																{
																	"id": 1681,
																	"name": "_price18",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1641,
																	"src": "2206:8:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 1682,
																	"name": "_timestamp",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1643,
																	"src": "2216:10:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 1683,
																	"name": "_symbols",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1645,
																	"src": "2228:8:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																],
																"expression": {
																	"id": 1678,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "2175:3:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 1679,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodePacked",
																"nodeType": "MemberAccess",
																"src": "2175:16:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 1684,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2175:62:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 1677,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967288,
														"src": "2152:9:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 1685,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2152:95:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2137:110:9"
											},
											{
												"assignments": [
													1688
												],
												"declarations": [
													{
														"constant": false,
														"id": 1688,
														"mutability": "mutable",
														"name": "_signer",
														"nodeType": "VariableDeclaration",
														"scope": 1703,
														"src": "2257:15:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1687,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "2257:7:9",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1697,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 1693,
																	"name": "hash",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1676,
																	"src": "2331:4:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																],
																"expression": {
																	"id": 1691,
																	"name": "ECDSA",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1118,
																	"src": "2302:5:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_ECDSA_$1118_$",
																		"typeString": "type(library ECDSA)"
																	}
																},
																"id": 1692,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "toEthSignedMessageHash",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1075,
																"src": "2302:28:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_bytes32_$returns$_t_bytes32_$",
																	"typeString": "function (bytes32) pure returns (bytes32)"
																}
															},
															"id": 1694,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2302:34:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 1695,
															"name": "_signature",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1647,
															"src": "2350:10:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 1689,
															"name": "ECDSA",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1118,
															"src": "2275:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_ECDSA_$1118_$",
																"typeString": "type(library ECDSA)"
															}
														},
														"id": 1690,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "recover",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 884,
														"src": "2275:13:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_address_$",
															"typeString": "function (bytes32,bytes memory) pure returns (address)"
														}
													},
													"id": 1696,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2275:95:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2257:113:9"
											},
											{
												"expression": {
													"components": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 1700,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1698,
																"name": "signer",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1528,
																"src": "2388:6:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"id": 1699,
																"name": "_signer",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1688,
																"src": "2398:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "2388:17:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"id": 1701,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "2387:19:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1651,
												"id": 1702,
												"nodeType": "Return",
												"src": "2380:26:9"
											}
										]
									},
									"functionSelector": "239b93b2",
									"id": 1704,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getkey",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1648,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1639,
												"mutability": "mutable",
												"name": "_marketState",
												"nodeType": "VariableDeclaration",
												"scope": 1704,
												"src": "1776:17:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1638,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1776:4:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1641,
												"mutability": "mutable",
												"name": "_price18",
												"nodeType": "VariableDeclaration",
												"scope": 1704,
												"src": "1803:16:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1640,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1803:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1643,
												"mutability": "mutable",
												"name": "_timestamp",
												"nodeType": "VariableDeclaration",
												"scope": 1704,
												"src": "1829:18:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1642,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1829:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1645,
												"mutability": "mutable",
												"name": "_symbols",
												"nodeType": "VariableDeclaration",
												"scope": 1704,
												"src": "1857:22:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1644,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1857:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1647,
												"mutability": "mutable",
												"name": "_signature",
												"nodeType": "VariableDeclaration",
												"scope": 1704,
												"src": "1889:23:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1646,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1889:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1766:152:9"
									},
									"returnParameters": {
										"id": 1651,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1650,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1704,
												"src": "1940:4:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1649,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1940:4:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1939:6:9"
									},
									"scope": 1705,
									"src": "1751:662:9",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								}
							],
							"scope": 1706,
							"src": "436:1979:9"
						}
					],
					"src": "107:2309:9"
				},
				"id": 9
			}
		}
	}
}